[{"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\index.js":"1","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\App.js":"2","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\reportWebVitals.js":"3","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-2\\src\\index.js":"4","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-2\\src\\App.js":"5","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-2\\src\\reportWebVitals.js":"6","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-2\\src\\Header.js":"7","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-2\\src\\Navbar.js":"8","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\Change.js":"9","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\Props.js":"10","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\UseEffect.js":"11","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\Navbar.js":"12","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\Mapping.js":"13","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\index.js":"14","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\App.js":"15","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\reportWebVitals.js":"16","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\AccessFolder\\Login.js":"17","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\ChatParentFolder\\ChatParent.js":"18","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\ChatListFolder\\ChatList.js":"19","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\ChatProfileFolder\\ChatProfile.js":"20","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\ChatHeaderFolder\\ChatHeader.js":"21","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\ChatBodyFolder\\ChatBody.js":"22","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\AccessFolder\\Signup.js":"23","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\LoggedInNameContext.js":"24","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\OtherUserNameContext.js":"25","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\UserProfileFolder\\UserProfile.js":"26","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\ProfileDisplayContext.js":"27","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\MessageDisplayContext.js":"28","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\SettingsFolder\\Settings.js":"29","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\SettingsDisplayContext.js":"30","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\SettingsFolder\\ProfilePhotoSettingFolder\\ProfilePhotoSetting.js":"31","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\ProfilePhotoChangeContext.js":"32","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\SettingsFolder\\PasswordSettingFolder\\PasswordSetting.js":"33","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\utilis\\PrivateRoutes.js":"34","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\MobileViewFolder\\MobileChatList.js":"35","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\AddUserToChatListContext.js":"36","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\NotificationContext.js":"37","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\SocketModuleFolder\\socket.js":"38"},{"size":535,"mtime":1651790155049,"results":"39","hashOfConfig":"40"},{"size":443,"mtime":1663220535385,"results":"41","hashOfConfig":"40"},{"size":362,"mtime":1651790158518,"results":"42","hashOfConfig":"40"},{"size":535,"mtime":1651790155049,"results":"43","hashOfConfig":"44"},{"size":201,"mtime":1658009065908,"results":"45","hashOfConfig":"44"},{"size":362,"mtime":1651790158518,"results":"46","hashOfConfig":"44"},{"size":176,"mtime":1658009557092,"results":"47","hashOfConfig":"44"},{"size":272,"mtime":1658010433316,"results":"48","hashOfConfig":"44"},{"size":303,"mtime":1659290588519,"results":"49","hashOfConfig":"40"},{"size":182,"mtime":1659291071625,"results":"50","hashOfConfig":"40"},{"size":265,"mtime":1659293089482,"results":"51","hashOfConfig":"40"},{"size":1171,"mtime":1663220743252,"results":"52","hashOfConfig":"40"},{"size":564,"mtime":1663224913899,"results":"53","hashOfConfig":"40"},{"size":599,"mtime":1672685118603,"results":"54","hashOfConfig":"55"},{"size":4463,"mtime":1688859079609,"results":"56","hashOfConfig":"55"},{"size":362,"mtime":1651790158518,"results":"57","hashOfConfig":"55"},{"size":4949,"mtime":1688829849027,"results":"58","hashOfConfig":"55"},{"size":1749,"mtime":1688209282806,"results":"59","hashOfConfig":"55"},{"size":17785,"mtime":1689094467186,"results":"60","hashOfConfig":"55"},{"size":4571,"mtime":1688213411171,"results":"61","hashOfConfig":"55"},{"size":224,"mtime":1688207946876,"results":"62","hashOfConfig":"55"},{"size":19205,"mtime":1689199609930,"results":"63","hashOfConfig":"55"},{"size":3733,"mtime":1688207766524,"results":"64","hashOfConfig":"55"},{"size":384,"mtime":1680361142366,"results":"65","hashOfConfig":"55"},{"size":97,"mtime":1680456633101,"results":"66","hashOfConfig":"55"},{"size":2740,"mtime":1688588904708,"results":"67","hashOfConfig":"55"},{"size":98,"mtime":1681897321363,"results":"68","hashOfConfig":"55"},{"size":98,"mtime":1681916139196,"results":"69","hashOfConfig":"55"},{"size":811,"mtime":1688925605150,"results":"70","hashOfConfig":"55"},{"size":99,"mtime":1681919753983,"results":"71","hashOfConfig":"55"},{"size":3958,"mtime":1688222838852,"results":"72","hashOfConfig":"55"},{"size":102,"mtime":1683811497958,"results":"73","hashOfConfig":"55"},{"size":2173,"mtime":1688414905467,"results":"74","hashOfConfig":"55"},{"size":705,"mtime":1686596871712,"results":"75","hashOfConfig":"55"},{"size":20637,"mtime":1689190642314,"results":"76","hashOfConfig":"55"},{"size":101,"mtime":1686650036182,"results":"77","hashOfConfig":"55"},{"size":96,"mtime":1687279960574,"results":"78","hashOfConfig":"55"},{"size":299,"mtime":1688510400428,"results":"79","hashOfConfig":"55"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"1ma7pjh",{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4ska22",{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"83"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"11skfyp",{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"124"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"124"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"124"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"124"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"124"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"124"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"124"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"124"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\index.js",[],[],[],"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\App.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\reportWebVitals.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-2\\src\\index.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-2\\src\\App.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-2\\src\\reportWebVitals.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-2\\src\\Header.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-2\\src\\Navbar.js",["208","209","210"],[],"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\Change.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\Props.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\UseEffect.js",["211"],[],"import { useEffect } from 'react';\r\n\r\nfunction Use(){\r\n\r\n    function set(){\r\n        alert('hello world')\r\n    }\r\n\r\n   useEffect(() => {\r\n    //   setTimeout(set, 1000);\r\n\r\n}, [])\r\n    \r\n    return(\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Use;","C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\Navbar.js",["212","213","214","215","216","217"],[],"C:\\Users\\HP\\Desktop\\coding-files\\practicing\\react-practice-1\\src\\Mapping.js",["218"],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\index.js",[],[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\App.js",["219","220"],[],"import './App.css';\nimport { BrowserRouter, Routes, Route, Switch, Link } from 'react-router-dom';\nimport Login from './asset/AccessFolder/Login';\nimport ChatParent from './asset/ChatParentFolder/ChatParent';\nimport Signup from './asset/AccessFolder/Signup';\nimport ChatProfile from './asset/ChatProfileFolder/ChatProfile';\nimport ChatList from './asset/ChatListFolder/ChatList';\nimport { useState } from 'react';\nimport { OtherUserNameContext } from './asset/contextFolder/OtherUserNameContext';//importing OtherUserName Context\nimport ChatBody from './asset/ChatBodyFolder/ChatBody';\nimport UserProfile from './asset/UserProfileFolder/UserProfile';\nimport { ProfileDisplayContext } from './asset/contextFolder/ProfileDisplayContext';\nimport { MessageDisplayContext } from './asset/contextFolder/MessageDisplayContext';\nimport Settings from './asset/SettingsFolder/Settings';\nimport { SettingsDisplayContext } from './asset/contextFolder/SettingsDisplayContext';\nimport { ProfilePhotoChangeContext } from './asset/contextFolder/ProfilePhotoChangeContext';\nimport PrivateRoutes from './asset/utilis/PrivateRoutes';\nimport MobileChatList from './asset/MobileViewFolder/MobileChatList';\nimport { AddUserToChatListContext } from './asset/contextFolder/AddUserToChatListContext';\nimport { NotificationContext } from './asset/contextFolder/NotificationContext';\n\n\nfunction App(){\n\n  //This context api useState carries the Name of the other user that you can chatting with\n  const [otherUserNameValue, setOtherUserNameValue] = useState() \n\n  //This context api useState carries the instuction if user profile should be displayed after the option is clicked\n  const [profileDisplayValue, setProfileDisplayValue] = useState(false)\n\n  //context for display message\n  const [messageDisplayValue, setMessageDisplayValue] = useState(false)\n\n  //context for displaying the settings\n  const [settingsDisplayValue, setSettingsDisplayValue] = useState(false)\n\n  //this state context carries when user change their profile picture \n  const [profilePhotoChangeValue, setProfilePhotoChangeValue] = useState() \n\n  //This state adds user to your chatlist when they send you a message\n  const [addUserToChatListValue, setAddUserToChatListValue] = useState()\n\n  //This state holds the value for notification count\n  const [notificationValue, setNotificationValue] = useState([])\n \n  return(\n    <div>\n        <OtherUserNameContext.Provider value={ { otherUserNameValue, setOtherUserNameValue } }>\n          <ProfileDisplayContext.Provider value={ { profileDisplayValue, setProfileDisplayValue } } >\n            <MessageDisplayContext.Provider value={ { messageDisplayValue, setMessageDisplayValue } }>\n              <SettingsDisplayContext.Provider value={ { settingsDisplayValue, setSettingsDisplayValue } }>\n                <ProfilePhotoChangeContext.Provider value={ { profilePhotoChangeValue, setProfilePhotoChangeValue } }>\n                  <AddUserToChatListContext.Provider value={ { addUserToChatListValue, setAddUserToChatListValue } }>\n                    <NotificationContext.Provider value={ { notificationValue, setNotificationValue } } >\n                      <BrowserRouter>\n                        <Routes>\n                          <Route path=\"/\" element={<Login />} />\n                          <Route path=\"/signup\" element={<Signup />} />\n                          <Route element={<PrivateRoutes />} >\n                            <Route path=\"/dashboard\" element={<ChatParent />} />\n                            <Route path=\"/chatprofile\" element={<ChatProfile />} />\n                            <Route path=\"/chatlist\" element={<ChatList />} />\n                            <Route path=\"/chatbody\" element={<ChatBody />} /> \n                            <Route path=\"/userprofile\" element={<UserProfile />} />\n                            <Route path=\"/settings\" element={<Settings />} />\n                          <Route path=\"/mobilechatList\" element={<MobileChatList />} />\n                          </Route>\n                        </Routes>\n                      </BrowserRouter>\n                    </NotificationContext.Provider>\n                  </AddUserToChatListContext.Provider>\n                </ProfilePhotoChangeContext.Provider>\n              </SettingsDisplayContext.Provider>\n            </MessageDisplayContext.Provider>\n          </ProfileDisplayContext.Provider>  \n        </OtherUserNameContext.Provider>\n\n</div>\n\n  );\n\n}\n\nexport default App;\n","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\AccessFolder\\Login.js",["221","222","223","224"],[],"//Here we create the login page for the chat application\r\n\r\nimport './Login.css';\r\nimport axios from 'axios'\r\nimport {useContext, useEffect, useState} from 'react';\r\nimport { FaUser } from 'react-icons/fa'\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport socket from '../SocketModuleFolder/socket';\r\n\r\nfunction Login(){\r\n    const navigate = useNavigate();\r\n    const [userName, setUserName] = useState('');\r\n    const [userPassword, setUserPassword] = useState('');\r\n\r\n \r\n    //SUBMIT LOGIN DETAIL TO BACKEND FOR PROCESSES.\r\n    const handleSubmit = async (e) => {\r\n\r\n        e.preventDefault();\r\n       \r\n\r\n       axios.post(\"http://localhost:4000/login\", {\r\n\r\n        name: userName,\r\n\r\n        password: userPassword\r\n\r\n       }).then((response) => {\r\n\r\n //         console.log(response.data) \r\n\r\n          //If we get a positive result from the response of the fetch and not an error,\r\n          //we should get the user_id of the user loggin in so that we can \r\n          //use that to retreive all the unique information about that specific \r\n          //user throughout our application. The user_id will be stored in the new object\r\n          //called {result} that we created in our server controller for handling login.\r\n          if(response.data.result){\r\n\r\n           const loggedInName = response.data.result;\r\n\r\n           sessionStorage.setItem(\"username\", JSON.stringify(loggedInName))\r\n\r\n\r\n\r\n          //THIS EMITS THE USERNAME OF THE LOGGED IN USER TO THE SERVER ONCE LOGIN\r\n          //SUCCESSFUL SO THAT IT CAN ASSIGN A SOCKET ID TO THE LOGIN USER\r\n          //(SOCKET ID: THIS IS WHAT THE SERVER WILL USER TO IDENTIFY A USER WHEN\r\n          //WHEN IS WANTS TO SEND MESSAGE TO THEM). . . \r\n        \r\n            if (loggedInName) {\r\n\r\n                socket.emit(\"username\", { username: loggedInName } );\r\n\r\n            } else {\r\n\r\n                alert('Error ehile getting your name, kindly logout and login again.');\r\n            }\r\n\r\n\r\n           \r\n          //if the user is accessing this application on a larger screen size, we are then\r\n          //going to route from this page to the dashboard once login is successful. if \r\n          //user is accessing this application with smaller screen, we'd route the to the mobile\r\n          //chat list page.\r\n           const matchResult = window.matchMedia(\"(max-width: 767px)\");\r\n\r\n           { matchResult.matches === true ? navigate('/mobilechatList') : navigate('/dashboard') }\r\n\r\n\r\n          } else if(response.data.error){\r\n            //If there was an error with getting due to wrong user login input, we'd get \r\n            //notified here...\r\n            console.log('bad')\r\n            alert('Error while loggin in.')\r\n          }\r\n        \r\n\r\n       }).catch((error) => {\r\n             //This error is for the promise. If there was an error while the promise is \r\n             //executing, we get notified here...\r\n             console.log(error) \r\n             alert('Sorry! error while trying log in.')\r\n             console.log('err while login')\r\n       });\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n\r\n        <div className=\"login-center\">\r\n\r\n            <form className=\"login-container\" onSubmit={handleSubmit}>\r\n\r\n                <div className='f'>\r\n\r\n                `<FaUser id=\"loginFaUser\"/>\r\n\r\n                </div>\r\n                    `\r\n                <h2 className=\"login-header\">Sign in to open chat</h2>\r\n                \r\n                <div className=\"user-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        required\r\n                        placeholder=\"username\"\r\n                        name=\"username\"\r\n                        id=\"username\"\r\n                        className=\"username-input\"\r\n                        value={userName}\r\n                        onChange={(e) => setUserName(e.target.value)}\r\n                        /> \r\n\r\n                    <input\r\n                        type=\"password\"\r\n                        required\r\n                        placeholder=\"password\"\r\n                        minLength={6}\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        className=\"password-input\"\r\n                        value={userPassword}\r\n                        onChange={(e) => setUserPassword(e.target.value)}\r\n                        /> \r\n                </div>\r\n\r\n                    <div className=\"btn-container\">\r\n                        <button className=\"login-cta\">SIGN IN</button>\r\n                    </div>\r\n\r\n                    <p className=\"login-sign-up\">Dont have an account? <Link to=\"/signup\">Sign up</Link></p>\r\n                    <p className=\"forgot-password\">\r\n                        <a href=\"#\" >forgot password</a>\r\n                    </p>\r\n\r\n            </form>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Login;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\ChatParentFolder\\ChatParent.js",["225","226","227","228","229","230","231"],[],"import './ChatParent.css';\r\nimport ChatBody from '../ChatBodyFolder/ChatBody';\r\nimport ChatHeader from '../ChatHeaderFolder/ChatHeader';\r\nimport ChatProfile from '../ChatProfileFolder/ChatProfile';\r\nimport ChatList from '../ChatListFolder/ChatList';\r\nimport { Link, Route, Routes } from 'react-router-dom';\r\nimport { useContext, useState } from 'react';\r\nimport { ProfileDisplayContext } from '../contextFolder/ProfileDisplayContext';\r\nimport UserProfile from '../UserProfileFolder/UserProfile';\r\nimport { MessageDisplayContext } from '../contextFolder/MessageDisplayContext';\r\nimport { SettingsDisplayContext } from '../contextFolder/SettingsDisplayContext';\r\nimport Settings from '../SettingsFolder/Settings';\r\n\r\n\r\nfunction ChatParent(){\r\n\r\n  const { profileDisplayValue, setProfileDisplayValue } = useContext(ProfileDisplayContext) \r\n  const { messageDisplayValue, setMessageDisplayValue } = useContext(MessageDisplayContext) \r\n  const { settingsDisplayValue, setSettingsDisplayValue } = useContext(SettingsDisplayContext)\r\n\r\n    return(\r\n        <div>\r\n            <ChatHeader />\r\n\r\n          <div className=\"AppGrid\">\r\n\r\n            <ChatProfile id=\"chat-list-component\"/>\r\n\r\n            <ChatList/>\r\n          \r\n          {/* Here we saying if profileDisplay is true, show it component. \r\n\r\n              same applies for other component other component like message component and settings component.\r\n\r\n        */}\r\n            { profileDisplayValue === true ? <UserProfile /> \r\n            : messageDisplayValue === true ? <ChatBody />\r\n            : settingsDisplayValue === true ? <Settings />\r\n            : <ChatBody /> }\r\n\r\n            \r\n            \r\n          </div>\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatParent;","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\ChatListFolder\\ChatList.js",["232","233","234","235","236","237","238","239","240","241","242"],[],"import { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { FaExclamationCircle, FaSistrix } from \"react-icons/fa\";\r\nimport './ChatList.css';\r\nimport axios from 'axios';\r\nimport { OtherUserNameContext } from \"../contextFolder/OtherUserNameContext\";\r\nimport { MessageDisplayContext } from \"../contextFolder/MessageDisplayContext\";\r\nimport { ProfileDisplayContext } from \"../contextFolder/ProfileDisplayContext\";\r\nimport { SettingsDisplayContext } from \"../contextFolder/SettingsDisplayContext\";\r\nimport { AddUserToChatListContext } from \"../contextFolder/AddUserToChatListContext\";\r\nimport { NotificationContext } from \"../contextFolder/NotificationContext\";\r\n\r\nfunction ChatList ( ) {\r\n\r\n    //Let's get the name of the user that logged in (which is you)\r\n    //from the session storage . .  . . . . . . . . . . . . . . .\r\n    let loggedInNameValue = JSON.parse(sessionStorage.getItem(\"username\"));\r\n\r\n\r\n    //-------- [ OUR USEREF FOR THIS COMPONENT... ] --------//\r\n\r\n    //THIS IS FOR OUR SCROLLABLE CHAT list      \r\n    const scrollableChatListRef = useRef()\r\n\r\n    //THIS IS FOR THE FILTERING OF SEARCH DIV\r\n    const filterParentContainerRef = useRef()\r\n\r\n    //THIS IS FOR THE CONVERSED WITH DIV\r\n    const conversedWithParentContainerRef = useRef()\r\n\r\n    //THIS IF HANDLING HIDING UNREAD MESSAGE ICON\r\n    const unReadRef = useRef()\r\n\r\n\r\n    //THIS HIDES THE FILTER PARENT CONTAINER DIV ONCE A USER THAT \r\n    //DISPLAY ON SEARCH LIST IS CLICKED ON . . . . . . \r\n    const hideFilterParentContainerRef = () => {\r\n\r\n        filterParentContainerRef.current.style.display = \"none\"\r\n\r\n    }\r\n\r\n\r\n    //THIS SHOWS FILTERED PARENT CONTAINER WHEN YOU START SEARCHING\r\n    //FOR USER IN THE SEARCH BOX. . . . . . . . . . . . \r\n    const showFilterParentContainerRef = () => {\r\n\r\n        filterParentContainerRef.current.style.display = \"block\"\r\n\r\n\r\n    }\r\n\r\n  \r\n    //THIS REMOVES USER FROM YOUR NOTIFICATION LIST WHEN THEY ARE CLICKED\r\n    //ON . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n    const handleRemovingThisUserFromNotificationList = (thisUser) => {\r\n\r\n        setNotificationValue([]) //first let's empty the notification array.\r\n\r\n        //Let's then send the name of the person we want to remove to\r\n        //our DB then return the remaining people in our saved notification\r\n        //list in the database then put that value in the notification array.\r\n\r\n        axios.post(\"http://localhost:4000/removeThisUserNotification\", {\r\n\r\n            loggedInUser: loggedInNameValue,\r\n\r\n            personToRemove: thisUser\r\n\r\n        }).then((result) => {\r\n\r\n            if (result) {\r\n\r\n                result.data.forEach((resData) => {\r\n\r\n                    let addThis = resData.personToAddToNotificationList\r\n\r\n                    //when we get the result of people in our notification list,\r\n                    //let's add them to our notification array and also (don't\r\n                    //add people that already exist in the array to prevent name\r\n                    //appearing twice which will affect the length of the array.\r\n                    //mind you, the length of the array will we used to count how\r\n                    //many notification we have . . . . . . . . . . . . . . . .)\r\n                    if ( !notificationValue.includes(addThis) ) { \r\n\r\n                    setNotificationValue((prevState) => [...prevState, addThis])\r\n\r\n                    }\r\n\r\n                });\r\n \r\n               \r\n            }\r\n            \r\n            \r\n        }).catch((err) => {\r\n\r\n            console.log(err)\r\n\r\n        });\r\n\r\n\r\n        //This hides the notification alert symbol icon that shows close to user\r\n        \r\n        unReadRef.current.style.display = \"none\";\r\n\r\n    }\r\n\r\n\r\n   \r\n    //---------- [ CONTEXT API FOR THIS FILE... ] ----------//\r\n    const { otherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext) \r\n\r\n    //Displays message component when you click on list of conversed with user\r\n    const { messageDisplayValue, setMessageDisplayValue } = useContext(MessageDisplayContext)\r\n\r\n    const { profileDisplayValue, setProfileDisplayValue } = useContext(ProfileDisplayContext)\r\n    const { settingsDisplayValue, setSettingsDisplayValue } = useContext(SettingsDisplayContext)\r\n\r\n    //adding someone to your chatlist when they message you.\r\n    const { addUserToChatListValue, setAddUserToChatListValue } = useContext(AddUserToChatListContext)\r\n\r\n    //This hold the value for every notification we've. It stores the user that  \r\n    //sent use message and have'nt responded to.\r\n    const { notificationValue, setNotificationValue }  = useContext(NotificationContext);\r\n\r\n\r\n    //If on large screen, this makes sure the message component is what is \r\n    //visible (not the profile or setting component) .  . . . .. . . . \r\n    const clickMessage = () => {\r\n        setProfileDisplayValue(false)\r\n        setSettingsDisplayValue(false)\r\n        setMessageDisplayValue(true)\r\n    }\r\n\r\n\r\n\r\n\r\n    /* - - - - - [ALL USESTATE FOR THIS PARTICULAR COMPONENT] - - - - - */\r\n\r\n    //This will help us storing the list of user that we've conversed with\r\n    const [conversedWithLists, setConversedWithLists] = useState([])\r\n\r\n    //This setFilteredData will store the filtered element based on the user\r\n    //search input and then store it in the filteredData variable so we can\r\n    //map it\r\n    const [filteredData, setFilteredData] = useState([])\r\n\r\n    //This is used for capturing what the user types into the search box\r\n    const [searchWord, setSearchWord] = useState();\r\n   \r\n\r\n\r\n    /* - - - - - [ALL OUR FUNCTIONS FOR THIS PARTICULAR COMPONENT] - - - - -*/\r\n\r\n    //This is to store what the user type in the search box so we can\r\n    //use for filtering and also filter the name of user in realtime \r\n    //based on serach input\r\n    const onChangeFunction = ( event ) => {\r\n\r\n        //This will grab the value in the user type in the input box and store it in the searchFilter state\r\n        //please note: the toLowerCase() will convert the value to lowercase so that it can match with the\r\n        //lowercase name properties in the database. (we'd convert all name properties in DB to lowercase too)\r\n         setSearchWord(event.target.value.toLowerCase())\r\n        \r\n        //This will filter out users that matches the character inputted by the user in realtime\r\n        //and then store it in the newFilter variable. please note: the toLowerCase() will convert the value of the\r\n        // DB name property to lowercase so that it can match with the value from the search input which we already \r\n        //converted to lowercase using the toLowercase() method.\r\n    \r\n        //Here we're returning users that their names matches with the value the user is inputting as they\r\n        //are typing it out on the go...\r\n\r\n        if (searchWord) {\r\n       \r\n        axios.post(\"http://localhost:4000/searchAllUsers\",{\r\n\r\n            searchInput: searchWord.toLowerCase()\r\n            \r\n\r\n        }).then((response) => {\r\n\r\n            console.log(response.data)\r\n\r\n            response.data.forEach((resData) => {\r\n\r\n                let name = resData;\r\n        \r\n                //Here let check if filteredData already have this user stored in it already \r\n                //to avoid duplicate display of names that already exist in this array.\r\n                let checkIfThisUserExistUsingItName = filteredData.some((object) => object === name);\r\n\r\n\r\n                if (!checkIfThisUserExistUsingItName) {\r\n                   \r\n                   setFilteredData([{name: name}])\r\n\r\n                }\r\n\r\n             \r\n            })\r\n\r\n      \r\n        } ).catch ( (error) => {\r\n        \r\n            console.log(\"oops! Couldn't reach the server\" + error)\r\n        \r\n        } )\r\n\r\n    }\r\n\r\n\r\n    if (!searchWord || searchWord === \" \") {\r\n\r\n        hideFilterParentContainerRef()\r\n    }\r\n\r\n        //This shows the filters parent container whenonChange of the input search box\r\n        showFilterParentContainerRef()\r\n\r\n\r\n\r\n    }//ONCHANGE CLOSING FUNCTION STATEMENT \r\n\r\n\r\n\r\n   \r\n    //This function is used for getting the user with the name that matches what the you are typing\r\n    //in the search box once they clicked the search button close to the search input box\r\n    const searchUser = () => {\r\n        \r\n        if (searchWord) {\r\n       \r\n            axios.post(\"http://localhost:4000/getAllUsers\",{\r\n    \r\n                searchInput: searchWord.toLowerCase()\r\n                \r\n    \r\n            }).then((response) => {\r\n    \r\n                console.log(response.data)\r\n\r\n                response.data.forEach((resData) => {\r\n\r\n                    let name = resData;\r\n            \r\n                    //Here let check if filteredData already have this user stored in it already \r\n                    //to avoid duplicate display of names that already exist in this array.\r\n                    let checkIfThisUserExistUsingItName = filteredData.some((object) => object === name);\r\n    \r\n    \r\n                    if (!checkIfThisUserExistUsingItName) {\r\n                       \r\n                       setFilteredData([{name: name}])\r\n    \r\n                    }\r\n    \r\n                 \r\n                })\r\n    \r\n          \r\n            } ).catch ( (error) => {\r\n            \r\n                console.log(\"oops! Couldn't reach the server\" + error)\r\n            \r\n            } )\r\n    \r\n        }\r\n    \r\n    \r\n            //This shows the filters parent container whenonChange of the input search box\r\n            showFilterParentContainerRef()\r\n    \r\n    \r\n\r\n    }\r\n\r\n\r\n    //THIS FUNCTION SAVE A PERSON TO YOUR CHATLIST IN OUR DATABASE WHEN\r\n    //THEY ARE BEING CLICK ON AND THEN ADD THE PERSON TO OUR CONVERSED \r\n    //WITH ARRAY IN OUR FRONTEND AFTER DB SAVE IS SUCCESSFUL. . . . . .\r\n    function saveToChatList (nameToSaveToChatList) {\r\n\r\n        if (loggedInNameValue && nameToSaveToChatList) {\r\n\r\n            axios.post(\"http://localhost:4000/saveToChatList\", {\r\n\r\n                loggedInUser:  loggedInNameValue,\r\n\r\n                personToSaveToChatList: nameToSaveToChatList\r\n\r\n            }).then((response) => {\r\n\r\n                //let's add the person our conversed with array\r\n                setConversedWithLists((prevState) => [...prevState, response.data.result])\r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err)\r\n\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n     //THIS USEEFFECT IS USED TO FETCH ALL SAVED CONVERSED WITH LIST ON EVERY PAGE RENDER\r\n     useEffect(() => {\r\n\r\n        if (loggedInNameValue) { \r\n\r\n        axios.post(\"http://localhost:4000/getMyChatList\", {\r\n\r\n            loggedInUser: loggedInNameValue\r\n\r\n        }).then((response) => {\r\n\r\n        //filtering all the people in my chatlist and then putting it in my conversed with list\r\n          const c = response.data.filter((item) => {\r\n\r\n            return setConversedWithLists((prevState) => [...prevState, item.personToSaveToChatList])\r\n\r\n          })\r\n\r\n        }).catch((err) => {\r\n\r\n            console.log(err);\r\n\r\n        });\r\n\r\n        }\r\n    \r\n    }, [])\r\n\r\n\r\n    //THIS WILL BE USED TO ADD SOMEONE TO YOUR CHATLIST WHEN THEY MESSAGE YOU\r\n    //AND YOU ARE PRESENTLY NOT CHATTING WITH THEM. . . . . . . . . . . . . . \r\n    useEffect(() => {\r\n\r\n        if (addUserToChatListValue) {\r\n\r\n            if (conversedWithLists.includes(addUserToChatListValue)) {\r\n\r\n            }\r\n\r\n            //if conversedWithList doesn't include this particular user, add the user\r\n            //to my chatlist.\r\n\r\n            if (!conversedWithLists.includes(addUserToChatListValue)) {\r\n\r\n                //saving this user to our chatlist database\r\n                saveToChatList(addUserToChatListValue)\r\n\r\n            }\r\n\r\n            \r\n        }\r\n\r\n    }, [addUserToChatListValue]);\r\n\r\n    \r\n    \r\n    //THIS EFFECT WILL BE USED TO GET ALL YOUR AVAILABLE NOTIFICATION ON PAGE\r\n    //RELOAD\r\n    useEffect(() => {\r\n\r\n        //first let's empty the notification value\r\n        setNotificationValue([])\r\n\r\n        axios.post(\"http://localhost:4000/getMyNotifications\", {\r\n\r\n            username: loggedInNameValue\r\n\r\n        }).then((response) => {\r\n\r\n            response.data.forEach((resData) => {\r\n\r\n                let addThis = resData.personToAddToNotificationList\r\n\r\n                if (!notificationValue.includes(addThis) ) {\r\n\r\n                    setNotificationValue((prevState) => [...prevState, addThis])\r\n\r\n                }\r\n\r\n            });\r\n\r\n        }).catch((err) => {\r\n\r\n            console.log(err)\r\n\r\n        });\r\n\r\n\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    //LET REMOVE THE ICON CLOSE A USER WE'RE CURRENTLY CHHATING WITH IF\r\n    //THEY ARE IN THE NOTIFICATION LIST...\r\n    if (notificationValue.includes(otherUserNameValue)) {\r\n\r\n        setNotificationValue(notificationValue.filter((i) => i !== otherUserNameValue)) \r\n\r\n    }\r\n\r\n \r\n\r\n\r\n \r\n    return(\r\n        <div className=\"chat-list-container\" >\r\n\r\n            {/*This is for the search user's input box*/}\r\n\r\n            <div className=\"search-input-div\">\r\n\r\n                <input type=\"text\" className=\"search-input\" onChange={onChangeFunction}></input>\r\n\r\n               <FaSistrix className=\"search-input-icon\" onClick={searchUser}/>\r\n             \r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"scrollable-chat-list\">\r\n\r\n        \r\n            {/*This is for when user is searching for name. It filters the names available based on\r\n               the user query or search */}\r\n            <div className=\"filterAndConversewithParentDiv\">\r\n\r\n             <div className=\"filterParentContainer\" ref={filterParentContainerRef} >\r\n\r\n                {  \r\n                    filteredData ?\r\n\r\n                    filteredData.map((filter, id) => ( \r\n\r\n                    <div key={id} className=\"filtered-user\"  onClick={( ) => {\r\n\r\n                        if (conversedWithLists.includes(filter.name)) {\r\n\r\n                            \r\n                        } else if ( !conversedWithLists.includes(filter.name) ){\r\n\r\n                        //if user's name is not in our list of converesed with, it should\r\n                        //add it to it.\r\n\r\n                              saveToChatList(filter.name);\r\n                        }\r\n\r\n                        hideFilterParentContainerRef();\r\n                        \r\n                        }}>\r\n                      \r\n                        <p className=\"filteredFlex\" >\r\n\r\n                            <p>\r\n                            { /*THIS CHECKS IF FILTERED USER HAS PROFILE PICTURE SO IT CAN BE DISPLAYED\r\n                                CLOSE TO THE NAME AND IF NO, IT SHOULD DISPLAY THE FIRST LETTER THAT \r\n                                BEGINS IT NAME AS THE PICTURE CLOSE TO THE NAME */\r\n                            \r\n                            filter.name ? <b className=\"image-behind-filter-name\">{ \r\n\r\n                                String(filter.name).charAt(0) \r\n                                \r\n                                }</b> : \" \"        \r\n                            \r\n                            }\r\n                            </p>         \r\n\r\n\r\n                            <p className=\"filterName\">\r\n                                 {filter.name}\r\n                            </p>\r\n                            \r\n                        \r\n                        </p>\r\n\r\n                    </div>\r\n                    \r\n                    ))\r\n\r\n                        : \"\"\r\n                 }\r\n           \r\n             </div>{/*filterParentContainer CLOSING DIV*/}\r\n\r\n\r\n\r\n\r\n            { filteredData.length > 0 ? <p id=\"convo-p\">CONVERSED WITH...</p> : \"\" }\r\n            \r\n            {/*THIS MAPS WHO YOU HAVE CONVERSED WITH. IT SHOWS ALL THE LIST*/}\r\n            <div className=\"conversedWithParentContainer\">\r\n               { \r\n                conversedWithLists.map((conversedWithList, id) => ( \r\n\r\n                <div key={id}  className=\"conversed-user\" onClick={ ( ) => {\r\n\r\n                   {/*onClick of a user in the chatlist will pass the name of the user to \r\n                    the chatbody using the contextapi crafted for OtherUserNameValue*/} \r\n                  \r\n                    setOtherUserNameValue(conversedWithList);\r\n\r\n                    //(if on large screen), this will open the messages component \r\n                    clickMessage();\r\n\r\n                  //Removing from notification list & hiding unread message icon behind it if any.\r\n                  handleRemovingThisUserFromNotificationList(conversedWithList)\r\n\r\n    \r\n                }}>\r\n                    \r\n                <p> \r\n                    { \r\n                     conversedWithList ? <b className=\"image-behind-conversed-name\">{ \r\n\r\n                        String(conversedWithList).charAt(0) \r\n\r\n                    } </b> : \"\"\r\n\r\n                    }  \r\n\r\n                        { conversedWithList }\r\n\r\n                        \r\n                    </p>\r\n\r\n                    <p>\r\n                    {\r\n                    \r\n                    //Gives an alert like signal icon to indicate unread message\r\n                     notificationValue.includes(conversedWithList) ? \r\n                     \r\n                     <b ref={unReadRef}><FaExclamationCircle className=\"unreadMessageIcon\"/></b> : \"\"\r\n\r\n                    }\r\n                    </p>\r\n\r\n\r\n                   \r\n                </div>\r\n                \r\n                ))\r\n            }  \r\n\r\n        </div>{/*ConversedwithParentContainer CLOSING DIV*/}\r\n\r\n\r\n\r\n        </div>{/*filterAndConversewithParentDiv CLOSING DIV*/}\r\n\r\n\r\n                    \r\n         </div>{/*SCROLLABLE DIV CLOSING DIV*/}\r\n\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default ChatList;","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\ChatProfileFolder\\ChatProfile.js",["243","244","245","246","247","248","249","250"],[],"import './ChatProfile.css'\r\nimport { FaCommentDots, FaRegBell, FaRegSun, FaUser, FaUserAlt } from 'react-icons/fa';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport { ProfileDisplayContext } from '../contextFolder/ProfileDisplayContext';\r\nimport { MessageDisplayContext } from '../contextFolder/MessageDisplayContext';\r\nimport { SettingsDisplayContext } from '../contextFolder/SettingsDisplayContext';\r\nimport axios from 'axios';\r\nimport { ProfilePhotoChangeContext } from '../contextFolder/ProfilePhotoChangeContext';\r\nimport { NotificationContext } from '../contextFolder/NotificationContext';\r\n\r\n\r\nfunction ChatProfile(){\r\n\r\n    //This useState carries the Name of the User that logged in\r\n    let loggedInNameValue = JSON.parse(sessionStorage.getItem(\"username\"));\r\n\r\n\r\n    //This context api state carries info about when user change their profile picture\r\n    const { profilePhotoChangeValue, setProfilePhotoChangeValue } = useContext(ProfilePhotoChangeContext)\r\n    \r\n\r\n    const { profileDisplayValue, setProfileDisplayValue } = useContext(ProfileDisplayContext)\r\n    const { messageDisplayValue, setMessageDisplayValue } = useContext(MessageDisplayContext)\r\n    const { settingsDisplayValue, setSettingsDisplayValue } = useContext(SettingsDisplayContext)\r\n    const { notificationValue, setNotificationValue }  = useContext(NotificationContext)\r\n\r\n    //THIS MAKES YOUR PROFILE VISIBLE WHEN YOU CLICK ON THE PROFILE FEATURE\r\n    const clickProfile = () => {\r\n        setMessageDisplayValue(false)\r\n        setSettingsDisplayValue(false)\r\n        setProfileDisplayValue(true)\r\n\r\n    }\r\n\r\n    //THIS MAKES YOUR PROFILE VISIBLE WHEN YOU CLICK ON THE MESSAGE FEATURE\r\n    const clickMessage = () => {\r\n        setProfileDisplayValue(false)\r\n        setSettingsDisplayValue(false)\r\n        setMessageDisplayValue(true)\r\n    }\r\n\r\n    //THIS MAKES YOUR PROFILE VISIBLE WHEN YOU CLICK ON THE SETTINGS FEATURE\r\n    const clickSettings = () => {\r\n        setProfileDisplayValue(false)\r\n        setMessageDisplayValue(false)\r\n        setSettingsDisplayValue(true)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //FETCH MY PROFILE PHOTO ON PAGE REFRESH\r\n    const [fetchMyProfilePhoto, setFetchMyProfilePhoto] = useState()\r\n    useEffect(() => {\r\n\r\n        if (loggedInNameValue) {  \r\n\r\n            axios.post(\"http://localhost:4000/getMyProfile\", {\r\n\r\n                name: loggedInNameValue\r\n\r\n            }).then((response) => {\r\n\r\n                setFetchMyProfilePhoto(response.data.myProfilePhoto)\r\n\r\n            }).catch((error) => {\r\n\r\n                console.log(error)\r\n            })\r\n\r\n        }\r\n    }, [ ])\r\n\r\n\r\n    \r\n    //THIS USEEFECT WILL RUN WHEN THE USER CHANGE THEIR PROFILE PICTURE\r\n    //WE'RE DOING THIS SO THE USER WON'T HAVE TO ALWAYS REFRESH THE PAGE\r\n    //SO SEE TO SEE THE NEW EFFECT WHEN THEY CHANGE THEIR PROFILE PICTURE.\r\n\r\n    useEffect(() => {\r\n\r\n        if (loggedInNameValue) {  \r\n \r\n            axios.post(\"http://localhost:4000/getMyProfile\", {\r\n\r\n                name: loggedInNameValue\r\n\r\n            }).then((response) => {\r\n\r\n                setFetchMyProfilePhoto(response.data.myProfilePhoto)\r\n        \r\n            }).catch((error) => {\r\n\r\n                console.log(error)\r\n            })\r\n\r\n        }\r\n\r\n    }, [ profilePhotoChangeValue ])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    return(\r\n        <div className=\"chat-profile-container\">\r\n           \r\n\r\n            <div className=\"profile-top\">\r\n\r\n                {/*THIS IS TO DISPLAY YOUR PROFILE PICTURE */}\r\n                { fetchMyProfilePhoto ? <img src={fetchMyProfilePhoto} width=\"110px\" className=\"myPhoto\"/> : \r\n                \r\n                <FaUserAlt className=\"icon\"/> \r\n                \r\n                }\r\n\r\n                <p>\r\n                  {/* localStorageName ? localStorageName : 'username?' */}\r\n                  {loggedInNameValue ? loggedInNameValue : 'username not detected'}\r\n                 \r\n                </p>\r\n                 \r\n\r\n            </div>\r\n        \r\n            <div className=\"prof\">\r\n            <div className=\"profile-list\"><FaRegBell className=\"FaRegBell\"/> Notification { notificationValue.length }</div>\r\n                <div className=\"profile-list\" onClick={clickProfile}><FaUser className=\"FaUser\"/>Profile</div>\r\n                <div className=\"profile-list\" onClick={clickMessage}><FaCommentDots className=\"FaCommentDots\"/> Message</div>\r\n                <div className=\"profile-list\" onClick={clickSettings}><FaRegSun className=\"FaRegSun\"/> Setting</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatProfile;","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\ChatHeaderFolder\\ChatHeader.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\ChatBodyFolder\\ChatBody.js",["251","252","253","254","255","256","257","258","259"],[],"import './ChatBody.css';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa'\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport socket from '../SocketModuleFolder/socket';\r\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\r\nimport axios from 'axios';\r\nimport { AddUserToChatListContext } from '../contextFolder/AddUserToChatListContext';\r\nimport { NotificationContext } from '../contextFolder/NotificationContext';\r\n\r\n\r\n\r\n//const socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\n\r\nfunction ChatBody ( ){\r\n\r\n    //THIS STATE IS FOR THE MESSAGE THAT WILL BE SENT TO THE SERVER  \r\n    //SERVER SO IT CAN BE EMITTED.\r\n    const [text, setText] = useState('')\r\n\r\n\r\n    //THIS STATE IS WHAT WILL BE MAPPED AND PRINTED ON THE USERS UI \r\n    const [mappingTheCurrentChats, setMappingTheCurrentChats] = useState([])  \r\n\r\n\r\n    //THIS IS FOR DISPLAYING WHEN THE OTHER USER IS TYPING...\r\n    const[userIsTyping, setUserIsTyping] = useState('')\r\n\r\n    \r\n\r\n    //DEFINING THE USEREF'S...\r\n\r\n    //THIS IS USED TO CHANGE THE VALUE OF INPUT STRING TO AN EMPTY STRING.\r\n    const inputRef = useRef()\r\n\r\n\r\n    //THIS IS FOR OUR SCROLLABLE CHAT BODY      \r\n    const scrollRef = useRef()\r\n    //   scrollRef.scrollTop = scrollRef.scrollHeight;\r\n    \r\n  \r\n    //THIS IS THE scrollToBottomAlwaysOnNewMessageRef USEREF\r\n    const scrollToBottomAlwaysOnNewMessageRef = useRef(null)\r\n\r\n    //This is for the textbox parent div ref\r\n    const textDivRef = useRef()\r\n\r\n\r\n   \r\n   \r\n    //OUR USECONTEXT FOR THIS FILE . . . . . . . . . . . . . . . . . . . . . . . \r\n    //This holds value of the other person you are chatting with\r\n    const { otherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext)\r\n\r\n    //this hold value of who to add to add to chat list when they send you \r\n    //message and you're  currently not chatting with them\r\n    const { addUserToChatListValue, setAddUserToChatListValue } = useContext(AddUserToChatListContext)\r\n\r\n    //This hold the value for every notification we've. It stores the user that  \r\n    //sent use message and have'nt responded to.\r\n    const { notificationValue, setNotificationValue }  = useContext(NotificationContext)\r\n\r\nconsole.log(notificationValue)\r\n    //LET'S GET LOGGED IN USER NAME SAVED IN OUR SESSION STORAGE\r\n    let loggedInNameValue = JSON.parse(sessionStorage.getItem(\"username\"));\r\n\r\n\r\n    \r\n    //SAVING THE NAME OF OTHER USER IN SESSION STORAGE\r\n    useEffect(() => {\r\n\r\n        if (otherUserNameValue) {  \r\n\r\n        sessionStorage.setItem(\"otherUserName\", JSON.stringify(otherUserNameValue))\r\n\r\n        }\r\n\r\n\r\n    }, [otherUserNameValue])\r\n\r\n    //GETTING THE NAME OF OTHER USER IN SESSION STORAGE ON PAGE REFRESH\r\n    useEffect(() => {\r\n\r\n        let storedOtherUserNameData = JSON.parse(sessionStorage.getItem(\"otherUserName\"))\r\n\r\n        if (storedOtherUserNameData) {\r\n\r\n            setOtherUserNameValue(storedOtherUserNameData)\r\n\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE\r\n\r\n    const [mappingOldChats, setMappingOldChats] = useState([{}]);\r\n\r\n    useEffect(() => {  \r\n        \r\n       //Let's first set the old messages to an empty array.\r\n       setMappingOldChats([{}])\r\n\r\n       axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n\r\n       from: loggedInNameValue,\r\n\r\n       to: otherUserNameValue\r\n\r\n    }).then((response) => {\r\n      \r\n            response.data.forEach((responseData) => {\r\n                \r\n                let dataMessage = responseData.message;\r\n                let dataMessageFrom = responseData.from;\r\n                let dataMessageTo = responseData.to;\r\n\r\n                //let's first set mappingOldChats as an array of empty object\r\n                //then let's set mappingOldChats to the pasts messages.\r\n                setMappingOldChats((prevState) => [...prevState, {dataMessage, dataMessageFrom, dataMessageTo }])\r\n\r\n        \r\n        })\r\n\r\n    \r\n\r\n    }).catch((err) => {\r\n\r\n        console.log(err)\r\n        \r\n    })\r\n    \r\n    }, [otherUserNameValue]);\r\n\r\n\r\n\r\n    //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE WHEN PAGE REFRESH WHILE CHATTING\r\n    useEffect(() => {\r\n\r\n        if (loggedInNameValue && otherUserNameValue) {  \r\n\r\n            axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n    \r\n            from: loggedInNameValue,\r\n    \r\n            to: otherUserNameValue ? otherUserNameValue : ''\r\n    \r\n        }).then((response) => {\r\n    \r\n            response.data.forEach((responseData) => {\r\n            \r\n                let dataMessage = responseData.message;\r\n                let dataMessageFrom = responseData.from;\r\n                let dataMessageTo = responseData.to;\r\n                console.log({dataMessage, dataMessageFrom, dataMessageTo});\r\n\r\n                \r\n                setMappingOldChats((prevState) => [...prevState, {dataMessage, dataMessageFrom, dataMessageTo }])\r\n\r\n        \r\n            })\r\n    \r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err)\r\n                \r\n            })\r\n        \r\n        }\r\n\r\n        }, []);\r\n\r\n\r\n    \r\n    //IF USER IS ON SMALL SCREEN, LET GET THE WINDOW HEIGHT, SO WE CAN HELP \r\n    //DO THE FLOATING TEXT BOX WHEN USER IS TYPING AND KEYBOARD IS VISIBLE...\r\n    const [heightOfWindowWithoutKeyboard, setHeightOfWindowWithoutKeyboard] = useState()\r\n    \r\n    useEffect(() => {\r\n\r\n        const matchResult = window.matchMedia(\"(max-width: 767px)\");\r\n            \r\n        if (matchResult.matches === true) {\r\n\r\n            setHeightOfWindowWithoutKeyboard(window.innerHeight)\r\n        }\r\n        \r\n        \r\n    \r\n    }, [])    \r\n\r\n\r\n\r\n    //HANDLE STATEMENT FUNCTIONS FOR THIS COMPONENT\r\n\r\n    const [heightOfWindowWithKeyboard, setHeightOfWindowWithKeyboard] = useState()//hold value of screen height on small screen\r\n\r\n    //HANDLING WHEN OTHER USER IS TYPING . . .\r\n    //This will be used to dictect when the other user is typing...\r\n    //and then it will send the ('typing') message\r\n    //to the other user connected in the socket server.\r\n    const handleTyping = () => {\r\n\r\n        socket.emit('typing', {\r\n\r\n            typingNotification: 'is typing...', \r\n\r\n            userNameTyping: loggedInNameValue, \r\n\r\n            userNameReceivingTyping: otherUserNameValue\r\n        })\r\n\r\n\r\n\r\n        //Then we want to get the height of the window the user is typing\r\n        //on small screen\r\n        const matchResult = window.matchMedia(\"(max-width: 767px)\");\r\n            \r\n        if (matchResult.matches === true) {\r\n\r\n            setHeightOfWindowWithKeyboard(window.innerHeight)\r\n\r\n            //Then let's minus the height of window when keyboard is present\r\n            //from the height of window when keyboard isn't present so we can\r\n            //give text-box-div\" or textDivRef a margin bottom of that value.\r\n            let newMarginBottomFortextDivRef = heightOfWindowWithoutKeyboard - heightOfWindowWithKeyboard\r\n\r\n            textDivRef.current.style.marginBottom = newMarginBottomFortextDivRef + \"px\";\r\n\r\n        }\r\n\r\n\r\n    }//HANDLE TYPING CLOSING FUNCTION BLOCK\r\n\r\n\r\n    //THIS WILL INVOLKE WHEN OTHER USER IS NOT TYPING OR WHEN THEY\r\n    //GETS OF THE TEXT BOX.\r\n    const handleNotTyping = () => {\r\n\r\n        socket.emit('notTyping', ' ')\r\n\r\n        //Then also, if user is on small screen, let's set the margin \r\n        //bottom of textbox div parent or textDivRef to zero\r\n        const matchResult = window.matchMedia(\"(max-width: 767px)\");\r\n            \r\n        if (matchResult.matches === true) {\r\n\r\n        textDivRef.current.style.marginBottom = \"0px\";\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n    \r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to the clients it's suppode to it send it to.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //using their socket id. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n\r\n        if (loggedInNameValue && otherUserNameValue) { \r\n\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", { message: text, from: loggedInNameValue, to: otherUserNameValue })\r\n\r\n        //This is used to change the value of the input to empty string\r\n        //when the send button is clicked\r\n        inputRef.current.value = \" \";\r\n        setText(' '); \r\n\r\n        } else {\r\n\r\n            alert('Unable to read sender or receiver name.')\r\n\r\n        }  \r\n       \r\n       \r\n    };\r\n\r\n \r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n\r\n        socket.on(\"receive_message\", (data)  => {  \r\n           \r\n        //The (data.message) below holds the message property value received \r\n        //from the server and we give each message a random unique ID so that \r\n        //we can do stuff like deleteing the message using it unique ID etc...\r\n\r\n        const [m, f, t, i] = [data.message, data.from, data.to, uuid()];\r\n\r\n        if (loggedInNameValue && otherUserNameValue) {  \r\n\r\n        setMappingTheCurrentChats((prevState) => [...prevState, { dataMessage: m, id: i, dataMessageFrom: f, dataMessageTo: t } ]);\r\n\r\n         }\r\n\r\n        //This says whenever someone send you a message and the value of the \r\n        //otherUserName variable is not the same as the person sending you the message,\r\n        //don't show us the message while we're chatting with other people. Why \r\n        //the message should not display? This is so so as to prevent message \r\n        //to avoid classhing with other user when we're chatting with them.\r\n        if (f !== otherUserNameValue && t === loggedInNameValue) {\r\n     \r\n            if (otherUserNameValue === null || otherUserNameValue) {\r\n                //This says whether there is value for otherUserNameValue or not, just \r\n                //leave what is inside mappingTheCurrentChats and then add nothing\r\n                setMappingTheCurrentChats((prevState) => [...prevState]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                const foundString  = notificationValue.find(element => element === f);\r\n\r\n                if (foundString) {\r\n                    console.log('found string')\r\n                } else {\r\n                    socket.emit(\"addToNotification\", {userName: t, \r\n    \r\n                        personToAddToNotificationList: f\r\n    \r\n                    });\r\n                } \r\n                 \r\n            }\r\n            \r\n            //when someone is online and they sends you message and the person isn't who you're  \r\n            //chatting with, let's add that person to your chatlist and then add user to our \r\n            //notification list. . . . . . . . . . . . . . . . .  .. . . . . . . . . . . . . .\r\n            //also let's only apply this when you're logged in on a device with larger screen\r\n            //because this same process have been handled for when on small screen in the \r\n            //MobileChatlist Folder. So to avoid double adding to chatlist and notification list,\r\n            //it's better as we handled them when on various screen size using the conditional.\r\n\r\n            setAddUserToChatListValue(f);\r\n\r\n           \r\n\r\n         /*      \r\n            let checkForUser = notificationValue.includes(f);\r\n\r\n\r\n            if (checkForUser === true) {\r\n\r\n\r\n            }\r\n \r\n            else if (checkForUser === false) {\r\n\r\n                console.log(\"this user is not in my notification list\")\r\n\r\n                socket.emit(\"addToNotification\", {userName: t, \r\n\r\n                    personToAddToNotificationList: f\r\n\r\n                });\r\n\r\n            }\r\n            */\r\n           // if  (notificationValue.includes(f) == false) { \r\n                        \r\n            //console.log(\"it doesnt include\", notificationValue.indexOf(f), notificationValue)\r\n                //Set notification count for unread message \r\n              /*          \r\n                socket.emit(\"addToNotification\", {userName: t, \r\n\r\n                    personToAddToNotificationList: f\r\n\r\n                });\r\n              */          \r\n\r\n            //}\r\n\r\n           \r\n         }    \r\n            \r\n \r\n       \r\n\r\n\r\n\r\n      \r\n        });  \r\n\r\n    }, [socket, loggedInNameValue, otherUserNameValue])\r\n\r\n \r\n\r\n    //This useEffect handles when the other user is typing.\r\n    //it receive the information from the server so\r\n    //we can display it on the front end.\r\n\r\n    useEffect(() =>{\r\n\r\n        socket.on(\"isTyping\", (data) => {\r\n          \r\n            setUserIsTyping(data.typingNotification) \r\n    \r\n        })\r\n        \r\n\r\n    }, [socket])\r\n\r\n\r\n\r\n    //THIS USEEFFECT HANDLES WHEN THE OTHER USER IS NOT TYPING,\r\n    //WE'D GET AN EMPTY STRING\r\n     useEffect(() => {\r\n\r\n        socket.on(\"isNotTyping\", (data) => {\r\n\r\n            setUserIsTyping(data)\r\n\r\n        })\r\n\r\n     }, [socket])\r\n\r\n\r\n\r\n     //THIS RECEIVES MY NOTIFICATION WHEN IT'S BEEN TRIGGER IN SERVER\r\n     useEffect(() => {\r\n        \r\n        //Listenning for new notification and then adding it to our notification\r\n        //array. But first check if the person to add to notification is not the\r\n        //same as the current person we're chatting with which is the value \r\n        //otherUserNameValue variable holds\r\n       \r\n        socket.on(\"myNotification\", (data) => {\r\n\r\n        \r\n            //importantly, let's check if the person to add to notification list\r\n            //doesn't already exist in the notification array before adding.\r\n            //why we do this is so that it won't cause having duplicates of a user\r\n            //in the array which will directly affect the length of the notification count.\r\n        \r\n            if (data.personToAddToNotificationList !== otherUserNameValue) {\r\n\r\n                let checkForUser = notificationValue.includes(data.personToAddToNotificationList);\r\n\r\n                if (checkForUser === false) {\r\n    \r\n                setNotificationValue((prevState) => [...prevState, data.personToAddToNotificationList]);     \r\n                console.log('new not list is' + notificationValue)\r\n\r\n                }\r\n\r\n            }\r\n\r\n           return () => socket.off(\"myNotification\")\r\n\r\n        });\r\n\r\n\r\n     }, [ socket ]);\r\n\r\n\r\n\r\n     //SCROLL EFFECT: THIS MAKES SURE CHAT PAGE ALWAYS STAY DOWN WHEN NEW MESSAGE \r\n     //ENTERS. . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n     useEffect(() => {\r\n\r\n        //This will make sure the bottom image is always shown when new message enters.\r\n        scrollToBottomAlwaysOnNewMessageRef.current?.scrollIntoView(false)\r\n        \r\n    }, [mappingTheCurrentChats])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n\r\n        <div className=\"chat-body-container\">\r\n          \r\n            <div className=\"chatNav\">\r\n           \r\n             <b > \r\n\r\n             { otherUserNameValue ? <strong className=\"image-behind-otherUserNameValue\"> {otherUserNameValue.charAt(0)} </strong> \r\n             \r\n             : '' \r\n             \r\n             } \r\n             \r\n             </b>\r\n                     \r\n                <b> {otherUserNameValue ? otherUserNameValue : \"\"}: <i id=\"userIsTyping\">{userIsTyping}</i> </b>\r\n\r\n            </div> {/*CHATNAV DIV ENDS*/}\r\n\r\n\r\n    \r\n\r\n            <div className=\"scroll\" ref={scrollRef} >\r\n\r\n\r\n             {/*THIS IS FOR MAPPING OLD/HISTORY CHATS BETWEEN USERS CHATTING*/}    \r\n\r\n              { mappingOldChats ?\r\n           \r\n                mappingOldChats.map((mappingOldChat, id) => \r\n                    //checking messages that are for the sender so it can have different styling\r\n                    mappingOldChat.dataMessageFrom === loggedInNameValue ? (  \r\n\r\n                            <div key={id} className=\"fromOldListMessageData\">\r\n\r\n                               {mappingOldChat.dataMessage}\r\n\r\n                            </div>\r\n                                         \r\n\r\n                    ) : (\r\n                    //checking messages that are for the receiver so it can have different styling\r\n                            <div key={id} className=\"toOldListMessageData\">\r\n\r\n                               {mappingOldChat.dataMessage}\r\n\r\n                            </div> \r\n\r\n                        )\r\n  \r\n                     \r\n                    )  : \"\"\r\n\r\n                    \r\n                } {/*MAPPING OLD CHATS CURLY CONTAINER ENDING*/}\r\n                    \r\n\r\n\r\n\r\n\r\n\r\n                {/*THIS IS FOR MAPPING CUREENT CHATS BETWEEN USERS CHATTING*/}\r\n\r\n                {mappingTheCurrentChats.map((mappingTheCurrentChat, id) => \r\n                    //checking messages that are for the sender so it can have different styling\r\n                    mappingTheCurrentChat.dataMessageFrom === loggedInNameValue ? (  \r\n\r\n                            <div key={id} className=\"fromListMessageData\">\r\n\r\n                               {mappingTheCurrentChat.dataMessage}\r\n\r\n                            </div>\r\n                                         \r\n\r\n                    ) : (\r\n                    //checking messages that are for the receiver so it can have different styling\r\n                            <div key={id} className=\"toListMessageData\">\r\n\r\n                               {mappingTheCurrentChat.dataMessage}\r\n\r\n                            </div>\r\n\r\n                    )\r\n\r\n                    )        \r\n        \r\n                } {/*MAPPING THE CURRENT CHAT CURLY CONTAINER ENDS*/}\r\n\r\n\r\n              {/*THIS IS DIV THAT MAKE SURE LAST MESSAGE IS ALWAYS SHOWING WHEN NEW MESSAGE ENTERS*/}    \r\n              <div ref={scrollToBottomAlwaysOnNewMessageRef} />\r\n        \r\n               \r\n            </div> {/*SCROLLABLE CHAT CONTAINER CLOSING DIV*/}\r\n\r\n\r\n\r\n            {/*PARENT DIV FOR THE MESSAGE BOX AND SEND MESSAGE BUTTON*/}\r\n            <div className=\"text-box-div\" ref={textDivRef} >\r\n\r\n                <textarea\r\n\r\n                placeholder= {'reply to ' + otherUserNameValue + '...'}\r\n                \r\n                onChange={(e) => setText(e.target.value)} //This is to store what user write inside the text variable\r\n\r\n                className=\"text\"\r\n\r\n                ref={inputRef}\r\n\r\n                onMouseEnter={handleTyping}\r\n\r\n                onMouseLeave={handleNotTyping}\r\n         \r\n                />\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                {/* <button onClick={sendMessage} className=\"txt-btn\">send message</button> */} \r\n                <div>\r\n                     <FaTelegramPlane onClick={sendMessage} className=\"txt-btn\"/>\r\n                </div> \r\n\r\n                \r\n            </div>{/*MESSAGE BOX AND SEND BUTTON PARENT DIV CLOSING DIV*/}\r\n             \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ChatBody;","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\AccessFolder\\Signup.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\LoggedInNameContext.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\OtherUserNameContext.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\UserProfileFolder\\UserProfile.js",["260","261","262","263"],[],"import { useContext, useEffect, useState } from 'react';\r\nimport './UserProfile.css'\r\nimport { FaUserAlt } from \"react-icons/fa\";\r\nimport axios from 'axios';\r\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\r\n\r\nfunction UserProfile () {\r\n\r\n    //Let check the status of this user, if you're online or not\r\n    let loggedInNameValue = JSON.parse(sessionStorage.getItem(\"username\"));\r\n\r\n    const [name, setName] = useState() \r\n    const [email, setEmail] = useState()\r\n    const [profilePicture, setProfilePicture] = useState()\r\n    const [status, setStatus] = useState()\r\n\r\n    useEffect(() => {\r\n        axios.post(\"http://localhost:4000/getUserProfile\", {\r\n            \r\n        name: loggedInNameValue\r\n    \r\n    }).then((response) => {\r\n\r\n            console.log(response.data)\r\n            setName(response.data.name)\r\n            setEmail(response.data.email)\r\n            setProfilePicture(response.data.profile_picture)\r\n\r\n        }).catch((err) => {\r\n            \r\n            console.log(err)\r\n        })\r\n\r\n    }, [])\r\n\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n\r\n        if (loggedInNameValue) {\r\n\r\n            setStatus(\"online\")\r\n        }\r\n    \r\n    }, [loggedInNameValue])\r\n    \r\n\r\n\r\n\r\n    return(\r\n        <div  className=\"user-profile-container\"> \r\n         \r\n        <div className=\"userProfile-body\">\r\n\r\n            <div className=\"top-flex\">\r\n                <div className=\"profile-photo\">\r\n                     {\r\n                     \r\n                      profilePicture ? <img src={profilePicture} id=\"profile-img\"/> :\r\n                     \r\n                      <FaUserAlt className=\"photo\"/>\r\n\r\n                     }\r\n                     \r\n                </div>\r\n            \r\n                <div className=\"name\">{name}</div>\r\n            </div>\r\n\r\n\r\n            <div className=\"grid\">\r\n\r\n                <div>\r\n                    <label className=\"label\">Name</label>\r\n                    <p className='p'>{name}</p>\r\n                </div>\r\n               \r\n                <div>\r\n                    <label className=\"label\">Email</label>\r\n                    <p className='p'>{email}</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <label className=\"label\">Phone number</label>\r\n                    <p className='p'>none</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <label className=\"label\">Status</label>\r\n                    <p className='p'>{status}</p>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"btn-div\">\r\n                    <button className=\"btn\"> save changes </button> \r\n            </div>\r\n            \r\n        </div>\r\n\r\n    </div>   \r\n    )\r\n}\r\n\r\nexport default UserProfile;","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\ProfileDisplayContext.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\MessageDisplayContext.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\SettingsFolder\\Settings.js",["264"],[],"import './Settings.css'\r\nimport ProfilePhotoSetting from \"./ProfilePhotoSettingFolder/ProfilePhotoSetting\";\r\nimport PasswordSettings from './PasswordSettingFolder/PasswordSetting';\r\n\r\nimport { useContext, useEffect } from 'react';\r\nimport { AddUserToChatListContext } from '../contextFolder/AddUserToChatListContext';\r\n\r\nfunction Settings ( ) {\r\n    const {addUserToChatListValue, setAddUserToChatListValue} = useContext(AddUserToChatListContext); \r\n    useEffect(() => {\r\n        console.log('settings own' + addUserToChatListValue)\r\n    }, [addUserToChatListValue])\r\n\r\n    return(\r\n        <div id=\"settings-body-div\">\r\n        <div className=\"settings-container\">\r\n            <ProfilePhotoSetting />\r\n\r\n            <PasswordSettings />\r\n        </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\SettingsDisplayContext.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\SettingsFolder\\ProfilePhotoSettingFolder\\ProfilePhotoSetting.js",["265","266","267","268"],[],"import { useContext, useEffect, useState } from 'react';\r\nimport './ProfilePhotoSetting.css'\r\nimport { FaUser } from 'react-icons/fa';\r\nimport axios from 'axios';\r\nimport { LoggedInNameContext } from '../../contextFolder/LoggedInNameContext';\r\nimport { ProfilePhotoChangeContext } from '../../contextFolder/ProfilePhotoChangeContext';\r\nimport imageCompression from 'browser-image-compression';\r\n\r\nfunction ProfilePhotoSetting () {\r\n\r\n      //Let's get the name of the user that logged in (which is you)\r\n      //from the session storage . .  . . . . . . . . . . . . . . .\r\n      let loggedInNameValue = JSON.parse(sessionStorage.getItem(\"username\"));\r\n\r\n      const { profilePhotoChangeValue, setProfilePhotoChangeValue } = useContext(ProfilePhotoChangeContext)\r\n\r\n      //This handles the upload of profile picture\r\n      const [postImage, setPostImage] = useState( {myFile : \"\"} )\r\n\r\n      //getting response from the server on post request on profile picture\r\n      const [serverPostResponse, setServerPostResponse] = useState()\r\n\r\n      //making the value in serverPostResponse disappear after some seconds of display\r\n      useEffect(() => {\r\n\r\n         setProfilePhotoChangeValue(serverPostResponse);\r\n\r\n         setTimeout(() => {\r\n\r\n            setServerPostResponse(' ');\r\n\r\n         }, 7000);\r\n\r\n      }, [serverPostResponse]);\r\n\r\n\r\n      const createPost = async (newImage) => {\r\n        try {\r\n\r\n            await axios.post(\"http://localhost:4000/uploadProfilePhoto\", newImage).then((response) => {\r\n\r\n                setServerPostResponse(response.data.result);\r\n\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n      }\r\n\r\n      const handleSendImage = async () => {\r\n        createPost(postImage)\r\n        console.log(postImage)\r\n        console.log(\"uploaded\")\r\n      }\r\n\r\n      const handleFileUpload = async (e) => {\r\n\r\n        const file = e.target.files[0]\r\n\r\n        //let's compress the image using the library we installed\r\n        const options = {\r\n            maxSiszeMb: 0.5,\r\n            maxWidthOrHeight: 1920\r\n        }\r\n\r\n        try{\r\n\r\n            const compressedFile = await imageCompression(file, options)\r\n\r\n            const base64 = await convertToBase64(compressedFile /*file*/)\r\n        \r\n            setPostImage({...postImage, myFile : base64, name: loggedInNameValue })\r\n\r\n        } catch (err) {\r\n\r\n            console.log(err)\r\n\r\n        }\r\n\r\n       \r\n     \r\n      }\r\n\r\n      function convertToBase64(file){\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const fileReader = new FileReader();\r\n\r\n            fileReader.readAsDataURL(file)\r\n\r\n            fileReader.onload = () => {\r\n\r\n                resolve(fileReader.result)\r\n\r\n            };\r\n\r\n            fileReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n      }\r\n\r\n\r\n\r\n      //This handles the change password\r\n      \r\n  \r\n    return(\r\n\r\n            <div className=\"profile-photo-setting-body\">\r\n\r\n                <h1>Settings...</h1>\r\n\r\n                <div className=\"setDiv\">\r\n\r\n                    <div className=\"photo-change\">\r\n\r\n                        <p>profile photo: </p>\r\n\r\n                            <p>{serverPostResponse}</p>\r\n\r\n                        <div className=\"pic-display\">\r\n  \r\n                        { postImage.myFile ? <img src={postImage.myFile} width=\"200px\" id=\"img\"/> : <FaUser id=\"FaUser\"/> }\r\n\r\n                        </div>\r\n\r\n                        <div className=\"imageSelect-and-sendBtn-div\">\r\n                            <input type=\"file\" name=\"myFile\" className=\"imageSelect\" onChange={ handleFileUpload } accept=\"jpeg, .png, .jpg\"/> \r\n                            <button onClick={handleSendImage} className=\"photoBtn\">save picture</button>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default ProfilePhotoSetting;","C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\ProfilePhotoChangeContext.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\SettingsFolder\\PasswordSettingFolder\\PasswordSetting.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\utilis\\PrivateRoutes.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\MobileViewFolder\\MobileChatList.js",["269","270","271","272","273","274","275","276","277","278","279"],[],"import { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { FaAdn, FaCheck, FaExclamationCircle, FaRegBell, FaSistrix } from \"react-icons/fa\";\r\nimport './MobileChatList.css';\r\nimport axios from 'axios';\r\nimport { OtherUserNameContext } from \"../contextFolder/OtherUserNameContext\";\r\nimport { MessageDisplayContext } from \"../contextFolder/MessageDisplayContext\";\r\nimport { ProfileDisplayContext } from \"../contextFolder/ProfileDisplayContext\";\r\nimport { SettingsDisplayContext } from \"../contextFolder/SettingsDisplayContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport socket from '../SocketModuleFolder/socket';\r\n\r\n\r\n function MobileChatList ( ) {\r\n\r\n    //Let's get the name of the user that logged in (which is you)\r\n    //from the session storage . .  . . . . . . . . . . . . . . .\r\n    let loggedInNameValue = JSON.parse(sessionStorage.getItem(\"username\"));\r\n\r\n\r\n    //---------- [ CONTEXT API FOR THIS FILE... ] ----------//\r\n    const { otherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext) \r\n\r\n    //Displays message component when you click on list of conversed with user\r\n    const { messageDisplayValue, setMessageDisplayValue } = useContext(MessageDisplayContext)\r\n    const { profileDisplayValue, setProfileDisplayValue } = useContext(ProfileDisplayContext)\r\n    const { settingsDisplayValue, setSettingsDisplayValue } = useContext(SettingsDisplayContext)\r\n\r\n    //This hold the value for every notification we've. It stores the user that  \r\n    //sent use message and have'nt responded to.\r\n    const [ notificationValue, setNotificationValue ]  = useState()\r\n    \r\n\r\n   //THIS SET THE VALUE OF OUR OTHERNAMEVALUE TO EMPTY ON LOAD OF THIS PAGE\r\n   window.onload = () => {  \r\n\r\n    setOtherUserNameValue(sessionStorage.setItem(\"otherUserName\", JSON.stringify(\" \")));\r\n\r\n    console.log('onload of mobile chat' + otherUserNameValue);\r\n\r\n   }\r\n\r\n\r\n   //THIS LISTENS FOR RECEIVING MESSAGES FROM SOCKET SERVER\r\n    socket.on(\"receive_message\", (data)  => {  \r\n\r\n        console.log('works' + JSON.stringify(data));\r\n\r\n        const [f, t] = [data.from, data.to];\r\n        \r\n        if (f !== otherUserNameValue && t === loggedInNameValue) {\r\n    \r\n                //if conversedWithList doesn't include this particular user, add the user\r\n                //to my chatlist.\r\n    \r\n                if (!conversedWithLists.includes(f)) {\r\n    \r\n                    //saving this user to our chatlist and notfication database\r\n                    //but first checking if on small screen befor initialization \r\n                      console.log('doesnt include this user in chatlist')  \r\n                    saveToChatList(f)\r\n\r\n                }\r\n\r\n                /* \r\n                let confirmIfUserIsInNotificationList = notificationValue.filter(i => i === f);\r\n\r\n                if  (!confirmIfUserIsInNotificationList ) { \r\n\r\n                    console.log(\"this user is not in my notification list\")*/\r\n                //Set notification count for unread message \r\n               /*        \r\n                    socket.emit(\"addToNotification\", {userName: t, \r\n\r\n                            personToAddToNotificationList: f\r\n\r\n                    }); \r\n    \r\n                }\r\n    */\r\n        \r\n        }\r\n\r\n\r\n    });\r\n\r\n\r\n\r\n    \r\n    //Let's listen for notification reponse. . . . . . . . . . . . . . . . . \r\n    socket.on(\"myNotification\", (data) => {\r\n \r\n        if (data.personToAddToNotificationList !== otherUserNameValue) {\r\n           \r\n            //This will add user to notification if the personToAddToNotification\r\n            //isn't the same as the person we're currently chatting with.\r\n\r\n            setNotificationValue((prevState) => [...prevState, data.personToAddToNotificationList]);\r\n            \r\n        }\r\n\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n    //-------- [ OUR USEREF FOR THIS COMPONENT... ] --------//\r\n\r\n    //THIS IS FOR OUR SCROLLABLE CHAT list      \r\n    const scrollableChatListRef = useRef();\r\n\r\n    //THIS IS FOR THE FILTERING OF SEARCH DIV\r\n    const filterParentContainerRef = useRef();\r\n\r\n    //THIS IS FOR THE CONVERSED WITH DIV\r\n    const conversedWithParentContainerRef = useRef();\r\n\r\n    //THIS IF HANDLING HIDING UNREAD MESSAGE ICON\r\n    const unReadRef = useRef();\r\n\r\n\r\n    //THIS HIDES THE FILTER PARENT CONTAINER DIV ONCE A USER THAT \r\n    //DISPLAY ON SEARCH LIST IS CLICKED ON . . . . . . \r\n    const hideFilterParentContainerRef = () => {\r\n\r\n        filterParentContainerRef.current.style.display = \"none\"\r\n\r\n        conversedWithParentContainerRef.style.display = \"true\"\r\n\r\n    }\r\n\r\n    //THIS SHOWS FILTERED PARENT CONTAINER WHEN YOU START SEARCHING\r\n    //FOR USER IN THE SEARCH BOX. . . . . . . . . . . . \r\n    const showFilterParentContainerRef = () => {\r\n\r\n        filterParentContainerRef.current.style.display = \"block\"\r\n\r\n   //     conversedWithParentContainerRef.style.display = \"none\"\r\n\r\n    }\r\n\r\n\r\n    //THIS REMOVES USER FROM YOUR NOTIFICATION LIST WHEN THEY ARE CLICKED\r\n    //ON . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n    const handleRemovingThisUserFromNotificationList = (thisUser) => {\r\n\r\n        setNotificationValue([])//first let's empty the notification array.\r\n\r\n        //Let's then send the name of the person we want to remove to\r\n        //our DB then return the remaining people in our saved notification\r\n        //list in the database then put that value in the notification array. \r\n\r\n        \r\n        axios.post(\"http://localhost:4000/removeThisUserNotification\", {\r\n\r\n            loggedInUser: loggedInNameValue,\r\n\r\n            personToRemove: thisUser\r\n\r\n        }).then((result) => {\r\n\r\n            if (result) {\r\n\r\n                result.data.forEach((resData) => {\r\n\r\n                    let addThis = resData.personToAddToNotificationList\r\n\r\n                    //when we get the result of people in our notification list,\r\n                    //let's add them to our notification array and also (don't\r\n                    //add people that already exist in the array to prevent name\r\n                    //appearing twice which will affect the length of the array.\r\n                    //mind you, the length of the array will we used to count how\r\n                    //many notification we have . . . . . . . . . . . . . . . .)\r\n                    if ( !notificationValue.includes(addThis) ) { \r\n\r\n                    setNotificationValue((prevState) => [...prevState, addThis])\r\n\r\n                    }\r\n\r\n                });\r\n \r\n               \r\n            }\r\n            \r\n            \r\n        }).catch((err) => {\r\n\r\n            console.log(err)\r\n\r\n        });    \r\n\r\n        \r\n        //This hides the notification alert symbol icon that shows close to user\r\n        \r\n        unReadRef.current.style.display = \"none\";\r\n        \r\n\r\n    }\r\n\r\n\r\n   \r\n    \r\n\r\n    //If on large screen, this makes sure the message component is what is \r\n    //visible (not the profile or setting component) .  . . . . . . . \r\n    const clickMessage = () => {\r\n        setProfileDisplayValue(false)\r\n        setSettingsDisplayValue(false)\r\n        setMessageDisplayValue(true)\r\n    }\r\n    \r\n    \r\n\r\n    /* - - - - - [ALL USESTATE FOR THIS PARTICULAR COMPONENT] - - - - - */\r\n\r\n    //This is for navigating to chat message room (when on small screen)\r\n    const navigate = useNavigate();\r\n\r\n    //This will help us storing the list of user that we've conversed with\r\n    const [conversedWithLists, setConversedWithLists] = useState([])\r\n\r\n    //This setFilteredData will store the filtered element based on the user\r\n    //search input and then store it in the filteredData variable so we can\r\n    //map it\r\n    const [filteredData, setFilteredData] = useState([])\r\n\r\n    //This is used for capturing what the user types into the search box\r\n    const [searchWord, setSearchWord] = useState();\r\n   \r\n\r\n\r\n    /* - - - - - [ALL OUR FUNCTIONS FOR THIS PARTICULAR COMPONENT] - - - - -*/\r\n\r\n    //This is to store what the user type in the search box so we can\r\n    //use for filtering and also filter the name of user in realtime \r\n    //based on serach input\r\n    const onChangeFunction = ( event ) => {\r\n\r\n        //This will grab the value in the user type in the input box and store it in the searchFilter state\r\n        //please note: the toLowerCase() will convert the value to lowercase so that it can match with the\r\n        //lowercase name properties in the database. (we'd convert all name properties in DB to lowercase too)\r\n        setSearchWord(event.target.value.toLowerCase())\r\n        \r\n        //This will filter out users that matches the character inputted by the user in realtime\r\n        //and then store it in the newFilter variable. please note: the toLowerCase() will convert the value of the\r\n        // DB name property to lowercase so that it can match with the value from the search input which we already \r\n        //convertted to lowercase using the toLowercase() method.\r\n    \r\n        //Here we're returning users that their names matches with the value the user is inputting as they\r\n        //are typing it out on the go...\r\n        \r\n        if (searchWord) {\r\n       \r\n            axios.post(\"http://localhost:4000/searchAllUsers\",{\r\n    \r\n                searchInput: searchWord.toLowerCase()\r\n                \r\n    \r\n            }).then((response) => {\r\n    \r\n                console.log(response.data)\r\n    \r\n                response.data.forEach((resData) => {\r\n    \r\n                    let name = resData;\r\n    \r\n                    //Here let check if filteredData already have this user stored in it already \r\n                    //to avoid duplicate display of names that already exist in this array.\r\n                    let checkIfThisUserExistUsingItName = filteredData.some((object) => object === name);\r\n    \r\n                   \r\n\r\n                    if (!checkIfThisUserExistUsingItName) {\r\n                        \r\n                        setFilteredData([{name: name}])\r\n                    }\r\n    \r\n                \r\n                })\r\n    \r\n        \r\n            } ).catch ( (error) => {\r\n            \r\n                console.log(\"oops! Couldn't reach the server\" + error)\r\n            \r\n            } )\r\n    \r\n        } \r\n\r\n\r\n\r\n        if (!searchWord || searchWord === \" \") {\r\n\r\n            hideFilterParentContainerRef()\r\n        }\r\n\r\n        //This shows the filters parent container whenonChange of the input search box\r\n        showFilterParentContainerRef();\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    let [show, setShow] = useState('block')\r\n    !filteredData ? show = 'none' : show = 'block'\r\n\r\n   \r\n    //This function is used for getting the user with the name that matches what the user is typed in\r\n    //the search box once they clicked the search button close to the search input box\r\n    const searchUser = () => {\r\n   \r\n        if (searchWord) {\r\n       \r\n            axios.post(\"http://localhost:4000/getAllUsers\",{\r\n    \r\n                searchInput: searchWord.toLowerCase()\r\n                \r\n    \r\n            }).then((response) => {\r\n    \r\n                console.log(response.data)\r\n\r\n                response.data.forEach((resData) => {\r\n\r\n                    let name = resData;\r\n            \r\n                    //Here let check if filteredData already have this user stored in it already \r\n                    //to avoid duplicate display of names that already exist in this array.\r\n                    let checkIfThisUserExistUsingItName = filteredData.some((object) => object === name);\r\n    \r\n                    \r\n                    if (!checkIfThisUserExistUsingItName) {\r\n                       \r\n                        setFilteredData([{name: name}])\r\n     \r\n                     }\r\n     \r\n                  \r\n                 })\r\n     \r\n           \r\n             } ).catch ( (error) => {\r\n             \r\n                 console.log(\"oops! Couldn't reach the server\" + error)\r\n             \r\n             } )\r\n\r\n\r\n        }\r\n\r\n            //This shows the filters parent container SEARCH button is clicked\r\n            showFilterParentContainerRef()\r\n    \r\n\r\n    }\r\n\r\n\r\n    //OPEN MESSAGE CHAT \r\n    const openMessageChat = () => {\r\n\r\n        navigate('/chatbody')\r\n    }\r\n\r\n    //OPEN SETTINGS FEATURE\r\n    const goToSettings = () => {\r\n        navigate('/settings')\r\n    }\r\n\r\n    //GO TO MY PROFILE\r\n    const goToProfile = () => {\r\n        navigate('/userprofile')\r\n    }\r\n\r\n     \r\n    //THIS FUNCTION SAVE A PERSON TO YOUR CHATLIST IN OUR DATABASE WHEN\r\n    //THEY ARE BEING CLICK ON AND THEN ADD THE PERSON TO OUR CONVERSED \r\n    //WITH ARRAY IN OUR FRONTEND AFTER DB SAVE IS SUCCESSFUL. . . . . .\r\n    function saveToChatList (nameToSaveToChatList) {\r\n\r\n        if (loggedInNameValue && nameToSaveToChatList) {\r\n\r\n            axios.post(\"http://localhost:4000/saveToChatList\", {\r\n\r\n                loggedInUser:  loggedInNameValue,\r\n\r\n                personToSaveToChatList: nameToSaveToChatList\r\n\r\n            }).then((response) => {\r\n\r\n                 //let's add the person our conversed with array\r\n                setConversedWithLists((prevState) => [...prevState, response.data.result])\r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err)\r\n\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n     //THIS USEEFFECT IS USED TO FETCH ALL SAVED CONVERSED WITH LIST ON EVERY PAGE RENDER\r\n     useEffect(() => {\r\n    \r\n        if (loggedInNameValue) { \r\n\r\n            axios.post(\"http://localhost:4000/getMyChatList\", {\r\n\r\n                loggedInUser: loggedInNameValue\r\n\r\n            }).then((response) => {\r\n\r\n            //filtering all the people in my chatlist and then putting it in my conversed with list\r\n            const c = response.data.filter((item) => {\r\n\r\n                return setConversedWithLists((prevState) => [...prevState, item.personToSaveToChatList]);\r\n                \r\n            })\r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }\r\n\r\n    \r\n    }, [])\r\n\r\n\r\n\r\n\r\n    //THIS EFFECT WILL BE USED TO GET ALL YOUR AVAILABLE NOTIFICATION ON PAGE\r\n    //RELOAD\r\n    useEffect(() => {\r\n\r\n        //first let's empty the notification value\r\n        setNotificationValue([])\r\n\r\n        axios.post(\"http://localhost:4000/getMyNotifications\", {\r\n\r\n            username: loggedInNameValue\r\n\r\n        }).then((response) => {\r\n\r\n            response.data.forEach((resData) => {\r\n\r\n                let addThis = resData.personToAddToNotificationList\r\n\r\n                    setNotificationValue((prevState) => [...prevState, addThis])\r\n\r\n            });\r\n            \r\n        }).catch((err) => {\r\n\r\n            console.log(err)\r\n\r\n        });\r\n\r\n\r\n\r\n    }, [])\r\n    \r\n\r\n\r\n    //LET REMOVE THE ICON CLOSE A USER WE'RE CURRENTLY CHHATING WITH IF\r\n    //THEY ARE IN THE NOTIFICATION LIST...\r\n    if (notificationValue.includes(otherUserNameValue)) {\r\n\r\n        setNotificationValue(notificationValue.filter((i) => i !== otherUserNameValue)) \r\n\r\n    }\r\n   \r\n   \r\n\r\n \r\n    return(\r\n        <div className=\"mobile-chat-list-container\" >\r\n\r\n           <div className=\"mobile-view-top-header-parent-div\">\r\n\r\n            <div className=\"mobile-view-top-flex\">\r\n\r\n                <h2 className=\"h2\">Messages</h2>\r\n\r\n                <div>\r\n                    <FaRegBell className=\"mobile-view-FaRegBell\"/> <b id=\"count\">{notificationValue.length}</b>\r\n                </div >\r\n\r\n            </div>\r\n            \r\n            {/*This is for the search user's input box*/}\r\n\r\n            <div className=\"mobile-view-search-input-div\">\r\n\r\n                <input type=\"text\" className=\"mobile-view-search-input\" onChange={onChangeFunction}></input>\r\n            \r\n                <FaSistrix className=\"mobile-view-search-input-icon\" onClick={searchUser}/>    \r\n               \r\n            </div>\r\n\r\n\r\n            <ul className=\"ul-list\">\r\n                <li onClick={goToProfile}>profile</li>\r\n                <li onClick={goToSettings}>settings</li>\r\n                <li>{ loggedInNameValue ? <FaAdn id=\"ul-active-icon\"/> : 'offline' }</li>\r\n            </ul>\r\n\r\n\r\n\r\n            </div>{/*TOP HEADER DIV END*/}\r\n\r\n        \r\n\r\n            <div className=\"mobile-view-scrollable-chat-list\">{/*SCOLLABLE DIV*/}\r\n\r\n            {/*This is for when user is searching for name. It filters the names available based on\r\n               the user query or search */}\r\n            <div className=\"mobile-view-filterAndConversewithParentDiv\">\r\n\r\n\r\n             <div className=\"mobile-view-filterParentContainer\" ref={filterParentContainerRef} >\r\n\r\n                {\r\n                    filteredData.map((filter, id) => ( \r\n\r\n                    <div key={id} className=\"mobile-view-filtered-user\" style={{display: show}} onClick={( ) => {\r\n\r\n                        if (conversedWithLists.includes(filter.name)) {\r\n\r\n                  \r\n                        } else if ( !conversedWithLists.includes(filter.name) ){\r\n\r\n                        //if user's name is not in our list of converesed with, it should\r\n                        //add it to it.\r\n                              saveToChatList(filter.name);\r\n                        }\r\n\r\n                        hideFilterParentContainerRef();\r\n                        \r\n                        }}>\r\n                      \r\n                        \r\n                      <p className=\"mobile-view-filteredFlex\" >\r\n\r\n                            <p>\r\n                            { /*THIS CHECKS IF FILTERED USER HAS PROFILE PICTURE SO IT CAN BE DISPLAYED\r\n                                CLOSE TO THE NAME AND IF NO, IT SHOULD DISPLAY THE FIRST LETTER THAT \r\n                                BEGINS IT NAME AS THE PICTURE CLOSE TO THE NAME */\r\n\r\n                            filter.name ?  <b className=\"mobile-view-image-behind-filter-name\">{ \r\n                                \r\n                                String(filter.name).charAt(0) \r\n                            \r\n                            }</b>  : \"\"\r\n\r\n                        \r\n                            }\r\n                            </p>         \r\n\r\n                            <p className=\"mobile-view-filterName\">\r\n                                {filter.name}\r\n                            </p>\r\n\r\n\r\n                        </p>\r\n\r\n                    </div>\r\n                    \r\n                    ))\r\n              \r\n                 }\r\n           \r\n             </div>{/*filterParentContainer CLOSING DIV*/}\r\n\r\n\r\n            { filteredData.length > 0 ? <p id=\"convo-p\">CONVERSED WITH...</p> : \"\" }\r\n            \r\n            {/*THIS MAPS WHO YOU HAVE CONVERSED WITH. IT SHOWS ALL THE LIST*/}\r\n            <div className=\"mobile-view-conversedWithParentContainer\">\r\n               { \r\n                conversedWithLists.map((conversedWithList, id) => ( \r\n\r\n                <div key={id}  className=\"mobile-view-conversed-user\" onClick={ ( ) => {\r\n\r\n                   {/*onClick of a user in the chatlist will pass the name of the user to \r\n                    the chatbody using the contextapi crafted for OtherUserNameValue*/} \r\n                  \r\n                    setOtherUserNameValue(conversedWithList);\r\n\r\n                    openMessageChat();\r\n\r\n                    //Removing from notification list & hiding unread message icon behind it if any.\r\n                    handleRemovingThisUserFromNotificationList(conversedWithList)\r\n\r\n                   \r\n                }}>\r\n                    \r\n                   <p> \r\n                    { \r\n                    \r\n                    conversedWithList ? <b className=\"mobile-view-image-behind-conversed-name\">{ \r\n\r\n                        String(conversedWithList).charAt(0) \r\n\r\n                    }</b> : \"\"\r\n\r\n                    }  \r\n\r\n                        { conversedWithList }\r\n                        \r\n                    </p>\r\n\r\n\r\n                    <p>\r\n                    {\r\n                    \r\n                    //Gives an alert like signal icon to indicate unread message\r\n                \r\n                     notificationValue.includes(conversedWithList) ? \r\n                     \r\n                     <b ref={unReadRef}><FaExclamationCircle className=\"mobile-view-unreadMessageIcon\"/></b> : \"\"\r\n\r\n                    }\r\n                    </p>\r\n\r\n                   \r\n                </div>\r\n                \r\n                ))\r\n            }  \r\n\r\n        </div>{/*ConversedwithParentContainer CLOSING DIV*/}\r\n\r\n\r\n\r\n        </div>{/*filterAndConversewithParentDiv CLOSING DIV*/}\r\n\r\n\r\n        </div>{/*SCROLLABLE DIV CLOSING DIV*/}    \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default MobileChatList;",[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\AddUserToChatListContext.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\contextFolder\\NotificationContext.js",[],[],"C:\\Users\\HP\\Desktop\\coding-files\\projects\\web-chat-app\\client\\src\\asset\\SocketModuleFolder\\socket.js",[],[],{"ruleId":"280","severity":1,"message":"281","line":5,"column":17,"nodeType":"282","endLine":5,"endColumn":29},{"ruleId":"280","severity":1,"message":"281","line":6,"column":17,"nodeType":"282","endLine":6,"endColumn":29},{"ruleId":"280","severity":1,"message":"281","line":7,"column":17,"nodeType":"282","endLine":7,"endColumn":29},{"ruleId":"283","severity":1,"message":"284","line":5,"column":14,"nodeType":"285","messageId":"286","endLine":5,"endColumn":17},{"ruleId":"283","severity":1,"message":"287","line":4,"column":9,"nodeType":"285","messageId":"286","endLine":4,"endColumn":25},{"ruleId":"283","severity":1,"message":"288","line":5,"column":10,"nodeType":"285","messageId":"286","endLine":5,"endColumn":23},{"ruleId":"280","severity":1,"message":"281","line":31,"column":25,"nodeType":"282","endLine":31,"endColumn":36},{"ruleId":"280","severity":1,"message":"281","line":32,"column":25,"nodeType":"282","endLine":32,"endColumn":36},{"ruleId":"280","severity":1,"message":"281","line":33,"column":25,"nodeType":"282","endLine":33,"endColumn":36},{"ruleId":"280","severity":1,"message":"281","line":34,"column":25,"nodeType":"282","endLine":34,"endColumn":36},{"ruleId":"283","severity":1,"message":"289","line":6,"column":18,"nodeType":"285","messageId":"286","endLine":6,"endColumn":26},{"ruleId":"283","severity":1,"message":"290","line":2,"column":40,"nodeType":"285","messageId":"286","endLine":2,"endColumn":46},{"ruleId":"283","severity":1,"message":"291","line":2,"column":48,"nodeType":"285","messageId":"286","endLine":2,"endColumn":52},{"ruleId":"283","severity":1,"message":"292","line":5,"column":9,"nodeType":"285","messageId":"286","endLine":5,"endColumn":19},{"ruleId":"283","severity":1,"message":"293","line":5,"column":21,"nodeType":"285","messageId":"286","endLine":5,"endColumn":30},{"ruleId":"294","severity":1,"message":"295","line":67,"column":12,"nodeType":"296","messageId":"297","endLine":67,"endColumn":99},{"ruleId":"280","severity":1,"message":"281","line":143,"column":25,"nodeType":"282","endLine":143,"endColumn":38},{"ruleId":"283","severity":1,"message":"291","line":6,"column":10,"nodeType":"285","messageId":"286","endLine":6,"endColumn":14},{"ruleId":"283","severity":1,"message":"298","line":6,"column":16,"nodeType":"285","messageId":"286","endLine":6,"endColumn":21},{"ruleId":"283","severity":1,"message":"299","line":6,"column":23,"nodeType":"285","messageId":"286","endLine":6,"endColumn":29},{"ruleId":"283","severity":1,"message":"300","line":7,"column":22,"nodeType":"285","messageId":"286","endLine":7,"endColumn":30},{"ruleId":"283","severity":1,"message":"301","line":17,"column":32,"nodeType":"285","messageId":"286","endLine":17,"endColumn":54},{"ruleId":"283","severity":1,"message":"302","line":18,"column":32,"nodeType":"285","messageId":"286","endLine":18,"endColumn":54},{"ruleId":"283","severity":1,"message":"303","line":19,"column":33,"nodeType":"285","messageId":"286","endLine":19,"endColumn":56},{"ruleId":"283","severity":1,"message":"304","line":22,"column":11,"nodeType":"285","messageId":"286","endLine":22,"endColumn":32},{"ruleId":"283","severity":1,"message":"305","line":28,"column":11,"nodeType":"285","messageId":"286","endLine":28,"endColumn":42},{"ruleId":"283","severity":1,"message":"306","line":114,"column":13,"nodeType":"285","messageId":"286","endLine":114,"endColumn":32},{"ruleId":"283","severity":1,"message":"307","line":116,"column":13,"nodeType":"285","messageId":"286","endLine":116,"endColumn":32},{"ruleId":"283","severity":1,"message":"308","line":117,"column":13,"nodeType":"285","messageId":"286","endLine":117,"endColumn":33},{"ruleId":"283","severity":1,"message":"309","line":120,"column":37,"nodeType":"285","messageId":"286","endLine":120,"endColumn":62},{"ruleId":"283","severity":1,"message":"310","line":319,"column":17,"nodeType":"285","messageId":"286","endLine":319,"endColumn":18},{"ruleId":"311","severity":1,"message":"312","line":333,"column":8,"nodeType":"313","endLine":333,"endColumn":10,"suggestions":"314"},{"ruleId":"311","severity":1,"message":"315","line":359,"column":8,"nodeType":"313","endLine":359,"endColumn":32,"suggestions":"316"},{"ruleId":"311","severity":1,"message":"317","line":396,"column":8,"nodeType":"313","endLine":396,"endColumn":10,"suggestions":"318"},{"ruleId":"294","severity":1,"message":"295","line":503,"column":20,"nodeType":"296","messageId":"297","endLine":504,"endColumn":88},{"ruleId":"283","severity":1,"message":"319","line":19,"column":38,"nodeType":"285","messageId":"286","endLine":19,"endColumn":64},{"ruleId":"283","severity":1,"message":"307","line":22,"column":13,"nodeType":"285","messageId":"286","endLine":22,"endColumn":32},{"ruleId":"283","severity":1,"message":"306","line":23,"column":13,"nodeType":"285","messageId":"286","endLine":23,"endColumn":32},{"ruleId":"283","severity":1,"message":"308","line":24,"column":13,"nodeType":"285","messageId":"286","endLine":24,"endColumn":33},{"ruleId":"283","severity":1,"message":"320","line":25,"column":32,"nodeType":"285","messageId":"286","endLine":25,"endColumn":52},{"ruleId":"311","severity":1,"message":"312","line":74,"column":8,"nodeType":"313","endLine":74,"endColumn":11,"suggestions":"321"},{"ruleId":"311","severity":1,"message":"312","line":101,"column":8,"nodeType":"313","endLine":101,"endColumn":35,"suggestions":"322"},{"ruleId":"323","severity":1,"message":"324","line":116,"column":41,"nodeType":"282","endLine":116,"endColumn":107},{"ruleId":"283","severity":1,"message":"325","line":3,"column":27,"nodeType":"285","messageId":"286","endLine":3,"endColumn":34},{"ruleId":"283","severity":1,"message":"326","line":58,"column":13,"nodeType":"285","messageId":"286","endLine":58,"endColumn":35},{"ruleId":"311","severity":1,"message":"327","line":93,"column":8,"nodeType":"313","endLine":93,"endColumn":10,"suggestions":"328"},{"ruleId":"311","severity":1,"message":"312","line":135,"column":8,"nodeType":"313","endLine":135,"endColumn":28,"suggestions":"329"},{"ruleId":"311","severity":1,"message":"330","line":174,"column":12,"nodeType":"313","endLine":174,"endColumn":14,"suggestions":"331"},{"ruleId":"311","severity":1,"message":"332","line":403,"column":8,"nodeType":"313","endLine":403,"endColumn":55,"suggestions":"333"},{"ruleId":"311","severity":1,"message":"334","line":420,"column":8,"nodeType":"313","endLine":420,"endColumn":16,"suggestions":"335"},{"ruleId":"311","severity":1,"message":"334","line":434,"column":9,"nodeType":"313","endLine":434,"endColumn":17,"suggestions":"336"},{"ruleId":"311","severity":1,"message":"337","line":472,"column":9,"nodeType":"313","endLine":472,"endColumn":19,"suggestions":"338"},{"ruleId":"283","severity":1,"message":"292","line":1,"column":10,"nodeType":"285","messageId":"286","endLine":1,"endColumn":20},{"ruleId":"283","severity":1,"message":"339","line":5,"column":10,"nodeType":"285","messageId":"286","endLine":5,"endColumn":29},{"ruleId":"311","severity":1,"message":"312","line":34,"column":8,"nodeType":"313","endLine":34,"endColumn":10,"suggestions":"340"},{"ruleId":"323","severity":1,"message":"324","line":60,"column":40,"nodeType":"282","endLine":60,"endColumn":84},{"ruleId":"283","severity":1,"message":"309","line":9,"column":36,"nodeType":"285","messageId":"286","endLine":9,"endColumn":61},{"ruleId":"283","severity":1,"message":"339","line":5,"column":10,"nodeType":"285","messageId":"286","endLine":5,"endColumn":29},{"ruleId":"283","severity":1,"message":"341","line":15,"column":15,"nodeType":"285","messageId":"286","endLine":15,"endColumn":38},{"ruleId":"311","severity":1,"message":"342","line":34,"column":10,"nodeType":"313","endLine":34,"endColumn":30,"suggestions":"343"},{"ruleId":"323","severity":1,"message":"324","line":126,"column":46,"nodeType":"282","endLine":126,"endColumn":98},{"ruleId":"283","severity":1,"message":"344","line":2,"column":17,"nodeType":"285","messageId":"286","endLine":2,"endColumn":24},{"ruleId":"283","severity":1,"message":"306","line":24,"column":13,"nodeType":"285","messageId":"286","endLine":24,"endColumn":32},{"ruleId":"283","severity":1,"message":"307","line":25,"column":13,"nodeType":"285","messageId":"286","endLine":25,"endColumn":32},{"ruleId":"283","severity":1,"message":"308","line":26,"column":13,"nodeType":"285","messageId":"286","endLine":26,"endColumn":33},{"ruleId":"283","severity":1,"message":"304","line":113,"column":11,"nodeType":"285","messageId":"286","endLine":113,"endColumn":32},{"ruleId":"283","severity":1,"message":"345","line":209,"column":11,"nodeType":"285","messageId":"286","endLine":209,"endColumn":23},{"ruleId":"283","severity":1,"message":"346","line":309,"column":16,"nodeType":"285","messageId":"286","endLine":309,"endColumn":23},{"ruleId":"283","severity":1,"message":"310","line":421,"column":19,"nodeType":"285","messageId":"286","endLine":421,"endColumn":20},{"ruleId":"311","severity":1,"message":"312","line":436,"column":8,"nodeType":"313","endLine":436,"endColumn":10,"suggestions":"347"},{"ruleId":"311","severity":1,"message":"312","line":470,"column":8,"nodeType":"313","endLine":470,"endColumn":10,"suggestions":"348"},{"ruleId":"294","severity":1,"message":"295","line":594,"column":20,"nodeType":"296","messageId":"297","endLine":595,"endColumn":88},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'set' is defined but never used.","Identifier","unusedVar","'FaFacebookSquare' is defined but never used.","'FaTimesCircle' is defined but never used.","'setArray' is assigned a value but never used.","'Switch' is defined but never used.","'Link' is defined but never used.","'useContext' is defined but never used.","'useEffect' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Route' is defined but never used.","'Routes' is defined but never used.","'useState' is defined but never used.","'setProfileDisplayValue' is assigned a value but never used.","'setMessageDisplayValue' is assigned a value but never used.","'setSettingsDisplayValue' is assigned a value but never used.","'scrollableChatListRef' is assigned a value but never used.","'conversedWithParentContainerRef' is assigned a value but never used.","'messageDisplayValue' is assigned a value but never used.","'profileDisplayValue' is assigned a value but never used.","'settingsDisplayValue' is assigned a value but never used.","'setAddUserToChatListValue' is assigned a value but never used.","'c' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loggedInNameValue'. Either include it or remove the dependency array.","ArrayExpression",["349"],"React Hook useEffect has missing dependencies: 'conversedWithLists' and 'saveToChatList'. Either include them or remove the dependency array.",["350"],"React Hook useEffect has missing dependencies: 'loggedInNameValue', 'notificationValue', and 'setNotificationValue'. Either include them or remove the dependency array.",["351"],"'setProfilePhotoChangeValue' is assigned a value but never used.","'setNotificationValue' is assigned a value but never used.",["352"],["353"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'FaTrash' is defined but never used.","'addUserToChatListValue' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setOtherUserNameValue'. Either include it or remove the dependency array.",["354"],["355"],"React Hook useEffect has missing dependencies: 'loggedInNameValue' and 'otherUserNameValue'. Either include them or remove the dependency array.",["356"],"React Hook useEffect has missing dependencies: 'notificationValue' and 'setAddUserToChatListValue'. Either include them or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.",["357"],"React Hook useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.",["358"],["359"],"React Hook useEffect has missing dependencies: 'notificationValue', 'otherUserNameValue', and 'setNotificationValue'. Either include them or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.",["360"],"'LoggedInNameContext' is defined but never used.",["361"],"'profilePhotoChangeValue' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setProfilePhotoChangeValue'. Either include it or remove the dependency array.",["362"],"'FaCheck' is defined but never used.","'clickMessage' is assigned a value but never used.","'setShow' is assigned a value but never used.",["363"],["364"],{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"365","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"376","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},{"desc":"381","fix":"383"},{"desc":"384","fix":"385"},{"desc":"365","fix":"386"},{"desc":"387","fix":"388"},{"desc":"365","fix":"389"},{"desc":"365","fix":"390"},"Update the dependencies array to be: [loggedInNameValue]",{"range":"391","text":"392"},"Update the dependencies array to be: [addUserToChatListValue, conversedWithLists, saveToChatList]",{"range":"393","text":"394"},"Update the dependencies array to be: [loggedInNameValue, notificationValue, setNotificationValue]",{"range":"395","text":"396"},{"range":"397","text":"392"},"Update the dependencies array to be: [loggedInNameValue, profilePhotoChangeValue]",{"range":"398","text":"399"},"Update the dependencies array to be: [setOtherUserNameValue]",{"range":"400","text":"401"},"Update the dependencies array to be: [loggedInNameValue, otherUserNameValue]",{"range":"402","text":"403"},{"range":"404","text":"403"},"Update the dependencies array to be: [loggedInNameValue, otherUserNameValue, setAddUserToChatListValue, notificationValue]",{"range":"405","text":"406"},"Update the dependencies array to be: []",{"range":"407","text":"408"},{"range":"409","text":"408"},"Update the dependencies array to be: [notificationValue, otherUserNameValue, setNotificationValue]",{"range":"410","text":"411"},{"range":"412","text":"392"},"Update the dependencies array to be: [serverPostResponse, setProfilePhotoChangeValue]",{"range":"413","text":"414"},{"range":"415","text":"392"},{"range":"416","text":"392"},[11131,11133],"[loggedInNameValue]",[11821,11845],"[addUserToChatListValue, conversedWithLists, saveToChatList]",[12615,12617],"[loggedInNameValue, notificationValue, setNotificationValue]",[2607,2610],[3251,3278],"[loggedInNameValue, profilePhotoChangeValue]",[3051,3053],"[setOtherUserNameValue]",[4127,4147],"[loggedInNameValue, otherUserNameValue]",[5185,5187],[12693,12740],"[loggedInNameValue, otherUserNameValue, setAddUserToChatListValue, notificationValue]",[13080,13088],"[]",[13327,13335],[14688,14698],"[notificationValue, otherUserNameValue, setNotificationValue]",[1052,1054],[1315,1335],"[serverPostResponse, setProfilePhotoChangeValue]",[14003,14005],[14695,14697]]