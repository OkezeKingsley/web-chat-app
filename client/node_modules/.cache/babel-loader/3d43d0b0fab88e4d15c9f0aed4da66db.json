{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBodyFolder\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport notification from './notification.mp3'; //This for the incoming message notification\n\nimport { v4 as uuid } from 'uuid';\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\nimport axios from 'axios'; //import { RoomContext } from '../contextFolder/RoomContext';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //let [room, setRoom] = useState()\n  //  const { RoomContextValue, setRoomContextValue} = useContext(RoomContext) \n  //This state is for the message that will be sent to the \n  //server so it can be emitted.\n  const [text, setText] = useState(''); //This state is what will be mapped and printed on the users UI  \n  //const [lists, setLists] = useState([''])\n\n  const [mappingTheChats, setMappingTheChats] = useState([{}]); //This is for displaying when the other user is typing...\n\n  const [userIsTyping, setUserIsTyping] = useState(''); //This is used to change the value of the input to empty string\n\n  const inputRef = useRef(); //This is for our scrollable chat body\n\n  const scrollRef = useRef(); //   scrollRef.scrollTop = scrollRef.scrollHeight;\n  //This is to make my chat move to the right side of the chat\n  //This sound for an incoming message\n\n  const playNotification = () => {\n    const sound = new Audio(notification);\n    sound.play();\n  }; //Our useConetext for this file\n\n\n  const {\n    loggedInNameValue,\n    setLoggedInNameValue\n  } = useContext(LoggedInNameContext);\n  const {\n    OtherUserNameValue,\n    setOtherUserNameValue\n  } = useContext(OtherUserNameContext); //fetching old chats with OtherUserNameValue\n\n  /*\r\n  axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n       from: loggedInNameValue,\r\n       to: OtherUserNameValue\r\n    }).then((response) => {\r\n        console.log(response)\r\n    }).catch((err) => {\r\n        console.log(err)\r\n      \r\n  })\r\n  */\n  //This is used to delete a message when the trashcan is\n  //clicked on.\n\n  const messageDelete = id => {\n    const newMappingTheChat = mappingTheChats.filter(l => l.id !== id);\n    setMappingTheChats(newMappingTheChat);\n  }; //This will be used to dictect when the other user is typing...\n  //and then it will send the ('typing') message\n  //to the other user connected in the socket server.\n\n\n  const handleTyping = () => {\n    socket.emit('typing', {\n      typingNotification: 'typing...'\n    });\n  }; //This will involke when the other user is not typing or they\n  //just got off the input box\n\n\n  const handleNotTyping = () => {\n    socket.emit('notTyping', ' ');\n  }; //  const joinRoom = () => {\n  //     socket.emit(\"join_room\", room)\n  // }\n\n  /*\r\n     \r\n  const [mySocketId, setMySocketId] = useState()\r\n     useEffect(( ) => {\r\n      socket.on(\"connected_socket_id\", (socketId) => {\r\n         \r\n          setMySocketId(socketId)\r\n          \r\n      })\r\n     })\r\n  */\n\n  /*   function join(){\r\n      \r\n      if(loggedInNameValue && OtherUserNameValue){\r\n          setRoom([loggedInNameValue + OtherUserNameValue, OtherUserNameValue + loggedInNameValue])\r\n      } \r\n  */\n  //socket.emit(\"join_room\", room);\n  //}\n  //   useEffect(( ) => {\n  //      join()\n  //    if(loggedInNameValue && OtherUserNameValue){\n  //   setRoom([loggedInNameValue + OtherUserNameValue, OtherUserNameValue + loggedInNameValue])\n  //}\n  // }, [])//pUt the setroom in a function and call it once then terminate\n\n  /*\r\n     function joinRoom(){\r\n      console.log(loggedInNameValue)\r\n      console.log(OtherUserNameValue)\r\n          if(loggedInNameValue && OtherUserNameValue){\r\n              setRoom([loggedInNameValue + OtherUserNameValue, OtherUserNameValue + loggedInNameValue])\r\n          } \r\n      \r\n          socket.emit(\"join_room\", room)\r\n  \r\n     }\r\n  \r\n    \r\n     const clear = setTimeout(function(){\r\n      if (OtherUserNameValue){\r\n          joinRoom()\r\n         } else {\r\n          alert('hi why now?')\r\n         }\r\n     }, 1)\r\n  \r\n     clearTimeout(clear)\r\n   */\n\n\n  useEffect(() => {\n    socket.emit(\"o\");\n  }); //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n  const sendMessage = () => {\n    //When the user hit the send button, we want to create a unique private room\n    //he can chat with other user of his choice without emitting the message to \n    //all other client that joins our server because by default, socket io push\n    //the message to everyone currently on our server. REMEMBER: THIS MOST BE DONE \n    //WHEN MAKING A PRIVATE ROOM CHAT\n    //this is like a private message..\n    // setRoom(loggedInNameValue + OtherUserNameValue || OtherUserNameValue + loggedInNameValue)\n    //setRoom([loggedInNameValue + OtherUserNameValue, OtherUserNameValue + loggedInNameValue])\n    //setRoom(3)\n    //  socket.emit(\"join_room\", room)\n    //Here we want to send message to the server to receive so\n    //that it can emit it to other client. After the \"send_message\"\n    //event listener, an object should follow it which will contain\n    //the message data information\n    socket.emit(\"send_message\", {\n      message: text,\n      from: loggedInNameValue,\n      to: OtherUserNameValue\n    }); //This is used to change the value of the input to empty string\n    //when the send button is clicked\n    // inputRef.current.value = \" \";\n    // setText(' '); remove the comment from this line of code, this code is important\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      //The (data.message) below holds the message property value received from the server and\n      //we give each message a random unique ID so that we can do stuff like\n      //deleteing the message using it unique ID etc...\n      const m = data.message;\n      const i = uuid();\n\n      if (data.from == loggedInNameValue) {} //This keeps whatever is in the lists state and add a new data to the list ( in this case, \n      // which is the message ) so it can get mapped   \n\n\n      setMappingTheChats(prevState => [...prevState, {\n        messageData: m,\n        id: i\n      }]); //This gives a notification alert when a message comes in...\n      // playNotification()      \n    });\n  }, [socket]); //This useEffect handles when the other user is typing.\n  //it receive the information from the server so\n  //we can display it on the front end.\n\n  useEffect(() => {\n    socket.on(\"isTyping\", data => {\n      setUserIsTyping(data.typingNotification);\n      console.log(userIsTyping);\n    });\n  }, [socket]); //This useEffect handles when  the other user is not typing.\n  //it will emit an empty string\n\n  useEffect(() => {\n    socket.on(\"isNotTyping\", data => {\n      setUserIsTyping(data);\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"5px solid black\",\n      paddingBottom: \"800px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatNav\",\n      children: [\"Your conversation with:  \", OtherUserNameValue, \"  \", userIsTyping]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), \"    \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll\",\n      ref: scrollRef,\n      children: mappingTheChats.map((mappingTheChat, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"listMessageData\",\n        children: mappingTheChat.messageData\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"message...\",\n        onChange: e => setText(e.target.value) //This is to store what user write inside the text variable\n        ,\n        className: \"text\",\n        ref: inputRef,\n        onMouseEnter: handleTyping,\n        onMouseLeave: handleNotTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n          onClick: sendMessage,\n          className: \"txt-btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"2T4w3yXQW62kXrqC2DaATrX6FLw=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["notification","v4","uuid","FaTelegramPlane","FaTrash","useContext","useEffect","useRef","useState","io","LoggedInNameContext","OtherUserNameContext","axios","socket","connect","ChatBody","text","setText","mappingTheChats","setMappingTheChats","userIsTyping","setUserIsTyping","inputRef","scrollRef","playNotification","sound","Audio","play","loggedInNameValue","setLoggedInNameValue","OtherUserNameValue","setOtherUserNameValue","messageDelete","id","newMappingTheChat","filter","l","handleTyping","emit","typingNotification","handleNotTyping","sendMessage","message","from","to","on","data","m","i","prevState","messageData","console","log","border","paddingBottom","map","mappingTheChat","e","target","value"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBodyFolder/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport notification from './notification.mp3'//This for the incoming message notification\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa'\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\r\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\r\nimport axios from 'axios';\r\n//import { RoomContext } from '../contextFolder/RoomContext';\r\n\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\n\r\nfunction ChatBody(){\r\n\r\n  //let [room, setRoom] = useState()\r\n //  const { RoomContextValue, setRoomContextValue} = useContext(RoomContext) \r\n\r\n\r\n    //This state is for the message that will be sent to the \r\n    //server so it can be emitted.\r\n    const [text, setText] = useState('')\r\n\r\n\r\n    //This state is what will be mapped and printed on the users UI  \r\n    //const [lists, setLists] = useState([''])\r\n    const [mappingTheChats, setMappingTheChats] = useState([{}])  \r\n\r\n\r\n    //This is for displaying when the other user is typing...\r\n    const[userIsTyping, setUserIsTyping] = useState('')\r\n\r\n\r\n    //This is used to change the value of the input to empty string\r\n    const inputRef = useRef()\r\n\r\n\r\n    //This is for our scrollable chat body\r\n    const scrollRef = useRef()\r\n    //   scrollRef.scrollTop = scrollRef.scrollHeight;\r\n\r\n    //This is to make my chat move to the right side of the chat\r\n    \r\n   \r\n    //This sound for an incoming message\r\n   const playNotification = () => {\r\n    const sound = new Audio(notification); \r\n    sound.play()\r\n    }\r\n   \r\n    //Our useConetext for this file\r\n    const { loggedInNameValue, setLoggedInNameValue } = useContext(LoggedInNameContext) \r\n\r\n    const { OtherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext)\r\n\r\n    //fetching old chats with OtherUserNameValue\r\n    /*\r\n    axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n\r\n       from: loggedInNameValue,\r\n\r\n       to: OtherUserNameValue\r\n\r\n    }).then((response) => {\r\n\r\n        console.log(response)\r\n\r\n    }).catch((err) => {\r\n\r\n        console.log(err)\r\n        \r\n    })\r\n    */\r\n\r\n    //This is used to delete a message when the trashcan is\r\n    //clicked on.\r\n    const messageDelete = (id) => {\r\n        const newMappingTheChat = mappingTheChats.filter(l => l.id !== id)\r\n        setMappingTheChats(newMappingTheChat)\r\n    }\r\n\r\n\r\n\r\n    //This will be used to dictect when the other user is typing...\r\n    //and then it will send the ('typing') message\r\n    //to the other user connected in the socket server.\r\n    const handleTyping = () => {\r\n        socket.emit('typing', {typingNotification: 'typing...'})\r\n    }\r\n\r\n\r\n    //This will involke when the other user is not typing or they\r\n    //just got off the input box\r\n    const handleNotTyping = () => {\r\n        socket.emit('notTyping', ' ')\r\n    }\r\n\r\n\r\n  //  const joinRoom = () => {\r\n   //     socket.emit(\"join_room\", room)\r\n  // }\r\n/*\r\n   \r\nconst [mySocketId, setMySocketId] = useState()\r\n   useEffect(( ) => {\r\n    socket.on(\"connected_socket_id\", (socketId) => {\r\n       \r\n        setMySocketId(socketId)\r\n        \r\n    })\r\n   })\r\n*/\r\n\r\n/*   function join(){\r\n    \r\n    if(loggedInNameValue && OtherUserNameValue){\r\n        setRoom([loggedInNameValue + OtherUserNameValue, OtherUserNameValue + loggedInNameValue])\r\n    } \r\n*/\r\n    //socket.emit(\"join_room\", room);\r\n   //}\r\n  \r\n    \r\n //   useEffect(( ) => {\r\n  //      join()\r\n       \r\n      \r\n    //    if(loggedInNameValue && OtherUserNameValue){\r\n     //   setRoom([loggedInNameValue + OtherUserNameValue, OtherUserNameValue + loggedInNameValue])\r\n    //}\r\n   // }, [])//pUt the setroom in a function and call it once then terminate\r\n   \r\n   \r\n/*\r\n   function joinRoom(){\r\n    console.log(loggedInNameValue)\r\n    console.log(OtherUserNameValue)\r\n        if(loggedInNameValue && OtherUserNameValue){\r\n            setRoom([loggedInNameValue + OtherUserNameValue, OtherUserNameValue + loggedInNameValue])\r\n        } \r\n    \r\n        socket.emit(\"join_room\", room)\r\n\r\n   }\r\n\r\n  \r\n   const clear = setTimeout(function(){\r\n    if (OtherUserNameValue){\r\n        joinRoom()\r\n       } else {\r\n        alert('hi why now?')\r\n       }\r\n   }, 1)\r\n\r\n   clearTimeout(clear)\r\n */   \r\n   \r\n   useEffect(() => {\r\n    socket.emit(\"o\")\r\n   })\r\n\r\n\r\n\r\n    \r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n\r\n        //When the user hit the send button, we want to create a unique private room\r\n        //he can chat with other user of his choice without emitting the message to \r\n        //all other client that joins our server because by default, socket io push\r\n        //the message to everyone currently on our server. REMEMBER: THIS MOST BE DONE \r\n        //WHEN MAKING A PRIVATE ROOM CHAT\r\n        //this is like a private message..\r\n       // setRoom(loggedInNameValue + OtherUserNameValue || OtherUserNameValue + loggedInNameValue)\r\n       //setRoom([loggedInNameValue + OtherUserNameValue, OtherUserNameValue + loggedInNameValue])\r\n       //setRoom(3)\r\n      \r\n      //  socket.emit(\"join_room\", room)\r\n\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", {message: text, from: loggedInNameValue, to: OtherUserNameValue})\r\n\r\n        //This is used to change the value of the input to empty string\r\n        //when the send button is clicked\r\n       // inputRef.current.value = \" \";\r\n       // setText(' '); remove the comment from this line of code, this code is important\r\n       \r\n    };\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data)  => {  \r\n\r\n        //The (data.message) below holds the message property value received from the server and\r\n        //we give each message a random unique ID so that we can do stuff like\r\n        //deleteing the message using it unique ID etc...\r\n        const m = data.message;\r\n        const i = uuid();  \r\n        \r\n        \r\n        if (data.from == loggedInNameValue) {\r\n\r\n            \r\n\r\n           \r\n            \r\n        }\r\n\r\n        //This keeps whatever is in the lists state and add a new data to the list ( in this case, \r\n        // which is the message ) so it can get mapped   \r\n        setMappingTheChats((prevState) => [...prevState, { messageData: m, id: i } ]);     \r\n\r\n        //This gives a notification alert when a message comes in...\r\n       // playNotification()      \r\n \r\n        })\r\n    }, [socket])\r\n\r\n\r\n\r\n    //This useEffect handles when the other user is typing.\r\n    //it receive the information from the server so\r\n    //we can display it on the front end.\r\n\r\n    useEffect(() =>{\r\n\r\n        socket.on(\"isTyping\", (data) => {\r\n          \r\n            setUserIsTyping(data.typingNotification) \r\n            console.log(userIsTyping)\r\n\r\n        })\r\n        \r\n\r\n    }, [socket])\r\n\r\n\r\n     //This useEffect handles when  the other user is not typing.\r\n     //it will emit an empty string\r\n     useEffect(() => {\r\n        socket.on(\"isNotTyping\", (data) => {\r\n            setUserIsTyping(data)\r\n        })\r\n     }, [socket])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div style={{border:\"5px solid black\", paddingBottom: \"800px\"}}>\r\n            <div className=\"chatNav\">\r\n                Your conversation with:  {OtherUserNameValue}  {userIsTyping}\r\n            </div>\r\n {/*        \r\n<input type=\"text\" onChange={(e) => setRoom(e.target.value)}></input> \r\n<button onClick={joinRoom}>join room</button>{room}\r\n  */}    {/*mySocketId*/}\r\n            <div className=\"scroll\" ref={scrollRef}>\r\n                     \r\n                {\r\n\r\n                    mappingTheChats.map((mappingTheChat, id) => (  \r\n\r\n                        <div key={id} id=\"listMessageData\" >\r\n\r\n                            {mappingTheChat.messageData}\r\n                        \r\n                        </div>\r\n                    ))\r\n\r\n        \r\n                }\r\n\r\n\r\n        \r\n               \r\n            </div>\r\n\r\n            <div className=\"text-box\">\r\n\r\n                <input type=\"text\" placeholder=\"message...\" \r\n\r\n                onChange={(e) => setText(e.target.value)} //This is to store what user write inside the text variable\r\n\r\n                className=\"text\"\r\n\r\n                ref={inputRef}\r\n\r\n                onMouseEnter={handleTyping}\r\n\r\n                onMouseLeave={handleNotTyping}\r\n         \r\n                />\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                {/* <button onClick={sendMessage} className=\"txt-btn\">send message</button> */} \r\n                <div>\r\n                     <FaTelegramPlane onClick={sendMessage} className=\"txt-btn\"/>\r\n                </div> \r\n                \r\n            </div>\r\n             \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":"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"},"metadata":{},"sourceType":"module"}