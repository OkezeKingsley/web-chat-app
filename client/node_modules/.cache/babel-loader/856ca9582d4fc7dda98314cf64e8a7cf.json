{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatListFolder\\\\ChatList.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { FaExclamationCircle, FaSistrix } from \"react-icons/fa\";\nimport './ChatList.css';\nimport axios from 'axios';\nimport { OtherUserNameContext } from \"../contextFolder/OtherUserNameContext\";\nimport { LoggedInNameContext } from \"../contextFolder/LoggedInNameContext\";\nimport { MessageDisplayContext } from \"../contextFolder/MessageDisplayContext\";\nimport { ProfileDisplayContext } from \"../contextFolder/ProfileDisplayContext\";\nimport { SettingsDisplayContext } from \"../contextFolder/SettingsDisplayContext\";\nimport { AddUserToChatListContext } from \"../contextFolder/AddUserToChatListContext\";\nimport { NotificationContext } from \"../contextFolder/NotificationContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatList() {\n  _s();\n\n  //This is to fetch all the registered users in the database\n\n  /*\r\n     const [listOfUsersFromDatabase, setListOfUsersFromDatabase] = useState([  ])\r\n     console.log(listOfUsersFromDatabase)\r\n  */\n  //------------ [USEEFFECT FOR THIS COMPONENT] -----------//\n  //THIS FETCHES ALL USERS IN DB ON EVERY RENDER OF PAGE SO THAT THEY CAN BE \n  //AVAILABLE FOR SEARCH FILTERING...............\n\n  /*\r\n      useEffect(( ) => {\r\n  \r\n          axios.get(\"http://localhost:4000/getAllUsers\").then((response) => {\r\n  \r\n          setListOfUsersFromDatabase(response.data)\r\n          \r\n          } ).catch ( (error) => {\r\n          \r\n              console.log(\"oops! Couldn't reach the server\" + error)\r\n          \r\n          } )\r\n      }, []);\r\n  */\n  //-------- [ OUR USEREF FOR THIS COMPONENT... ] --------//\n  //THIS IS FOR OUR SCROLLABLE CHAT list      \n  const scrollableChatListRef = useRef(); //THIS IS FOR THE FILTERING OF SEARCH DIV\n\n  const filterParentContainerRef = useRef(); //THIS IS FOR THE CONVERSED WITH DIV\n\n  const conversedWithParentContainerRef = useRef(); //THIS IF HANDLING HIDING UNREAD MESSAGE ICON\n\n  const unReadRef = useRef();\n\n  const hideFilterParentContainerRef = () => {\n    filterParentContainerRef.current.style.display = \"none\";\n    conversedWithParentContainerRef.style.display = \"true\";\n  };\n\n  const showFilterParentContainerRef = () => {\n    filterParentContainerRef.current.style.display = \"block\"; //     conversedWithParentContainerRef.style.display = \"none\"\n  };\n\n  const hideConveresedParentContainerRef = () => {//      conversedWithParentContainerRef.style.display = \"hidden\"\n    //      filterParentContainerRef.current.style.display = \"visible\"\n  };\n\n  const handleRemovingThisUserFromNotificationList = thisUser => {\n    setNotificationValue([]); //Let's check if this user exists in our notification list array and\n    //the filter out users that are not the same vaue as this user and\n    //then set the state of notification list to be our filtered user\n\n    axios.post(\"http://localhost:4000/removeThisUserNotification\", {\n      loggedInUser: loggedInNameValue,\n      personToRemove: thisUser\n    }).then(result => {\n      if (result) {\n        console.log(result.data);\n        result.data.forEach(resData => {\n          setNotificationValue(prevState => [...prevState]);\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n    /*\r\n            if ( notificationValue.includes(thisUser) ) {\r\n    \r\n                const newArray = notificationValue.filter(item => item !== thisUser)\r\n    \r\n                setNotificationValue(newArray)\r\n            }\r\n    \r\n      */\n\n    unReadRef.current.style.display = \"none\";\n  }; //---------- [ CONTEXT API FOR THIS FILE... ] ----------//\n\n\n  const {\n    loggedInNameValue,\n    setLoggedInNameValue\n  } = useContext(LoggedInNameContext);\n  const {\n    otherUserNameValue,\n    setOtherUserNameValue\n  } = useContext(OtherUserNameContext); //Displays message component when you click on list of conversed with user\n\n  const {\n    messageDisplayValue,\n    setMessageDisplayValue\n  } = useContext(MessageDisplayContext);\n  const {\n    profileDisplayValue,\n    setProfileDisplayValue\n  } = useContext(ProfileDisplayContext);\n  const {\n    settingsDisplayValue,\n    setSettingsDisplayValue\n  } = useContext(SettingsDisplayContext); //adding someone to your chatlist when they message you.\n\n  const {\n    addUserToChatListValue,\n    setAddUserToChatListValue\n  } = useContext(AddUserToChatListContext); //This hold the value for every notification we've. It stores the user that  \n  //sent use message and have'nt responded to.\n\n  const {\n    notificationValue,\n    setNotificationValue\n  } = useContext(NotificationContext);\n\n  const clickMessage = () => {\n    setProfileDisplayValue(false);\n    setSettingsDisplayValue(false);\n    setMessageDisplayValue(true);\n  };\n  /* - - - - - [ALL USESTATE FOR THIS PARTICULAR COMPONENT] - - - - - */\n  //This will help us storing the list of user that we've conversed with\n\n\n  const [conversedWithLists, setConversedWithLists] = useState([]); //This setFilteredData will store the filtered element based on the user\n  //search input and then store it in the filteredData variable so we can\n  //map it\n\n  const [filteredData, setFilteredData] = useState([{}]); //This is used for capturing what the user types into the search box\n\n  const [searchWord, setSearchWord] = useState();\n  /* - - - - - [ALL OUR FUNCTIONS FOR THIS PARTICULAR COMPONENT] - - - - -*/\n  //This is to store what the user type in the search box so we can\n  //use for filtering and also filter the name of user in realtime \n  //based on serach input\n\n  const onChangeFunction = event => {\n    //This will grab the value in the user type in the input box and store it in the searchFilter state\n    //please note: the toLowerCase() will convert the value to lowercase so that it can match with the\n    //lowercase name properties in the database. (we'd convert all name properties in DB to lowercase too)\n    setSearchWord(event.target.value.toLowerCase()); //This will filter out users that matches the character inputted by the user in realtime\n    //and then store it in the newFilter variable. please note: the toLowerCase() will convert the value of the\n    // DB name property to lowercase so that it can match with the value from the search input which we already \n    //convertted to lowercase using the toLowercase() method.\n    //Here we're returning users that their names matches with the value the user is inputting as they\n    //are typing it out on the go...\n\n    if (searchWord) {\n      axios.post(\"http://localhost:4000/getAllUsers\", {\n        searchInput: searchWord.toLowerCase()\n      }).then(response => {\n        console.log(response.data);\n        response.data.forEach(resData => {\n          let name = resData.name; //resultName;\n\n          let profilePicture = resData.profile_picture; //resultProfilePicture;\n\n          console.log({\n            name: name,\n            profile_picture: profilePicture\n          }); //Here let check if filteredData already have this user stored in it already \n          //to avoid duplicate display of names that already exist in this array.\n\n          let checkIfThisUserExistUsingItName = filteredData.some(object => object.name === name);\n\n          if (!checkIfThisUserExistUsingItName) {\n            setFilteredData([{\n              name: name,\n              profile_picture: profilePicture\n            }]);\n          }\n        });\n      }).catch(error => {\n        console.log(\"oops! Couldn't reach the server\" + error);\n      });\n    } //setHideConversedWithParentContainer(\"none\")\n    //This shows the filters parent container whenonChange of the input search box\n\n\n    showFilterParentContainerRef();\n  }; //This function is used for getting the user with the name that matches what the user is typed in\n  //the search box once they clicked the search button close to the search input box\n\n\n  const searchUser = () => {\n    if (searchWord) {\n      axios.post(\"http://localhost:4000/getAllUsers\", {\n        searchInput: searchWord.toLowerCase()\n      }).then(response => {\n        console.log(response.data);\n        /*\r\n                    response.data.forEach((resData) => {\r\n        \r\n                        let name = resData.name;\r\n                        let profilePicture = resData.profile_picture\r\n        \r\n                        console.log({name: name, profile_picture: profilePicture})\r\n        \r\n                        //Here let check if filteredData already have this user stored in it already \r\n                        //to avoid duplicate display of names that already exist in this array.\r\n                        let checkIfThisUserExistUsingItName = filteredData.some((object) => object.name === name);\r\n        \r\n        \r\n                        if (!checkIfThisUserExistUsingItName) {\r\n                            \r\n                           setFilteredData((prevState) => [...prevState, {name: name, profile_picture: profilePicture}])\r\n                        }\r\n        \r\n                     \r\n                    })\r\n        */\n      }).catch(error => {\n        console.log(\"oops! Couldn't reach the server\" + error);\n      });\n    } //setHideConversedWithParentContainer(\"none\")\n    //This shows the filters parent container whenonChange of the input search box\n\n\n    showFilterParentContainerRef();\n  };\n\n  function saveToChatList(nameToSaveToChatList) {\n    if (nameToSaveToChatList) {\n      axios.post(\"http://localhost:4000/saveToChatList\", {\n        loggedInUser: loggedInNameValue,\n        personToSaveToChatList: nameToSaveToChatList\n      }).then(response => {\n        console.log(response.data.result);\n        setConversedWithLists(prevState => [...prevState, response.data.result]);\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  } //THIS USEEFFECT IS USED TO FETCH ALL SAVED CONVERSED WITH LIST ON EVERY PAGE RENDER\n\n\n  useEffect(() => {\n    const gettingLoggedInName = JSON.parse(sessionStorage.getItem(\"username\"));\n\n    if (gettingLoggedInName) {\n      axios.post(\"http://localhost:4000/getMyChatList\", {\n        loggedInUser: gettingLoggedInName\n      }).then(response => {\n        //filtering all the people in my chatlist and then putting it in my conversed with list\n        const c = response.data.filter(item => {\n          return setConversedWithLists(prevState => [...prevState, item.personToSaveToChatList]);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, []);\n  console.log('the' + loggedInNameValue); //THIS WILL BE USED TO ADD SOMEONE TO YOUR CHATLIST WHEN THEY MESSAGE YOU.\n\n  useEffect(() => {\n    if (addUserToChatListValue) {\n      //if conversedWithList have this particular user, change their position\n      //to the top\n      if (conversedWithLists.includes(addUserToChatListValue)) {} //if conversedWithList doesn't include this particular user, add the user\n      //to my chatlist.\n\n\n      if (!conversedWithLists.includes(addUserToChatListValue)) {\n        console.log(addUserToChatListValue); //saving this user to our chatlist database\n\n        saveToChatList(addUserToChatListValue); // setConversedWithLists((prevState) => [...prevState, addUserToChatListValue])\n      }\n    }\n  }, [addUserToChatListValue]); //Getting profile picture for user in converesed list (if they have any in   \n  //the database) when ever they are add to list.\n\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-input-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-input\",\n        onChange: onChangeFunction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FaSistrix, {\n        className: \"search-input-icon\",\n        onClick: searchUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scrollable-chat-list\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filterAndConversewithParentDiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filterParentContainer\",\n          ref: filterParentContainerRef,\n          children: filteredData ? filteredData.map((filter, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filtered-user\",\n            onClick: () => {\n              if (conversedWithLists.includes(filter.name)) {//Here we are saying if the conversedWithLists state have the name\n                //of the filteredData, it shouldn't add to it list but only change\n                //the position of that user to the top.  \n              } else if (!conversedWithLists.includes(filter.name)) {\n                //if user's name is not in our list of converesed with, it should\n                //add it to it.\n                saveToChatList(filter.name);\n              }\n\n              hideFilterParentContainerRef();\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"filteredFlex\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children:\n                /*THIS CHECKS IF FILTERED USER HAS PROFILE PICTURE SO IT CAN BE DISPLAYED\r\n                  CLOSE TO THE NAME AND IF NO, IT SHOULD DISPLAY THE FIRST LETTER THAT \r\n                  BEGINS IT NAME AS THE PICTURE CLOSE TO THE NAME */\n                filter.profile_picture ? /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: filter.profile_picture,\n                  id: \"filtImg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 477,\n                  columnNumber: 54\n                }, this) : /*#__PURE__*/_jsxDEV(\"b\", {\n                  className: \"image-behind-filter-name\",\n                  children: String(filter.name).charAt(0)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 479,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"filterName\",\n                children: filter.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 25\n            }, this)\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 21\n          }, this)) : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"conversation-list-paragraph\",\n          children: \"CONVERSATION LIST...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversedWithParentContainer\",\n          children: conversedWithLists.map((conversedWithList, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversed-user\",\n            onClick: () => {\n              {\n                /*onClick of a user in the chatlist will pass the name of the user to \r\n                the chatbody using the contextapi crafted for OtherUserNameValue*/\n              }\n              setOtherUserNameValue(conversedWithList); //(if on large screen), this will open the messages component \n\n              clickMessage(); //change the position of that user to the top when been clicked. \n\n              const updatedArr = [...conversedWithLists];\n              let indexOfElement = updatedArr.indexOf(conversedWithList);\n\n              if (indexOfElement !== -1) {\n                updatedArr.splice(indexOfElement, 1);\n                updatedArr.unshift(conversedWithList);\n                setConversedWithLists(updatedArr);\n                sessionStorage.setItem(\"modifiedChatList\", JSON.stringify(updatedArr)); // console.log(conversedWithLists)\n              } //Removing from notification list & hiding unread message icon behind it if any.\n\n\n              handleRemovingThisUserFromNotificationList(conversedWithList);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: conversedWithList\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: //Gives an alert like signal icon to indicate unread message\n              notificationValue.includes(conversedWithList) ? /*#__PURE__*/_jsxDEV(\"b\", {\n                ref: unReadRef,\n                children: /*#__PURE__*/_jsxDEV(FaExclamationCircle, {\n                  className: \"unreadMessageIcon\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 571,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 22\n              }, this) : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 21\n            }, this)]\n          }, id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatList, \"W/mDX/th35gzRWBTbv4u87DNmKk=\");\n\n_c = ChatList;\nexport default ChatList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatList\");","map":{"version":3,"names":["useContext","useEffect","useRef","useState","FaExclamationCircle","FaSistrix","axios","OtherUserNameContext","LoggedInNameContext","MessageDisplayContext","ProfileDisplayContext","SettingsDisplayContext","AddUserToChatListContext","NotificationContext","ChatList","scrollableChatListRef","filterParentContainerRef","conversedWithParentContainerRef","unReadRef","hideFilterParentContainerRef","current","style","display","showFilterParentContainerRef","hideConveresedParentContainerRef","handleRemovingThisUserFromNotificationList","thisUser","setNotificationValue","post","loggedInUser","loggedInNameValue","personToRemove","then","result","console","log","data","forEach","resData","prevState","catch","err","setLoggedInNameValue","otherUserNameValue","setOtherUserNameValue","messageDisplayValue","setMessageDisplayValue","profileDisplayValue","setProfileDisplayValue","settingsDisplayValue","setSettingsDisplayValue","addUserToChatListValue","setAddUserToChatListValue","notificationValue","clickMessage","conversedWithLists","setConversedWithLists","filteredData","setFilteredData","searchWord","setSearchWord","onChangeFunction","event","target","value","toLowerCase","searchInput","response","name","profilePicture","profile_picture","checkIfThisUserExistUsingItName","some","object","error","searchUser","saveToChatList","nameToSaveToChatList","personToSaveToChatList","gettingLoggedInName","JSON","parse","sessionStorage","getItem","c","filter","item","includes","map","id","String","charAt","conversedWithList","updatedArr","indexOfElement","indexOf","splice","unshift","setItem","stringify"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatListFolder/ChatList.js"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { FaExclamationCircle, FaSistrix } from \"react-icons/fa\";\r\nimport './ChatList.css';\r\nimport axios from 'axios';\r\nimport { OtherUserNameContext } from \"../contextFolder/OtherUserNameContext\";\r\nimport { LoggedInNameContext } from \"../contextFolder/LoggedInNameContext\";\r\nimport { MessageDisplayContext } from \"../contextFolder/MessageDisplayContext\";\r\nimport { ProfileDisplayContext } from \"../contextFolder/ProfileDisplayContext\";\r\nimport { SettingsDisplayContext } from \"../contextFolder/SettingsDisplayContext\";\r\nimport { AddUserToChatListContext } from \"../contextFolder/AddUserToChatListContext\";\r\nimport { NotificationContext } from \"../contextFolder/NotificationContext\";\r\nfunction ChatList(){\r\n\r\n    //This is to fetch all the registered users in the database\r\n/*\r\n   const [listOfUsersFromDatabase, setListOfUsersFromDatabase] = useState([  ])\r\n   console.log(listOfUsersFromDatabase)\r\n*/\r\n\r\n   //------------ [USEEFFECT FOR THIS COMPONENT] -----------//\r\n\r\n   //THIS FETCHES ALL USERS IN DB ON EVERY RENDER OF PAGE SO THAT THEY CAN BE \r\n   //AVAILABLE FOR SEARCH FILTERING...............\r\n/*\r\n    useEffect(( ) => {\r\n\r\n        axios.get(\"http://localhost:4000/getAllUsers\").then((response) => {\r\n\r\n        setListOfUsersFromDatabase(response.data)\r\n        \r\n        } ).catch ( (error) => {\r\n        \r\n            console.log(\"oops! Couldn't reach the server\" + error)\r\n        \r\n        } )\r\n    }, []);\r\n*/\r\n\r\n\r\n   \r\n\r\n\r\n\r\n        \r\n    \r\n\r\n    //-------- [ OUR USEREF FOR THIS COMPONENT... ] --------//\r\n\r\n    //THIS IS FOR OUR SCROLLABLE CHAT list      \r\n    const scrollableChatListRef = useRef()\r\n\r\n    //THIS IS FOR THE FILTERING OF SEARCH DIV\r\n    const filterParentContainerRef = useRef()\r\n\r\n    //THIS IS FOR THE CONVERSED WITH DIV\r\n    const conversedWithParentContainerRef = useRef()\r\n\r\n    //THIS IF HANDLING HIDING UNREAD MESSAGE ICON\r\n    const unReadRef = useRef()\r\n\r\n\r\n    const hideFilterParentContainerRef = () => {\r\n\r\n        filterParentContainerRef.current.style.display = \"none\"\r\n\r\n        conversedWithParentContainerRef.style.display = \"true\"\r\n\r\n    }\r\n\r\n\r\n    const showFilterParentContainerRef = () => {\r\n\r\n        filterParentContainerRef.current.style.display = \"block\"\r\n\r\n   //     conversedWithParentContainerRef.style.display = \"none\"\r\n\r\n    }\r\n\r\n    const hideConveresedParentContainerRef = () => {\r\n\r\n   //      conversedWithParentContainerRef.style.display = \"hidden\"\r\n\r\n   //      filterParentContainerRef.current.style.display = \"visible\"\r\n\r\n\r\n    }\r\n\r\n    const handleRemovingThisUserFromNotificationList = (thisUser) => {\r\n\r\n        setNotificationValue([]) \r\n\r\n        //Let's check if this user exists in our notification list array and\r\n        //the filter out users that are not the same vaue as this user and\r\n        //then set the state of notification list to be our filtered user\r\n\r\n        axios.post(\"http://localhost:4000/removeThisUserNotification\", {\r\n\r\n            loggedInUser: loggedInNameValue,\r\n\r\n            personToRemove: thisUser\r\n\r\n        }).then((result) => {\r\n\r\n            if (result) {\r\nconsole.log(result.data)\r\n\r\n                result.data.forEach((resData) => {\r\n\r\n                    setNotificationValue((prevState) => [...prevState, ])\r\n                    \r\n                })\r\n\r\n                \r\n \r\n               \r\n            }\r\n            \r\n         \r\n            \r\n        }).catch((err) => {\r\n\r\n            console.log(err)\r\n\r\n        });\r\n/*\r\n        if ( notificationValue.includes(thisUser) ) {\r\n\r\n            const newArray = notificationValue.filter(item => item !== thisUser)\r\n\r\n            setNotificationValue(newArray)\r\n        }\r\n\r\n  */      unReadRef.current.style.display = \"none\";\r\n\r\n    }\r\n\r\n\r\n   \r\n    //---------- [ CONTEXT API FOR THIS FILE... ] ----------//\r\n    const { loggedInNameValue, setLoggedInNameValue } = useContext(LoggedInNameContext)\r\n    const { otherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext) \r\n\r\n    //Displays message component when you click on list of conversed with user\r\n    const { messageDisplayValue, setMessageDisplayValue } = useContext(MessageDisplayContext)\r\n\r\n    const { profileDisplayValue, setProfileDisplayValue } = useContext(ProfileDisplayContext)\r\n    const { settingsDisplayValue, setSettingsDisplayValue } = useContext(SettingsDisplayContext)\r\n\r\n    //adding someone to your chatlist when they message you.\r\n    const { addUserToChatListValue, setAddUserToChatListValue } = useContext(AddUserToChatListContext)\r\n\r\n    //This hold the value for every notification we've. It stores the user that  \r\n    //sent use message and have'nt responded to.\r\n    const { notificationValue, setNotificationValue }  = useContext(NotificationContext)\r\n\r\n    const clickMessage = () => {\r\n        setProfileDisplayValue(false)\r\n        setSettingsDisplayValue(false)\r\n        setMessageDisplayValue(true)\r\n    }\r\n\r\n\r\n\r\n\r\n    /* - - - - - [ALL USESTATE FOR THIS PARTICULAR COMPONENT] - - - - - */\r\n\r\n    //This will help us storing the list of user that we've conversed with\r\n    const [conversedWithLists, setConversedWithLists] = useState([])\r\n\r\n    //This setFilteredData will store the filtered element based on the user\r\n    //search input and then store it in the filteredData variable so we can\r\n    //map it\r\n    const [filteredData, setFilteredData] = useState([{}])\r\n\r\n    //This is used for capturing what the user types into the search box\r\n    const [searchWord, setSearchWord] = useState();\r\n   \r\n\r\n\r\n    /* - - - - - [ALL OUR FUNCTIONS FOR THIS PARTICULAR COMPONENT] - - - - -*/\r\n\r\n    //This is to store what the user type in the search box so we can\r\n    //use for filtering and also filter the name of user in realtime \r\n    //based on serach input\r\n    const onChangeFunction = ( event ) => {\r\n\r\n        //This will grab the value in the user type in the input box and store it in the searchFilter state\r\n        //please note: the toLowerCase() will convert the value to lowercase so that it can match with the\r\n        //lowercase name properties in the database. (we'd convert all name properties in DB to lowercase too)\r\n         setSearchWord(event.target.value.toLowerCase())\r\n        \r\n        //This will filter out users that matches the character inputted by the user in realtime\r\n        //and then store it in the newFilter variable. please note: the toLowerCase() will convert the value of the\r\n        // DB name property to lowercase so that it can match with the value from the search input which we already \r\n        //convertted to lowercase using the toLowercase() method.\r\n    \r\n        //Here we're returning users that their names matches with the value the user is inputting as they\r\n        //are typing it out on the go...\r\n\r\n        if (searchWord) {\r\n       \r\n        axios.post(\"http://localhost:4000/getAllUsers\",{\r\n\r\n            searchInput: searchWord.toLowerCase()\r\n            \r\n\r\n        }).then((response) => {\r\n\r\n            console.log(response.data)\r\n\r\n            response.data.forEach((resData) => {\r\n\r\n                let name = resData.name//resultName;\r\n                let profilePicture = resData.profile_picture//resultProfilePicture;\r\n\r\n                console.log({name: name, profile_picture: profilePicture})\r\n\r\n                //Here let check if filteredData already have this user stored in it already \r\n                //to avoid duplicate display of names that already exist in this array.\r\n                let checkIfThisUserExistUsingItName = filteredData.some((object) => object.name === name);\r\n\r\n\r\n                if (!checkIfThisUserExistUsingItName) {\r\n                    \r\n                   setFilteredData([{name: name, profile_picture: profilePicture}])\r\n                }\r\n\r\n             \r\n            })\r\n\r\n      \r\n        } ).catch ( (error) => {\r\n        \r\n            console.log(\"oops! Couldn't reach the server\" + error)\r\n        \r\n        } )\r\n\r\n    }\r\n\r\n\r\n\r\n        //setHideConversedWithParentContainer(\"none\")\r\n        //This shows the filters parent container whenonChange of the input search box\r\n        showFilterParentContainerRef()\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n   \r\n    //This function is used for getting the user with the name that matches what the user is typed in\r\n    //the search box once they clicked the search button close to the search input box\r\n    const searchUser = () => {\r\n\r\n        \r\n        if (searchWord) {\r\n       \r\n            axios.post(\"http://localhost:4000/getAllUsers\",{\r\n    \r\n                searchInput: searchWord.toLowerCase()\r\n                \r\n    \r\n            }).then((response) => {\r\n    \r\n                console.log(response.data)\r\n    /*\r\n                response.data.forEach((resData) => {\r\n    \r\n                    let name = resData.name;\r\n                    let profilePicture = resData.profile_picture\r\n    \r\n                    console.log({name: name, profile_picture: profilePicture})\r\n    \r\n                    //Here let check if filteredData already have this user stored in it already \r\n                    //to avoid duplicate display of names that already exist in this array.\r\n                    let checkIfThisUserExistUsingItName = filteredData.some((object) => object.name === name);\r\n    \r\n    \r\n                    if (!checkIfThisUserExistUsingItName) {\r\n                        \r\n                       setFilteredData((prevState) => [...prevState, {name: name, profile_picture: profilePicture}])\r\n                    }\r\n    \r\n                 \r\n                })\r\n    */\r\n          \r\n            } ).catch ( (error) => {\r\n            \r\n                console.log(\"oops! Couldn't reach the server\" + error)\r\n            \r\n            } )\r\n    \r\n        }\r\n    \r\n    \r\n    \r\n            //setHideConversedWithParentContainer(\"none\")\r\n            //This shows the filters parent container whenonChange of the input search box\r\n            showFilterParentContainerRef()\r\n    \r\n    \r\n\r\n    }\r\n\r\n\r\n       \r\n    function saveToChatList (nameToSaveToChatList) {\r\n\r\n        if (nameToSaveToChatList) {\r\n\r\n            axios.post(\"http://localhost:4000/saveToChatList\", {\r\n\r\n                loggedInUser:  loggedInNameValue,\r\n\r\n                personToSaveToChatList: nameToSaveToChatList\r\n\r\n            }).then((response) => {\r\n\r\n                console.log(response.data.result)\r\n                setConversedWithLists((prevState) => [...prevState, response.data.result])\r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err)\r\n\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n     //THIS USEEFFECT IS USED TO FETCH ALL SAVED CONVERSED WITH LIST ON EVERY PAGE RENDER\r\n     useEffect(() => {\r\n        const gettingLoggedInName = JSON.parse(sessionStorage.getItem(\"username\"));  \r\n\r\n        if (gettingLoggedInName) { \r\n\r\n        axios.post(\"http://localhost:4000/getMyChatList\", {\r\n\r\n            loggedInUser: gettingLoggedInName\r\n\r\n        }).then((response) => {\r\n\r\n        //filtering all the people in my chatlist and then putting it in my conversed with list\r\n          const c = response.data.filter((item) => {\r\n\r\n            return setConversedWithLists((prevState) => [...prevState, item.personToSaveToChatList])\r\n\r\n          })\r\n\r\n        }).catch((err) => {\r\n\r\n            console.log(err);\r\n\r\n        });\r\n\r\n        }\r\n    \r\n    }, [])\r\n\r\n    console.log('the' + loggedInNameValue)\r\n\r\n\r\n    //THIS WILL BE USED TO ADD SOMEONE TO YOUR CHATLIST WHEN THEY MESSAGE YOU.\r\n    useEffect(() => {\r\n\r\n        if (addUserToChatListValue) {\r\n\r\n            //if conversedWithList have this particular user, change their position\r\n            //to the top\r\n\r\n            if (conversedWithLists.includes(addUserToChatListValue)) {\r\n\r\n            }\r\n\r\n            //if conversedWithList doesn't include this particular user, add the user\r\n            //to my chatlist.\r\n\r\n            if (!conversedWithLists.includes(addUserToChatListValue)) {\r\nconsole.log(addUserToChatListValue)\r\n                //saving this user to our chatlist database\r\n                saveToChatList(addUserToChatListValue)\r\n\r\n               // setConversedWithLists((prevState) => [...prevState, addUserToChatListValue])\r\n            }\r\n\r\n            \r\n        }\r\n\r\n    }, [addUserToChatListValue])\r\n\r\n   //Getting profile picture for user in converesed list (if they have any in   \r\n   //the database) when ever they are add to list.\r\n    useEffect(() => {\r\n      \r\n\r\n    }, [])\r\n\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n \r\n    return(\r\n        <div className=\"chat-list-container\" >\r\n\r\n            {/*This is for the search user's input box*/}\r\n\r\n            <div className=\"search-input-div\">\r\n\r\n                <input type=\"text\" className=\"search-input\" onChange={onChangeFunction}></input>\r\n\r\n               <FaSistrix className=\"search-input-icon\" onClick={searchUser}/>\r\n             \r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"scrollable-chat-list\">\r\n\r\n        \r\n            {/*This is for when user is searching for name. It filters the names available based on\r\n               the user query or search */}\r\n            <div className=\"filterAndConversewithParentDiv\">\r\n\r\n\r\n             <div className=\"filterParentContainer\" ref={filterParentContainerRef} >\r\n\r\n                {  \r\n                    filteredData ?\r\n\r\n                    filteredData.map((filter, id) => ( \r\n\r\n                    <div key={id} className=\"filtered-user\"  onClick={( ) => {\r\n\r\n                        if (conversedWithLists.includes(filter.name)) {\r\n\r\n                        //Here we are saying if the conversedWithLists state have the name\r\n                        //of the filteredData, it shouldn't add to it list but only change\r\n                        //the position of that user to the top.  \r\n                        \r\n    \r\n                        } else if ( !conversedWithLists.includes(filter.name) ){\r\n\r\n                        //if user's name is not in our list of converesed with, it should\r\n                        //add it to it.\r\n\r\n                              saveToChatList(filter.name);\r\n                        }\r\n\r\n                        hideFilterParentContainerRef();\r\n                        \r\n                        }}>\r\n                      \r\n                        <p className=\"filteredFlex\">\r\n\r\n                            <p>\r\n                            { /*THIS CHECKS IF FILTERED USER HAS PROFILE PICTURE SO IT CAN BE DISPLAYED\r\n                                CLOSE TO THE NAME AND IF NO, IT SHOULD DISPLAY THE FIRST LETTER THAT \r\n                                BEGINS IT NAME AS THE PICTURE CLOSE TO THE NAME */\r\n                            \r\n                            filter.profile_picture ? <img src={filter.profile_picture} id=\"filtImg\"/> :\r\n                            \r\n                            <b className=\"image-behind-filter-name\">{ String(filter.name).charAt(0) }</b>\r\n                           \r\n                            \r\n                            }\r\n                            </p>\r\n\r\n                            <p className=\"filterName\">\r\n                                 {filter.name}\r\n                            </p>\r\n                            \r\n                        \r\n                            \r\n\r\n                        </p>\r\n\r\n                    </div>\r\n                    \r\n                    ))\r\n\r\n                        : \"\"\r\n                 }\r\n           \r\n             </div>{/*filterParentContainer CLOSING DIV*/}\r\n\r\n\r\n\r\n\r\n            <p className=\"conversation-list-paragraph\">CONVERSATION LIST...</p>\r\n            \r\n            {/*THIS MAPS WHO YOU HAVE CONVERSED WITH. IT SHOWS ALL THE LIST*/}\r\n            <div className=\"conversedWithParentContainer\">\r\n               { \r\n                conversedWithLists.map((conversedWithList, id) => ( \r\n\r\n                <div key={id}  className=\"conversed-user\" onClick={ ( ) => {\r\n\r\n                   {/*onClick of a user in the chatlist will pass the name of the user to \r\n                    the chatbody using the contextapi crafted for OtherUserNameValue*/} \r\n                  \r\n                    setOtherUserNameValue(conversedWithList);\r\n\r\n                    //(if on large screen), this will open the messages component \r\n                    clickMessage();\r\n\r\n                    //change the position of that user to the top when been clicked. \r\n                    const updatedArr = [...conversedWithLists] \r\n                    let indexOfElement = updatedArr.indexOf(conversedWithList)\r\n\r\n\r\n                    if (indexOfElement !== -1) {\r\n\r\n                        updatedArr.splice(indexOfElement, 1);\r\n\r\n                        updatedArr.unshift(conversedWithList)\r\n\r\n                        setConversedWithLists(updatedArr);\r\n\r\n                        sessionStorage.setItem(\"modifiedChatList\", JSON.stringify(updatedArr))\r\n                       // console.log(conversedWithLists)\r\n\r\n                    }\r\n\r\n                  //Removing from notification list & hiding unread message icon behind it if any.\r\n                  handleRemovingThisUserFromNotificationList(conversedWithList)\r\n\r\n    \r\n                }}>\r\n                    \r\n                <p> \r\n                    { \r\n                    /*THIS CHECKS IF CONVERESEDWITHLIST EXIST, IF YES, SHOW THIS IMAGE BESIDE IT.*/\r\n                   /*    \r\n                    conversedWithList.profile_picture ? <img src={conversedWithList.profile_picture} /> :\r\n\r\n                    <b className=\"image-behind-conversed-name\">{ conversedWithList.charAt(0) }</b> \r\n                 \r\n*/\r\n                    }  \r\n\r\n                        { conversedWithList }\r\n\r\n                    \r\n                    \r\n                        \r\n                    </p>\r\n\r\n                    <p>\r\n                    {\r\n                    \r\n                    //Gives an alert like signal icon to indicate unread message\r\n                     notificationValue.includes(conversedWithList) ? \r\n                     \r\n                     <b ref={unReadRef}><FaExclamationCircle className=\"unreadMessageIcon\"/></b> : \"\"\r\n\r\n                    }\r\n                    </p>\r\n\r\n\r\n                   \r\n                </div>\r\n                \r\n                ))\r\n            }  \r\n\r\n        </div>{/*ConversedwithParentContainer CLOSING DIV*/}\r\n\r\n\r\n\r\n        </div>{/*filterAndConversewithParentDiv CLOSING DIV*/}\r\n\r\n\r\n\r\n\r\n\r\n                    \r\n         </div>{/*SCROLLABLE DIV CLOSING DIV*/}\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatList;"],"mappings":"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"},"metadata":{},"sourceType":"module"}