{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //This state is for the message that will be sent to the \n  //server so it can be emitted.\n  const [text, setText] = useState(''); //This state is what will be mapped and printed on the users UI\n\n  const [messageReceived, setMessageReceived] = useState(''); //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n  const sendMessage = () => {\n    //Here we want to send message to the server to receive so\n    //that it can emit it to other client. After the \"send_message\"\n    //event listener, an object should follow it which will contain\n    //the message data information\n    socket.emit(\"send_message\", {\n      message: text\n    });\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageReceived(data.message);\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"message...\",\n      onChange: e => setText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"send message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 69\n    }, this), messageReceived]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"+SaUIUm7GGpoDkeofzgET4Ho0sg=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["useEffect","useState","io","socket","connect","ChatBody","text","setText","messageReceived","setMessageReceived","sendMessage","emit","message","on","data","e","target","value"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBody.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\nfunction ChatBody(){\r\n    //This state is for the message that will be sent to the \r\n    //server so it can be emitted.\r\n    const [text, setText] = useState('')\r\n\r\n    //This state is what will be mapped and printed on the users UI\r\n    const [messageReceived, setMessageReceived] = useState('')\r\n\r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", {message: text})\r\n    };\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data) => {\r\n            setMessageReceived(data.message) \r\n            \r\n        })\r\n    }, [socket])\r\n\r\n    return(\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"message...\"\r\n                onChange={(e) => setText(e.target.value)}\r\n                ></input>\r\n\r\n                <button onClick={sendMessage}>send message</button> <br></br>\r\n                {messageReceived}\r\n                       \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,EAAP,MAAgB,kBAAhB;;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAACE,OAAH,CAAW,uBAAX,CAAf,C,CAAoD;;AAEpD,SAASC,QAAT,GAAmB;EAAA;;EACf;EACA;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC,CAHe,CAKf;;EACA,MAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,EAAD,CAAtD,CANe,CAQf;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMS,WAAW,GAAG,MAAM;IACtB;IACA;IACA;IACA;IACAP,MAAM,CAACQ,IAAP,CAAY,cAAZ,EAA4B;MAACC,OAAO,EAAEN;IAAV,CAA5B;EACH,CAND,CAde,CAuBf;EACA;EACA;;;EACAN,SAAS,CAAC,MAAM;IACZG,MAAM,CAACU,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAU;MACnCL,kBAAkB,CAACK,IAAI,CAACF,OAAN,CAAlB;IAEH,CAHD;EAIH,CALQ,EAKN,CAACT,MAAD,CALM,CAAT;EAOA,oBACI;IAAA,wBACI;MACI,IAAI,EAAC,MADT;MAEI,WAAW,EAAC,YAFhB;MAGI,QAAQ,EAAGY,CAAD,IAAOR,OAAO,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV;IAH5B;MAAA;MAAA;MAAA;IAAA,QADJ,eAOQ;MAAQ,OAAO,EAAEP,WAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAPR,oBAO4D;MAAA;MAAA;MAAA;IAAA,QAP5D,EAQSF,eART;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAcH;;GA/CQH,Q;;KAAAA,Q;AAiDT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}