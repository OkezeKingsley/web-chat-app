{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBodyFolder\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport notification from './notification.mp3'; //This for the incoming message notification\n\nimport { v4 as uuid } from 'uuid';\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //THIS STATE IS FOR THE MESSAGE THAT WILL BE SENT TO THE SERVER  \n  //SERVER SO IT CAN BE EMITTED.\n  const [text, setText] = useState(''); //THIS STATE IS WHAT WILL BE MAPPED AND PRINTED ON THE USERS UI \n  //const [lists, setLists] = useState([''])\n\n  const [mappingCurrentChats, setMappingCurrentChats] = useState([{}]); //THIS IS FOR DISPLAYING WHEN THE OTHER USER IS TYPING...\n\n  const [userIsTyping, setUserIsTyping] = useState(''); //USEREF...\n  //THIS IS USED TO CHANGE THE VALUE OF INPUT STRING TO AN EMPTY STRING.\n\n  const inputRef = useRef(); //THIS IS FOR OUR SCROLLABLE CHAT BODY      \n\n  const scrollRef = useRef(); //   scrollRef.scrollTop = scrollRef.scrollHeight;\n  //THIS IS THE scrollToBottomAlwaysOnNewMessageRef USEREF\n\n  const scrollToBottomAlwaysOnNewMessageRef = useRef(null); //This sound for an incoming message\n\n  const playNotification = () => {\n    const sound = new Audio(notification);\n    sound.play();\n  }; //OUR USECONTEXT FOR THIS FILE\n\n\n  const {\n    loggedInNameValue,\n    setLoggedInNameValue\n  } = useContext(LoggedInNameContext);\n  const {\n    otherUserNameValue,\n    setOtherUserNameValue\n  } = useContext(OtherUserNameContext); //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE\n\n  const [mappingOldChats, setMappingOldChats] = useState();\n  useEffect(() => {\n    axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\n      from: loggedInNameValue,\n      to: otherUserNameValue\n    }).then(async response => {\n      console.log(response.data);\n      response.data.forEach(responseData => {\n        let dataMessage = responseData.message;\n        console.log(dataMessage);\n      });\n      /*\r\n      setMappingCurrentChats.unshift({ \r\n          \r\n          dataMessage: response.data.message, \r\n          \r\n          id: uuid(),\r\n          \r\n          dataMessageFrom: response.data.from, \r\n          \r\n          dataMessageTo: response.data.to \r\n      }\r\n           )*/\n\n      setMappingOldChats(response.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [otherUserNameValue]); //SAVING MESSAGES TO SESSIONSTORAGE SO IT DOESN'T DISAPPEAR ON PAGE REFRESH\n\n  /*\r\n      useEffect(() => {\r\n  \r\n          sessionStorage.setItem(\"saveMessageOnClient\", JSON.stringify(mappingTheChats));\r\n          \r\n      }, [mappingTheChats]);\r\n  \r\n  \r\n      \r\n      useEffect(() => {\r\n  \r\n          let storedMessageData = JSON.parse(sessionStorage.getItem(\"saveMessageOnClient\"));\r\n  \r\n          if (storedMessageData) {\r\n  \r\n              console.log(typeof storedMessageData);\r\n              setMappingTheChats(storedMessageData)\r\n  \r\n          }\r\n  \r\n      }, []);\r\n  */\n  //SAVING THE NAME OF OTHER USER IN SESSION STORAGE\n\n  useEffect(() => {\n    if (otherUserNameValue) {\n      sessionStorage.setItem(\"otherUserName\", JSON.stringify(otherUserNameValue));\n    }\n  }, [otherUserNameValue]);\n  useEffect(() => {\n    let storedOtherUserNameData = JSON.parse(sessionStorage.getItem(\"otherUserName\"));\n\n    if (storedOtherUserNameData) {\n      setOtherUserNameValue(storedOtherUserNameData);\n    }\n  }, []); //This is used to delete a message when the trashcan is\n  //clicked on.\n\n  /*\r\n  const messageDelete = (id) => {\r\n      const newMappingCurrentChat = mappingCurrentChats.filter(l => l.id !== id)\r\n      setMappingCurrentChats(newMappingCurrentChat)\r\n  }*/\n  //HANDLING WHEN OTHER USER IS TYPING . . .\n  //This will be used to dictect when the other user is typing...\n  //and then it will send the ('typing') message\n  //to the other user connected in the socket server.\n\n  const handleTyping = () => {\n    socket.emit('typing', {\n      typingNotification: 'typing...',\n      userNameTyping: loggedInNameValue,\n      userNameReceivingTyping: otherUserNameValue\n    });\n  }; //This will involke when the other user is not typing or they\n  //just got off the input box\n\n\n  const handleNotTyping = () => {\n    socket.emit('notTyping', ' ');\n  }; //This emits the username of the logged in user to the server once login successful\n  //so that it can assign a socket id to the login user\n\n\n  useEffect(() => {\n    if (loggedInNameValue) {\n      socket.emit(\"username\", {\n        username: loggedInNameValue\n      });\n    }\n  }, [socket]); //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n  const sendMessage = () => {\n    if (loggedInNameValue) {\n      //Here we want to send message to the server to receive so\n      //that it can emit it to other client. After the \"send_message\"\n      //event listener, an object should follow it which will contain\n      //the message data information\n      socket.emit(\"send_message\", {\n        message: text,\n        from: loggedInNameValue,\n        to: otherUserNameValue\n      }); //This is used to change the value of the input to empty string\n      //when the send button is clicked\n\n      inputRef.current.value = \" \";\n      setText(' ');\n    } else {\n      alert('Unable to read your name. Try logging out and logging in again. Thank you!');\n    }\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      //The (data.message) below holds the message property value received from the server and\n      //we give each message a random unique ID so that we can do stuff like\n      //deleteing the message using it unique ID etc...\n      const [m, f, t, i] = [data.message, data.from, data.to, uuid()];\n\n      if (loggedInNameValue && otherUserNameValue) {\n        setMappingCurrentChats(prevState => [...prevState, {\n          dataMessage: m,\n          id: i,\n          dataMessageFrom: f,\n          dataMessageTo: t\n        }]); //This says whenever someone send you a message and the value of the otherUserName is not assinged\n        //as the person sending you the message, the message should not display. This is so so as to prevent\n        //message classhing with other user when chatting with them.\n\n        if (f !== loggedInNameValue && f !== otherUserNameValue && t === loggedInNameValue) {\n          setMappingCurrentChats(prevState => [...prevState, {\n            dataMessage: ' ',\n            id: i,\n            dataMessageFrom: f,\n            dataMessageTo: t\n          }]);\n        }\n      }\n    });\n  }, [socket, loggedInNameValue, otherUserNameValue]); //This useEffect handles when the other user is typing.\n  //it receive the information from the server so\n  //we can display it on the front end.\n\n  useEffect(() => {\n    socket.on(\"isTyping\", data => {\n      setUserIsTyping(data.typingNotification);\n      console.log(userIsTyping);\n    });\n  }, [socket]); //This useEffect handles when  the other user is not typing.\n  //it will emit an empty string\n\n  useEffect(() => {\n    socket.on(\"isNotTyping\", data => {\n      setUserIsTyping(data);\n    });\n  }, [socket]); //scroll effect\n\n  useEffect(() => {\n    var _scrollToBottomAlways;\n\n    //This will make sure the bottom image is always shown when new message enters.\n    (_scrollToBottomAlways = scrollToBottomAlwaysOnNewMessageRef.current) === null || _scrollToBottomAlways === void 0 ? void 0 : _scrollToBottomAlways.scrollIntoView(false);\n  }, [mappingCurrentChats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"5px solid black\",\n      paddingBottom: \"800px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatNav\",\n      children: [\"Your conversation with:  \", otherUserNameValue ? otherUserNameValue : \"\", \" \", \" \", userIsTyping]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll\",\n      ref: scrollRef,\n      children: [mappingOldChats.map((mappingOldChat, id) => mappingOldChat.from === loggedInNameValue ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fromListMessageData\",\n        children: mappingOldChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toListMessageData\",\n        children: mappingOldChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 25\n      }, this)), mappingCurrentChats.map((mappingCurrentChat, id) => mappingCurrentChat.dataMessageFrom === loggedInNameValue ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fromListMessageData\",\n        children: mappingCurrentChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toListMessageData\",\n        children: mappingCurrentChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 29\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: scrollToBottomAlwaysOnNewMessageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"message...\",\n        onChange: e => setText(e.target.value) //This is to store what user write inside the text variable\n        ,\n        className: \"text\",\n        ref: inputRef,\n        onMouseEnter: handleTyping,\n        onMouseLeave: handleNotTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n          onClick: sendMessage,\n          className: \"txt-btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"H4aoTM+C+quPNYpmjEAB3bGvmew=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["notification","v4","uuid","FaTelegramPlane","FaTrash","useContext","useEffect","useRef","useState","io","LoggedInNameContext","OtherUserNameContext","axios","socket","connect","ChatBody","text","setText","mappingCurrentChats","setMappingCurrentChats","userIsTyping","setUserIsTyping","inputRef","scrollRef","scrollToBottomAlwaysOnNewMessageRef","playNotification","sound","Audio","play","loggedInNameValue","setLoggedInNameValue","otherUserNameValue","setOtherUserNameValue","mappingOldChats","setMappingOldChats","post","from","to","then","response","console","log","data","forEach","responseData","dataMessage","message","catch","err","sessionStorage","setItem","JSON","stringify","storedOtherUserNameData","parse","getItem","handleTyping","emit","typingNotification","userNameTyping","userNameReceivingTyping","handleNotTyping","username","sendMessage","current","value","alert","on","m","f","t","i","prevState","id","dataMessageFrom","dataMessageTo","scrollIntoView","border","paddingBottom","map","mappingOldChat","mappingCurrentChat","e","target"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBodyFolder/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport notification from './notification.mp3'//This for the incoming message notification\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa'\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\r\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\r\nimport axios from 'axios';\r\n\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\n\r\nfunction ChatBody(){\r\n\r\n    //THIS STATE IS FOR THE MESSAGE THAT WILL BE SENT TO THE SERVER  \r\n    //SERVER SO IT CAN BE EMITTED.\r\n    const [text, setText] = useState('')\r\n\r\n\r\n    //THIS STATE IS WHAT WILL BE MAPPED AND PRINTED ON THE USERS UI \r\n    //const [lists, setLists] = useState([''])\r\n    const [mappingCurrentChats, setMappingCurrentChats] = useState([{}])  \r\n\r\n\r\n    //THIS IS FOR DISPLAYING WHEN THE OTHER USER IS TYPING...\r\n    const[userIsTyping, setUserIsTyping] = useState('')\r\n\r\n\r\n\r\n\r\n\r\n    //USEREF...\r\n\r\n    //THIS IS USED TO CHANGE THE VALUE OF INPUT STRING TO AN EMPTY STRING.\r\n    const inputRef = useRef()\r\n\r\n\r\n    //THIS IS FOR OUR SCROLLABLE CHAT BODY      \r\n    const scrollRef = useRef()\r\n    //   scrollRef.scrollTop = scrollRef.scrollHeight;\r\n    \r\n  \r\n    //THIS IS THE scrollToBottomAlwaysOnNewMessageRef USEREF\r\n    const scrollToBottomAlwaysOnNewMessageRef = useRef(null)\r\n\r\n\r\n   \r\n    //This sound for an incoming message\r\n    const playNotification = () => {\r\n    const sound = new Audio(notification); \r\n    sound.play()\r\n    }\r\n   \r\n    //OUR USECONTEXT FOR THIS FILE\r\n    const { loggedInNameValue, setLoggedInNameValue } = useContext(LoggedInNameContext) \r\n\r\n    const { otherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext)\r\n\r\n\r\n\r\n    //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE\r\n    const [mappingOldChats, setMappingOldChats] = useState()\r\n    useEffect(() => {\r\n\r\n       axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n\r\n       from: loggedInNameValue,\r\n\r\n       to: otherUserNameValue\r\n\r\n    }).then(async (response) => {\r\n        console.log(response.data)\r\n        response.data.forEach((responseData) => {\r\n        \r\n            let dataMessage = responseData.message\r\n            console.log(dataMessage)\r\n            \r\n            \r\n        })\r\n        /*\r\n        setMappingCurrentChats.unshift({ \r\n            \r\n            dataMessage: response.data.message, \r\n            \r\n            id: uuid(),\r\n            \r\n            dataMessageFrom: response.data.from, \r\n            \r\n            dataMessageTo: response.data.to \r\n        }\r\n   \r\n        )*/\r\n        setMappingOldChats(response.data)\r\n\r\n    }).catch((err) => {\r\n\r\n        console.log(err)\r\n        \r\n    })\r\n    \r\n    }, [otherUserNameValue]);\r\n\r\n\r\n    //SAVING MESSAGES TO SESSIONSTORAGE SO IT DOESN'T DISAPPEAR ON PAGE REFRESH\r\n/*\r\n    useEffect(() => {\r\n\r\n        sessionStorage.setItem(\"saveMessageOnClient\", JSON.stringify(mappingTheChats));\r\n        \r\n    }, [mappingTheChats]);\r\n\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        let storedMessageData = JSON.parse(sessionStorage.getItem(\"saveMessageOnClient\"));\r\n\r\n        if (storedMessageData) {\r\n\r\n            console.log(typeof storedMessageData);\r\n            setMappingTheChats(storedMessageData)\r\n\r\n        }\r\n\r\n    }, []);\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n    //SAVING THE NAME OF OTHER USER IN SESSION STORAGE\r\n    useEffect(() => {\r\n\r\n        if (otherUserNameValue) {  \r\n\r\n        sessionStorage.setItem(\"otherUserName\", JSON.stringify(otherUserNameValue))\r\n\r\n\r\n        }\r\n\r\n\r\n    }, [otherUserNameValue])\r\n\r\n    useEffect(() => {\r\n\r\n        let storedOtherUserNameData = JSON.parse(sessionStorage.getItem(\"otherUserName\"))\r\n\r\n        if (storedOtherUserNameData) {\r\n\r\n            setOtherUserNameValue(storedOtherUserNameData)\r\n\r\n        }\r\n\r\n    }, []);\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n    //This is used to delete a message when the trashcan is\r\n    //clicked on.\r\n    /*\r\n    const messageDelete = (id) => {\r\n        const newMappingCurrentChat = mappingCurrentChats.filter(l => l.id !== id)\r\n        setMappingCurrentChats(newMappingCurrentChat)\r\n    }*/\r\n\r\n\r\n    //HANDLING WHEN OTHER USER IS TYPING . . .\r\n    //This will be used to dictect when the other user is typing...\r\n    //and then it will send the ('typing') message\r\n    //to the other user connected in the socket server.\r\n    const handleTyping = () => {\r\n\r\n        socket.emit('typing', {\r\n\r\n            typingNotification: 'typing...', \r\n\r\n            userNameTyping: loggedInNameValue, \r\n\r\n            userNameReceivingTyping: otherUserNameValue\r\n        })\r\n    }\r\n\r\n\r\n    //This will involke when the other user is not typing or they\r\n    //just got off the input box\r\n    const handleNotTyping = () => {\r\n        socket.emit('notTyping', ' ')\r\n    }\r\n\r\n\r\n        \r\n    //This emits the username of the logged in user to the server once login successful\r\n    //so that it can assign a socket id to the login user\r\n    useEffect(() => {\r\n        \r\n        if (loggedInNameValue) {\r\n\r\n            socket.emit(\"username\", { username: loggedInNameValue } );\r\n\r\n        }\r\n\r\n    }, [socket])\r\n   \r\n\r\n\r\n    \r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n\r\n        if (loggedInNameValue) { \r\n\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", { message: text, from: loggedInNameValue, to: otherUserNameValue })\r\n\r\n        //This is used to change the value of the input to empty string\r\n        //when the send button is clicked\r\n        inputRef.current.value = \" \";\r\n        setText(' '); \r\n\r\n        } else {\r\n\r\n            alert('Unable to read your name. Try logging out and logging in again. Thank you!')\r\n\r\n        }  \r\n       \r\n       \r\n    };\r\n\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n\r\n        socket.on(\"receive_message\", (data)  => {  \r\n           \r\n        //The (data.message) below holds the message property value received from the server and\r\n        //we give each message a random unique ID so that we can do stuff like\r\n        //deleteing the message using it unique ID etc...\r\n\r\n        const [m, f, t, i] = [data.message, data.from, data.to, uuid()]\r\n   \r\n         if (loggedInNameValue && otherUserNameValue){ \r\n\r\n        setMappingCurrentChats((prevState) => [...prevState, { dataMessage: m, id: i, dataMessageFrom: f, dataMessageTo: t } ]);\r\n\r\n\r\n        //This says whenever someone send you a message and the value of the otherUserName is not assinged\r\n        //as the person sending you the message, the message should not display. This is so so as to prevent\r\n        //message classhing with other user when chatting with them.\r\n        if (f !== loggedInNameValue && f !== otherUserNameValue && t === loggedInNameValue) {\r\n\r\n            setMappingCurrentChats((prevState) => [...prevState, { dataMessage: ' ', id: i, dataMessageFrom: f, dataMessageTo: t } ]);\r\n    \r\n         }    \r\n\r\n\r\n        }\r\n\r\n      \r\n        });\r\n\r\n    }, [socket, loggedInNameValue, otherUserNameValue])\r\n\r\n \r\n\r\n    //This useEffect handles when the other user is typing.\r\n    //it receive the information from the server so\r\n    //we can display it on the front end.\r\n\r\n    useEffect(() =>{\r\n\r\n        socket.on(\"isTyping\", (data) => {\r\n          \r\n            setUserIsTyping(data.typingNotification) \r\n            console.log(userIsTyping)\r\n\r\n        })\r\n        \r\n\r\n    }, [socket])\r\n\r\n\r\n     //This useEffect handles when  the other user is not typing.\r\n     //it will emit an empty string\r\n     useEffect(() => {\r\n        socket.on(\"isNotTyping\", (data) => {\r\n            setUserIsTyping(data)\r\n        })\r\n     }, [socket])\r\n\r\n\r\n\r\n     //scroll effect\r\n     useEffect(() => {\r\n  //This will make sure the bottom image is always shown when new message enters.\r\n  scrollToBottomAlwaysOnNewMessageRef.current?.scrollIntoView(false)\r\n        \r\n    }, [mappingCurrentChats])\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div style={{border:\"5px solid black\", paddingBottom: \"800px\"}}>\r\n          \r\n            <div className=\"chatNav\">\r\n                Your conversation with:  {otherUserNameValue ? otherUserNameValue : \"\"} {} {userIsTyping}\r\n            </div>\r\n \r\n\r\n            <div className=\"scroll\" ref={scrollRef} >\r\n\r\n\r\n                {/*THIS IS FOR MAPPING OLD/HISTORY CHATS BETWEEN USERS CHATTING*/}\r\n\r\n                {\r\n                mappingOldChats.map((mappingOldChat, id) => \r\n\r\n                mappingOldChat.from === loggedInNameValue ? (  \r\n\r\n                        <div key={id} className=\"fromListMessageData\">\r\n\r\n                        {mappingOldChat.dataMessage}\r\n\r\n                        </div>\r\n                                    \r\n\r\n                ) : (\r\n\r\n                        <div key={id} className=\"toListMessageData\">\r\n\r\n                        {mappingOldChat.dataMessage}\r\n\r\n                        </div>\r\n\r\n                )\r\n\r\n                )        \r\n\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                {/*THIS IS FOR MAPPING CUREENT CHATS BETWEEN USERS CHATTING*/}\r\n                     \r\n                {mappingCurrentChats.map((mappingCurrentChat, id) => \r\n\r\n                    mappingCurrentChat.dataMessageFrom === loggedInNameValue ? (  \r\n\r\n                            <div key={id} className=\"fromListMessageData\">\r\n\r\n                               {mappingCurrentChat.dataMessage}\r\n\r\n                            </div>\r\n                                         \r\n\r\n                    ) : (\r\n\r\n                            <div key={id} className=\"toListMessageData\">\r\n\r\n                               {mappingCurrentChat.dataMessage}\r\n\r\n                            </div>\r\n\r\n                    )\r\n\r\n                    )        \r\n        \r\n                }\r\n\r\n\r\n        <div ref={scrollToBottomAlwaysOnNewMessageRef} />\r\n        \r\n               \r\n            </div>\r\n\r\n\r\n            <div className=\"text-box\">\r\n\r\n                <input type=\"text\" placeholder=\"message...\" \r\n\r\n                onChange={(e) => setText(e.target.value)} //This is to store what user write inside the text variable\r\n\r\n                className=\"text\"\r\n\r\n                ref={inputRef}\r\n\r\n                onMouseEnter={handleTyping}\r\n\r\n                onMouseLeave={handleNotTyping}\r\n         \r\n                />\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                {/* <button onClick={sendMessage} className=\"txt-btn\">send message</button> */} \r\n                <div>\r\n                     <FaTelegramPlane onClick={sendMessage} className=\"txt-btn\"/>\r\n                </div> \r\n                \r\n            </div>\r\n             \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":"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"},"metadata":{},"sourceType":"module"}