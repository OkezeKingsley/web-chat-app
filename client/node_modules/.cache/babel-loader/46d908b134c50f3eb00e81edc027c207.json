{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBodyFolder\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport notification from './notification.mp3'; //This for the incoming message notification\n\nimport { v4 as uuid } from 'uuid';\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\nimport axios from 'axios';\nimport { CreateRoomContext } from '../contextFolder/CreateRoomContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //This state is for the message that will be sent to the \n  //server so it can be emitted.\n  const [text, setText] = useState(''); //This state is what will be mapped and printed on the users UI  \n  //const [lists, setLists] = useState([''])\n\n  const [mappingTheChats, setMappingTheChats] = useState([{}]); //This is for displaying when the other user is typing...\n\n  const [userIsTyping, setUserIsTyping] = useState(''); //USEREF...\n  //This is used to change the value of the input to empty string\n\n  const inputRef = useRef(); //This is for our scrollable chat body\n\n  const scrollRef = useRef(); //   scrollRef.scrollTop = scrollRef.scrollHeight;\n  //This is the scrollToBottomAlwaysOnNewMessageRef\n\n  const scrollToBottomAlwaysOnNewMessageRef = useRef(null); //This sound for an incoming message\n\n  const playNotification = () => {\n    const sound = new Audio(notification);\n    sound.play();\n  }; //Our useConetext for this file\n\n\n  const {\n    loggedInNameValue,\n    setLoggedInNameValue\n  } = useContext(LoggedInNameContext);\n  const {\n    otherUserNameValue,\n    setOtherUserNameValue\n  } = useContext(OtherUserNameContext); //fetching old chats with OtherUserNameValue\n\n  /*\r\n  axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n       from: loggedInNameValue,\r\n       to: OtherUserNameValue\r\n    }).then((response) => {\r\n        console.log(response)\r\n    }).catch((err) => {\r\n        console.log(err)\r\n      \r\n  })\r\n  */\n  //This is to detect when the user you are chatting with name change\n\n  const [room, setRoom] = use;\n\n  function func(id1, id2) {\n    console.log(id1, id2);\n\n    if (id1, id2) {\n      //swap two values\n      let temp = id2;\n      id2 = id1;\n      id1 = temp;\n    }\n\n    let calRoom = id1.toString(10).padStart(10, \"0\") + id2.toString(10).padStart(10, \"0\");\n    setRoom(calRoom);\n  }\n\n  useEffect(() => {\n    console.log('name changed to: ' + otherUserNameValue);\n\n    if (otherUserNameValue) {\n      func(loggedInNameValue.length, otherUserNameValue.length);\n    }\n  }, [otherUserNameValue]); //This is used to delete a message when the trashcan is\n  //clicked on.\n\n  const messageDelete = id => {\n    const newMappingTheChat = mappingTheChats.filter(l => l.id !== id);\n    setMappingTheChats(newMappingTheChat);\n  }; //This will be used to dictect when the other user is typing...\n  //and then it will send the ('typing') message\n  //to the other user connected in the socket server.\n\n\n  const handleTyping = () => {\n    socket.emit('typing', {\n      typingNotification: 'typing...',\n      userNameTyping: loggedInNameValue,\n      userNameReceivingTyping: otherUserNameValue\n    });\n  }; //This will involke when the other user is not typing or they\n  //just got off the input box\n\n\n  const handleNotTyping = () => {\n    socket.emit('notTyping', ' ');\n  }; //This emits the username of the logged in user to the server once login successful\n  //so that it can assign a socket id to the login user\n\n\n  useEffect(() => {\n    if (loggedInNameValue) {\n      socket.emit(\"username\", {\n        username: loggedInNameValue\n      });\n    }\n  }, [socket]); //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n  const sendMessage = () => {\n    //Here we want to send message to the server to receive so\n    //that it can emit it to other client. After the \"send_message\"\n    //event listener, an object should follow it which will contain\n    //the message data information\n    socket.emit(\"send_message\", {\n      message: text,\n      from: loggedInNameValue,\n      to: otherUserNameValue\n    }); //This is used to change the value of the input to empty string\n    //when the send button is clicked\n    // inputRef.current.value = \" \";\n    // setText(' '); remove the comment from this line of code, this code is important\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      console.log(data); //The (data.message) below holds the message property value received from the server and\n      //we give each message a random unique ID so that we can do stuff like\n      //deleteing the message using it unique ID etc...\n\n      const [m, f, t, i] = [data.message, data.from, data.to, uuid()];\n      setMappingTheChats(prevState => [...prevState, {\n        dataMessage: m,\n        id: i,\n        dataMessageFrom: f,\n        dataMessageTo: t\n      }]); //This gives a notification alert when a message comes in...\n      // playNotification()      \n    });\n  }, [socket]); //This useEffect handles when the other user is typing.\n  //it receive the information from the server so\n  //we can display it on the front end.\n\n  useEffect(() => {\n    socket.on(\"isTyping\", data => {\n      setUserIsTyping(data.typingNotification);\n      console.log(userIsTyping);\n    });\n  }, [socket]); //This useEffect handles when  the other user is not typing.\n  //it will emit an empty string\n\n  useEffect(() => {\n    socket.on(\"isNotTyping\", data => {\n      setUserIsTyping(data);\n    });\n  }, [socket]); //scroll effect\n\n  useEffect(() => {\n    var _scrollToBottomAlways;\n\n    //This will make sure the bottom image is always shown when new message enters.\n    (_scrollToBottomAlways = scrollToBottomAlwaysOnNewMessageRef.current) === null || _scrollToBottomAlways === void 0 ? void 0 : _scrollToBottomAlways.scrollIntoView(false);\n  }, [mappingTheChats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"5px solid black\",\n      paddingBottom: \"800px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatNav\",\n      children: [\"Your conversation with:  \", otherUserNameValue, \" \", \" \", userIsTyping]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll\",\n      ref: scrollRef,\n      children: [mappingTheChats.map((mappingTheChat, id) => mappingTheChat.dataMessageFrom === loggedInNameValue ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fromListMessageData\",\n        children: mappingTheChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toListMessageData\",\n        children: mappingTheChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 29\n      }, this)\n      /* This is to check if someone is sending to you and the person is not\r\n         the value for otherUserNameValue */\n      ), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: scrollToBottomAlwaysOnNewMessageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"message...\",\n        onChange: e => setText(e.target.value) //This is to store what user write inside the text variable\n        ,\n        className: \"text\",\n        ref: inputRef,\n        onMouseEnter: handleTyping,\n        onMouseLeave: handleNotTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n          onClick: sendMessage,\n          className: \"txt-btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"4yFt1rzY8tXBxix+cVP+0mLtGQA=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["notification","v4","uuid","FaTelegramPlane","FaTrash","useContext","useEffect","useRef","useState","io","LoggedInNameContext","OtherUserNameContext","axios","CreateRoomContext","socket","connect","ChatBody","text","setText","mappingTheChats","setMappingTheChats","userIsTyping","setUserIsTyping","inputRef","scrollRef","scrollToBottomAlwaysOnNewMessageRef","playNotification","sound","Audio","play","loggedInNameValue","setLoggedInNameValue","otherUserNameValue","setOtherUserNameValue","room","setRoom","use","func","id1","id2","console","log","temp","calRoom","toString","padStart","length","messageDelete","id","newMappingTheChat","filter","l","handleTyping","emit","typingNotification","userNameTyping","userNameReceivingTyping","handleNotTyping","username","sendMessage","message","from","to","on","data","m","f","t","i","prevState","dataMessage","dataMessageFrom","dataMessageTo","current","scrollIntoView","border","paddingBottom","map","mappingTheChat","e","target","value"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBodyFolder/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport notification from './notification.mp3'//This for the incoming message notification\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa'\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\r\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\r\nimport axios from 'axios';\r\nimport { CreateRoomContext } from '../contextFolder/CreateRoomContext';\r\n\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\n\r\nfunction ChatBody(){\r\n\r\n    //This state is for the message that will be sent to the \r\n    //server so it can be emitted.\r\n    const [text, setText] = useState('')\r\n\r\n\r\n    //This state is what will be mapped and printed on the users UI  \r\n    //const [lists, setLists] = useState([''])\r\n    const [mappingTheChats, setMappingTheChats] = useState([{}])  \r\n\r\n\r\n    //This is for displaying when the other user is typing...\r\n    const[userIsTyping, setUserIsTyping] = useState('')\r\n\r\n\r\n\r\n\r\n\r\n    //USEREF...\r\n\r\n    //This is used to change the value of the input to empty string\r\n    const inputRef = useRef()\r\n\r\n\r\n    //This is for our scrollable chat body\r\n    const scrollRef = useRef()\r\n    //   scrollRef.scrollTop = scrollRef.scrollHeight;\r\n    \r\n  \r\n    //This is the scrollToBottomAlwaysOnNewMessageRef\r\n    const scrollToBottomAlwaysOnNewMessageRef = useRef(null)\r\n\r\n\r\n\r\n    \r\n   \r\n    //This sound for an incoming message\r\n   const playNotification = () => {\r\n    const sound = new Audio(notification); \r\n    sound.play()\r\n    }\r\n   \r\n    //Our useConetext for this file\r\n    const { loggedInNameValue, setLoggedInNameValue } = useContext(LoggedInNameContext) \r\n\r\n    const { otherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext)\r\n\r\n\r\n\r\n    //fetching old chats with OtherUserNameValue\r\n    /*\r\n    axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n\r\n       from: loggedInNameValue,\r\n\r\n       to: OtherUserNameValue\r\n\r\n    }).then((response) => {\r\n\r\n        console.log(response)\r\n\r\n    }).catch((err) => {\r\n\r\n        console.log(err)\r\n        \r\n    })\r\n    */\r\n\r\n    //This is to detect when the user you are chatting with name change\r\n    const [room, setRoom] = use\r\n    function func (id1, id2) {\r\n        \r\n        console.log(id1, id2)\r\n        if ( id1, id2) {\r\n            //swap two values\r\n            let temp = id2;\r\n            id2 = id1;\r\n            id1 = temp;\r\n\r\n        }\r\n        let calRoom = id1.toString(10).padStart(10, \"0\") + id2.toString(10).padStart(10, \"0\")\r\n        setRoom(calRoom)\r\n    }\r\n        \r\n\r\n    useEffect(() => {\r\n        console.log('name changed to: ' + otherUserNameValue)\r\n\r\n        if (otherUserNameValue) {\r\n            func(loggedInNameValue.length, otherUserNameValue.length)\r\n        }\r\n        \r\n       \r\n    }, [otherUserNameValue])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //This is used to delete a message when the trashcan is\r\n    //clicked on.\r\n    const messageDelete = (id) => {\r\n        const newMappingTheChat = mappingTheChats.filter(l => l.id !== id)\r\n        setMappingTheChats(newMappingTheChat)\r\n    }\r\n\r\n\r\n\r\n    //This will be used to dictect when the other user is typing...\r\n    //and then it will send the ('typing') message\r\n    //to the other user connected in the socket server.\r\n    const handleTyping = () => {\r\n\r\n        socket.emit('typing', {\r\n\r\n            typingNotification: 'typing...', \r\n\r\n            userNameTyping: loggedInNameValue, \r\n\r\n            userNameReceivingTyping: otherUserNameValue\r\n        })\r\n    }\r\n\r\n\r\n    //This will involke when the other user is not typing or they\r\n    //just got off the input box\r\n    const handleNotTyping = () => {\r\n        socket.emit('notTyping', ' ')\r\n    }\r\n\r\n\r\n        \r\n    //This emits the username of the logged in user to the server once login successful\r\n    //so that it can assign a socket id to the login user\r\n    useEffect(() => {\r\n        \r\n        if (loggedInNameValue) {\r\n\r\n            socket.emit(\"username\", { username: loggedInNameValue } );\r\n\r\n        }\r\n\r\n    }, [socket])\r\n   \r\n\r\n\r\n    \r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", {message: text, from: loggedInNameValue, to: otherUserNameValue })\r\n\r\n        //This is used to change the value of the input to empty string\r\n        //when the send button is clicked\r\n       // inputRef.current.value = \" \";\r\n       // setText(' '); remove the comment from this line of code, this code is important\r\n\r\n       \r\n       \r\n    };\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n\r\n        socket.on(\"receive_message\", (data)  => {  \r\n            console.log(data)   \r\n        //The (data.message) below holds the message property value received from the server and\r\n        //we give each message a random unique ID so that we can do stuff like\r\n        //deleteing the message using it unique ID etc...\r\n\r\n        const [m, f, t, i] = [data.message, data.from, data.to, uuid()]\r\n        \r\n\r\n      setMappingTheChats((prevState) => [...prevState, { dataMessage: m, id: i, dataMessageFrom: f, dataMessageTo: t } ]);\r\n   \r\n\r\n\r\n     \r\n\r\n\r\n\r\n\r\n                     \r\n        //This gives a notification alert when a message comes in...\r\n       // playNotification()      \r\n \r\n        })\r\n    }, [socket])\r\n\r\n\r\n\r\n    //This useEffect handles when the other user is typing.\r\n    //it receive the information from the server so\r\n    //we can display it on the front end.\r\n\r\n    useEffect(() =>{\r\n\r\n        socket.on(\"isTyping\", (data) => {\r\n          \r\n            setUserIsTyping(data.typingNotification) \r\n            console.log(userIsTyping)\r\n\r\n        })\r\n        \r\n\r\n    }, [socket])\r\n\r\n\r\n     //This useEffect handles when  the other user is not typing.\r\n     //it will emit an empty string\r\n     useEffect(() => {\r\n        socket.on(\"isNotTyping\", (data) => {\r\n            setUserIsTyping(data)\r\n        })\r\n     }, [socket])\r\n\r\n\r\n\r\n     //scroll effect\r\n     useEffect(() => {\r\n  //This will make sure the bottom image is always shown when new message enters.\r\n  scrollToBottomAlwaysOnNewMessageRef.current?.scrollIntoView(false)\r\n        \r\n    }, [mappingTheChats])\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div style={{border:\"5px solid black\", paddingBottom: \"800px\"}}>\r\n            <div className=\"chatNav\">\r\n                Your conversation with:  {otherUserNameValue} {} {userIsTyping}\r\n            </div>\r\n \r\n\r\n            <div className=\"scroll\" ref={scrollRef} >\r\n                     \r\n                {mappingTheChats.map((mappingTheChat, id) => \r\n\r\n                    mappingTheChat.dataMessageFrom === loggedInNameValue ? (  \r\n\r\n                            <div key={id} className=\"fromListMessageData\">\r\n\r\n                               {mappingTheChat.dataMessage}\r\n\r\n                            </div>\r\n                                         \r\n\r\n                    ) : (\r\n\r\n                            <div key={id} className=\"toListMessageData\">\r\n\r\n                               {mappingTheChat.dataMessage}\r\n\r\n                            </div>\r\n                                         \r\n    \r\n\r\n                    )\r\n\r\n\r\n                    /* This is to check if someone is sending to you and the person is not\r\n                       the value for otherUserNameValue */\r\n\r\n\r\n                                     \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    \r\n                    \r\n                    )        \r\n\r\n\r\n\r\n        \r\n                }\r\n\r\n\r\n        <div ref={scrollToBottomAlwaysOnNewMessageRef} />\r\n        \r\n               \r\n            </div>\r\n\r\n\r\n            <div className=\"text-box\">\r\n\r\n                <input type=\"text\" placeholder=\"message...\" \r\n\r\n                onChange={(e) => setText(e.target.value)} //This is to store what user write inside the text variable\r\n\r\n                className=\"text\"\r\n\r\n                ref={inputRef}\r\n\r\n                onMouseEnter={handleTyping}\r\n\r\n                onMouseLeave={handleNotTyping}\r\n         \r\n                />\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                {/* <button onClick={sendMessage} className=\"txt-btn\">send message</button> */} \r\n                <div>\r\n                     <FaTelegramPlane onClick={sendMessage} className=\"txt-btn\"/>\r\n                </div> \r\n                \r\n            </div>\r\n             \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":"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"},"metadata":{},"sourceType":"module"}