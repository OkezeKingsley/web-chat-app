{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\assest\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n  const sendMessage = () => {\n    //Here we want to send message to the server to receive so\n    //that it can emit it to other client. After the \"send_message\"\n    //event listener, an object should follow it which will contain\n    //the message data information\n    socket.emit(\"send_message\", {\n      message: \"Hello\"\n    });\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      alert(data.message);\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"send message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["useEffect","io","socket","connect","ChatBody","sendMessage","emit","message","on","data","alert"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/assest/ChatBody.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport io  from 'socket.io-client';\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\nfunction ChatBody(){\r\n\r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", {message: \"Hello\"})\r\n    };\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data) => {\r\n            alert(data.message)\r\n        })\r\n    }, [socket])\r\n\r\n    return(\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"message...\"\r\n                ></input>\r\n\r\n                <button onClick={sendMessage}>send message</button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,EAAP,MAAgB,kBAAhB;;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAACE,OAAH,CAAW,uBAAX,CAAf,C,CAAoD;;AAEpD,SAASC,QAAT,GAAmB;EAAA;;EAEf;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,WAAW,GAAG,MAAM;IACtB;IACA;IACA;IACA;IACAH,MAAM,CAACI,IAAP,CAAY,cAAZ,EAA4B;MAACC,OAAO,EAAE;IAAV,CAA5B;EACH,CAND,CARe,CAiBf;EACA;EACA;;;EACAP,SAAS,CAAC,MAAM;IACZE,MAAM,CAACM,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAU;MACnCC,KAAK,CAACD,IAAI,CAACF,OAAN,CAAL;IACH,CAFD;EAGH,CAJQ,EAIN,CAACL,MAAD,CAJM,CAAT;EAMA,oBACI;IAAA,wBACI;MACI,IAAI,EAAC,MADT;MAEI,WAAW,EAAC;IAFhB;MAAA;MAAA;MAAA;IAAA,QADJ,eAMQ;MAAQ,OAAO,EAAEG,WAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANR;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAWH;;GArCQD,Q;;KAAAA,Q;AAuCT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}