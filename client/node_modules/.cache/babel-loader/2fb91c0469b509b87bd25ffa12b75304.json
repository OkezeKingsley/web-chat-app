{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //This state is for the message that will be sent to the \n  //server so it can be emitted.\n  const [text, setText] = useState(''); //This state is what will be mapped and printed on the users UI  \n\n  const [messageReceived, setMessageReceived] = useState();\n  const [list, setList] = useState([{\n    a: 1,\n    b: 2,\n    c: 3,\n    d: 4,\n    e: 5\n  }]); // setArrays((prevState) => [...prevState, {messageReceived}]);\n  //    const [array, setArray] = useState([])\n  //    setArray((prevState) => [...prevState, {messageReceived}]);\n  //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n  const sendMessage = () => {\n    //Here we want to send message to the server to receive so\n    //that it can emit it to other client. After the \"send_message\"\n    //event listener, an object should follow it which will contain\n    //the message data information\n    socket.emit(\"send_message\", {\n      message: text\n    });\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageReceived(data.message); //   setList([...list, messageReceived])\n      //     setList((prevState) => [...prevState, messageReceived]);  \n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: //   list.map((lis, index) => {\n      //   <li>{lis.a}</li>\n      //   })\n      list.map((l, index) => {\n        console.log(l.b);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"message...\",\n        onChange: e => setText(e.target.value),\n        className: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"txt-btn\",\n        children: \"send message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"MeF5rFnfYwFWOPhm2UEfNPUUTL8=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["useEffect","useState","io","socket","connect","ChatBody","text","setText","messageReceived","setMessageReceived","list","setList","a","b","c","d","e","sendMessage","emit","message","on","data","map","l","index","console","log","target","value"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport { useEffect, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\nfunction ChatBody(){\r\n    //This state is for the message that will be sent to the \r\n    //server so it can be emitted.\r\n    const [text, setText] = useState('')\r\n\r\n    //This state is what will be mapped and printed on the users UI  \r\n    const [messageReceived, setMessageReceived] = useState()\r\n    \r\n    const [list, setList] = useState([\r\n                                        {\r\n                                            a: 1,\r\n                                            b: 2,\r\n                                            c: 3,\r\n                                            d: 4,\r\n                                            e: 5\r\n                                        }\r\n    ])\r\n\r\n   // setArrays((prevState) => [...prevState, {messageReceived}]);\r\n    \r\n //    const [array, setArray] = useState([])\r\n //    setArray((prevState) => [...prevState, {messageReceived}]);\r\n\r\n    \r\n\r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", {message: text})\r\n\r\n    \r\n    };\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data) => {\r\n           \r\n            setMessageReceived(data.message)\r\n            \r\n         //   setList([...list, messageReceived])\r\n           \r\n         //     setList((prevState) => [...prevState, messageReceived]);  \r\n        })\r\n    }, [socket])\r\n\r\n    return(\r\n        <div>\r\n                       \r\n     \r\n            <ul>\r\n                {\r\n                //   list.map((lis, index) => {\r\n                 //   <li>{lis.a}</li>\r\n                //   })\r\n\r\n                list.map((l,index) => {\r\n                    console.log(l.b)\r\n                })\r\n    \r\n                }\r\n            </ul>\r\n\r\n            <div className=\"text-box\">\r\n                <input type=\"text\" placeholder=\"message...\" onChange={(e) => setText(e.target.value)} className=\"text\"/>\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                <button onClick={sendMessage} className=\"txt-btn\">send message</button> \r\n            </div>\r\n            \r\n                \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":";;;AAAA,OAAO,gBAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,EAAP,MAAgB,kBAAhB;;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAACE,OAAH,CAAW,uBAAX,CAAf,C,CAAoD;;AAEpD,SAASC,QAAT,GAAmB;EAAA;;EACf;EACA;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC,CAHe,CAKf;;EACA,MAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,EAAtD;EAEA,MAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,CACG;IACIW,CAAC,EAAE,CADP;IAEIC,CAAC,EAAE,CAFP;IAGIC,CAAC,EAAE,CAHP;IAIIC,CAAC,EAAE,CAJP;IAKIC,CAAC,EAAE;EALP,CADH,CAAD,CAAhC,CARe,CAkBhB;EAEF;EACA;EAIG;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMC,WAAW,GAAG,MAAM;IACtB;IACA;IACA;IACA;IACAd,MAAM,CAACe,IAAP,CAAY,cAAZ,EAA4B;MAACC,OAAO,EAAEb;IAAV,CAA5B;EAGH,CARD,CA/Be,CA0Cf;EACA;EACA;;;EACAN,SAAS,CAAC,MAAM;IACZG,MAAM,CAACiB,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAU;MAEnCZ,kBAAkB,CAACY,IAAI,CAACF,OAAN,CAAlB,CAFmC,CAItC;MAEA;IACA,CAPD;EAQH,CATQ,EASN,CAAChB,MAAD,CATM,CAAT;EAWA,oBACI;IAAA,wBAGI;MAAA,UAEI;MACC;MACD;MAEAO,IAAI,CAACY,GAAL,CAAS,CAACC,CAAD,EAAGC,KAAH,KAAa;QAClBC,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACV,CAAd;MACH,CAFD;IANJ;MAAA;MAAA;MAAA;IAAA,QAHJ,eAgBI;MAAK,SAAS,EAAC,UAAf;MAAA,wBACI;QAAO,IAAI,EAAC,MAAZ;QAAmB,WAAW,EAAC,YAA/B;QAA4C,QAAQ,EAAGG,CAAD,IAAOT,OAAO,CAACS,CAAC,CAACW,MAAF,CAASC,KAAV,CAApE;QAAsF,SAAS,EAAC;MAAhG;QAAA;QAAA;QAAA;MAAA,QADJ,eAII;QAAQ,OAAO,EAAEX,WAAjB;QAA8B,SAAS,EAAC,SAAxC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAhBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA4BH;;GApFQZ,Q;;KAAAA,Q;AAsFT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}