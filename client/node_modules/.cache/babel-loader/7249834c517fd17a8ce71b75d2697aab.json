{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBodyFolder\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport { v4 as uuid } from 'uuid';\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport socket from '../SocketModuleFolder/socket';\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\nimport axios from 'axios';\nimport { AddUserToChatListContext } from '../contextFolder/AddUserToChatListContext';\nimport { NotificationContext } from '../contextFolder/NotificationContext'; //const socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatBody() {\n  _s();\n\n  //THIS STATE IS FOR THE MESSAGE THAT WILL BE SENT TO THE SERVER  \n  //SERVER SO IT CAN BE EMITTED.\n  const [text, setText] = useState(''); //THIS STATE IS WHAT WILL BE MAPPED AND PRINTED ON THE USERS UI \n\n  const [mappingTheCurrentChats, setMappingTheCurrentChats] = useState([]); //THIS IS FOR DISPLAYING WHEN THE OTHER USER IS TYPING...\n\n  const [userIsTyping, setUserIsTyping] = useState(''); //DEFINING THE USEREF'S...\n  //THIS IS USED TO CHANGE THE VALUE OF INPUT STRING TO AN EMPTY STRING.\n\n  const inputRef = useRef(); //THIS IS FOR OUR SCROLLABLE CHAT BODY      \n\n  const scrollRef = useRef(); //   scrollRef.scrollTop = scrollRef.scrollHeight;\n  //THIS IS THE scrollToBottomAlwaysOnNewMessageRef USEREF\n\n  const scrollToBottomAlwaysOnNewMessageRef = useRef(null); //This is for the textbox parent div ref\n\n  const textDivRef = useRef(); //OUR USECONTEXT FOR THIS FILE . . . . . . . . . . . . . . . . . . . . . . . \n  //This holds value of the other person you are chatting with\n\n  const {\n    otherUserNameValue,\n    setOtherUserNameValue\n  } = useContext(OtherUserNameContext); //this hold value of who to add to add to chat list when they send you \n  //message and you're  currently not chatting with them\n\n  const {\n    addUserToChatListValue,\n    setAddUserToChatListValue\n  } = useContext(AddUserToChatListContext); //This hold the value for every notification we've. It stores the user that  \n  //sent use message and have'nt responded to.\n\n  const {\n    notificationValue,\n    setNotificationValue\n  } = useContext(NotificationContext); //LET'S GET LOGGED IN USER NAME SAVED IN OUR SESSION STORAGE\n\n  let loggedInNameValue = JSON.parse(sessionStorage.getItem(\"username\")); //SAVING THE NAME OF OTHER USER IN SESSION STORAGE\n\n  useEffect(() => {\n    if (otherUserNameValue) {\n      sessionStorage.setItem(\"otherUserName\", JSON.stringify(otherUserNameValue));\n    }\n  }, [otherUserNameValue]); //GETTING THE NAME OF OTHER USER IN SESSION STORAGE ON PAGE REFRESH\n\n  useEffect(() => {\n    let storedOtherUserNameData = JSON.parse(sessionStorage.getItem(\"otherUserName\"));\n\n    if (storedOtherUserNameData) {\n      setOtherUserNameValue(storedOtherUserNameData);\n    }\n  }, []); //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE\n\n  const [mappingOldChats, setMappingOldChats] = useState([{}]);\n  useEffect(() => {\n    //Let's first set the old messages to an empty array.\n    setMappingOldChats([{}]);\n    axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\n      from: loggedInNameValue,\n      to: otherUserNameValue\n    }).then(response => {\n      response.data.forEach(responseData => {\n        let dataMessage = responseData.message;\n        let dataMessageFrom = responseData.from;\n        let dataMessageTo = responseData.to; //let's first set mappingOldChats as an array of empty object\n        //then let's set mappingOldChats to the pasts messages.\n\n        setMappingOldChats(prevState => [...prevState, {\n          dataMessage,\n          dataMessageFrom,\n          dataMessageTo\n        }]);\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [otherUserNameValue]); //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE WHEN PAGE REFRESH WHILE CHATTING\n\n  useEffect(() => {\n    if (loggedInNameValue && otherUserNameValue) {\n      axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\n        from: loggedInNameValue,\n        to: otherUserNameValue ? otherUserNameValue : ''\n      }).then(response => {\n        response.data.forEach(responseData => {\n          let dataMessage = responseData.message;\n          let dataMessageFrom = responseData.from;\n          let dataMessageTo = responseData.to;\n          console.log({\n            dataMessage,\n            dataMessageFrom,\n            dataMessageTo\n          });\n          setMappingOldChats(prevState => [...prevState, {\n            dataMessage,\n            dataMessageFrom,\n            dataMessageTo\n          }]);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, []); //IF USER IS ON SMALL SCREEN, LET GET THE WINDOW HEIGHT, SO WE CAN HELP \n  //DO THE FLOATING TEXT BOX WHEN USER IS TYPING AND KEYBOARD IS VISIBLE...\n\n  const [heightOfWindowWithoutKeyboard, setHeightOfWindowWithoutKeyboard] = useState();\n  useEffect(() => {\n    const matchResult = window.matchMedia(\"(max-width: 767px)\");\n\n    if (matchResult.matches === true) {\n      setHeightOfWindowWithoutKeyboard(window.innerHeight);\n    }\n  }, []); //HANDLE STATEMENT FUNCTIONS FOR THIS COMPONENT\n\n  const [heightOfWindowWithKeyboard, setHeightOfWindowWithKeyboard] = useState(); //hold value of screen height on small screen\n  //HANDLING WHEN OTHER USER IS TYPING . . .\n  //This will be used to dictect when the other user is typing...\n  //and then it will send the ('typing') message\n  //to the other user connected in the socket server.\n\n  const handleTyping = () => {\n    socket.emit('typing', {\n      typingNotification: 'is typing...',\n      userNameTyping: loggedInNameValue,\n      userNameReceivingTyping: otherUserNameValue\n    }); //Then we want to get the height of the window the user is typing\n    //on small screen\n\n    const matchResult = window.matchMedia(\"(max-width: 767px)\");\n\n    if (matchResult.matches === true) {\n      setHeightOfWindowWithKeyboard(window.innerHeight); //Then let's minus the height of window when keyboard is present\n      //from the height of window when keyboard isn't present so we can\n      //give text-box-div\" or textDivRef a margin bottom of that value.\n\n      let newMarginBottomFortextDivRef = heightOfWindowWithoutKeyboard - heightOfWindowWithKeyboard;\n      textDivRef.current.style.marginBottom = newMarginBottomFortextDivRef + \"px\";\n    }\n  }; //HANDLE TYPING CLOSING FUNCTION BLOCK\n  //THIS WILL INVOLKE WHEN OTHER USER IS NOT TYPING OR WHEN THEY\n  //GETS OF THE TEXT BOX.\n\n\n  const handleNotTyping = () => {\n    socket.emit('notTyping', ' '); //Then also, if user is on small screen, let's set the margin \n    //bottom of textbox div parent or textDivRef to zero\n\n    const matchResult = window.matchMedia(\"(max-width: 767px)\");\n\n    if (matchResult.matches === true) {\n      textDivRef.current.style.marginBottom = \"0px\";\n    }\n  }; //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to the clients it's suppode to it send it to.\n  //NOTE: data must be sent to the server first before it can be\n  //using their socket id. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n\n  const sendMessage = () => {\n    if (loggedInNameValue && otherUserNameValue) {\n      //Here we want to send message to the server to receive so\n      //that it can emit it to other client. After the \"send_message\"\n      //event listener, an object should follow it which will contain\n      //the message data information\n      socket.emit(\"send_message\", {\n        message: text,\n        from: loggedInNameValue,\n        to: otherUserNameValue\n      }); //This is used to change the value of the input to empty string\n      //when the send button is clicked\n\n      inputRef.current.value = \" \";\n      setText(' ');\n    } else {\n      alert('Unable to read sender or receiver name.');\n    }\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      //The (data.message) below holds the message property value received \n      //from the server and we give each message a random unique ID so that \n      //we can do stuff like deleteing the message using it unique ID etc...\n      const [m, f, t, i] = [data.message, data.from, data.to, uuid()];\n\n      if (loggedInNameValue && otherUserNameValue) {\n        setMappingTheCurrentChats(prevState => [...prevState, {\n          dataMessage: m,\n          id: i,\n          dataMessageFrom: f,\n          dataMessageTo: t\n        }]);\n      } //This says whenever someone send you a message and the value of the \n      //otherUserName variable is not the same as the person sending you the message,\n      //don't show us the message while we're chatting with other people. Why \n      //the message should not display? This is so so as to prevent message \n      //to avoid classhing with other user when we're chatting with them.\n\n\n      if (f !== otherUserNameValue && t === loggedInNameValue) {\n        if (otherUserNameValue === null || otherUserNameValue) {\n          //This says whether there is value for otherUserNameValue or not, just \n          //leave what is inside mappingTheCurrentChats and then add nothing\n          setMappingTheCurrentChats(prevState => [...prevState]);\n        } //when someone is online and they sends you message and the person isn't who you're  \n        //chatting with, let's add that person to your chatlist and then add user to our \n        //notification list. . . . . . . . . . . . . . . . .  .. . . . . . . . . . . . . .\n        //also let's only apply this when you're logged in on a device with larger screen\n        //because this same process have been handled for when on small screen in the \n        //MobileChatlist Folder. So to avoid double adding to chatlist and notification list,\n        //it's better as we handled them when on various screen size using the conditional.\n\n\n        const matchResult = window.matchMedia(\"(min-width: 767px)\"); //         if ( matchResult.matches === true ) {  \n\n        setAddUserToChatListValue(f);\n\n        if (!notificationValue.includes(f)) {\n          console.log(\"it doesnt include\"); //Set notification count for unread message \n\n          socket.emit(\"addToNotification\", {\n            userName: t,\n            personToAddToNotificationList: f\n          });\n        } //              }\n\n      }\n    });\n  }, [socket, loggedInNameValue, otherUserNameValue]); //This useEffect handles when the other user is typing.\n  //it receive the information from the server so\n  //we can display it on the front end.\n\n  useEffect(() => {\n    socket.on(\"isTyping\", data => {\n      setUserIsTyping(data.typingNotification);\n    });\n  }, [socket]); //THIS USEEFFECT HANDLES WHEN THE OTHER USER IS NOT TYPING,\n  //WE'D GET AN EMPTY STRING\n\n  useEffect(() => {\n    socket.on(\"isNotTyping\", data => {\n      setUserIsTyping(data);\n    });\n  }, [socket]); //THIS RECEIVES MY NOTIFICATION WHEN IT'S BEEN TRIGGER IN SERVER\n\n  useEffect(() => {\n    //Listenning for new notification and then adding it to our notification\n    //array. But first check if the person to add to notification is not the\n    //same as the current person we're chatting with which is the value \n    //otherUserNameValue variable holds\n    socket.on(\"myNotification\", data => {\n      //importantly, let's check if the person to add to notification list\n      //doesn't already exist in the notification array before adding.\n      //why we do this is so that it won't cause having duplicates of a user\n      //in the array which will directly affect the length of the notification count.\n      if (data.personToAddToNotificationList !== otherUserNameValue) {\n        setNotificationValue(prevState => [...prevState, data.personToAddToNotificationList]);\n      }\n\n      return () => socket.off(\"myNotification\");\n    });\n  }, [socket]); //SCROLL EFFECT: THIS MAKES SURE CHAT PAGE ALWAYS STAY DOWN WHEN NEW MESSAGE \n  //ENTERS. . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n  useEffect(() => {\n    var _scrollToBottomAlways;\n\n    //This will make sure the bottom image is always shown when new message enters.\n    (_scrollToBottomAlways = scrollToBottomAlwaysOnNewMessageRef.current) === null || _scrollToBottomAlways === void 0 ? void 0 : _scrollToBottomAlways.scrollIntoView(false);\n  }, [mappingTheCurrentChats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-body-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatNav\",\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: otherUserNameValue ? /*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"image-behind-otherUserNameValue\",\n          children: [\" \", otherUserNameValue.charAt(0), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 37\n        }, this) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\" \", otherUserNameValue ? otherUserNameValue : \"\", \": \", /*#__PURE__*/_jsxDEV(\"i\", {\n          id: \"userIsTyping\",\n          children: userIsTyping\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 69\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll\",\n      ref: scrollRef,\n      children: [mappingOldChats ? mappingOldChats.map((mappingOldChat, id) => //checking messages that are for the sender so it can have different styling\n      mappingOldChat.dataMessageFrom === loggedInNameValue ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fromOldListMessageData\",\n        children: mappingOldChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 29\n      }, this) :\n      /*#__PURE__*/\n      //checking messages that are for the receiver so it can have different styling\n      _jsxDEV(\"div\", {\n        className: \"toOldListMessageData\",\n        children: mappingOldChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 29\n      }, this)) : \"\", \" \", mappingTheCurrentChats.map((mappingTheCurrentChat, id) => //checking messages that are for the sender so it can have different styling\n      mappingTheCurrentChat.dataMessageFrom === loggedInNameValue ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fromListMessageData\",\n        children: mappingTheCurrentChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 29\n      }, this) :\n      /*#__PURE__*/\n      //checking messages that are for the receiver so it can have different styling\n      _jsxDEV(\"div\", {\n        className: \"toListMessageData\",\n        children: mappingTheCurrentChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 29\n      }, this)), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: scrollToBottomAlwaysOnNewMessageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box-div\",\n      ref: textDivRef,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: 'reply to ' + otherUserNameValue + '...',\n        onChange: e => setText(e.target.value) //This is to store what user write inside the text variable\n        ,\n        className: \"text\",\n        ref: inputRef,\n        onMouseEnter: handleTyping,\n        onMouseLeave: handleNotTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n          onClick: sendMessage,\n          className: \"txt-btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 453,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"i5KxzAhwVXjVhWu7r0Kp2lSE0NM=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["v4","uuid","FaTelegramPlane","FaTrash","useContext","useEffect","useRef","useState","socket","OtherUserNameContext","axios","AddUserToChatListContext","NotificationContext","ChatBody","text","setText","mappingTheCurrentChats","setMappingTheCurrentChats","userIsTyping","setUserIsTyping","inputRef","scrollRef","scrollToBottomAlwaysOnNewMessageRef","textDivRef","otherUserNameValue","setOtherUserNameValue","addUserToChatListValue","setAddUserToChatListValue","notificationValue","setNotificationValue","loggedInNameValue","JSON","parse","sessionStorage","getItem","setItem","stringify","storedOtherUserNameData","mappingOldChats","setMappingOldChats","post","from","to","then","response","data","forEach","responseData","dataMessage","message","dataMessageFrom","dataMessageTo","prevState","catch","err","console","log","heightOfWindowWithoutKeyboard","setHeightOfWindowWithoutKeyboard","matchResult","window","matchMedia","matches","innerHeight","heightOfWindowWithKeyboard","setHeightOfWindowWithKeyboard","handleTyping","emit","typingNotification","userNameTyping","userNameReceivingTyping","newMarginBottomFortextDivRef","current","style","marginBottom","handleNotTyping","sendMessage","value","alert","on","m","f","t","i","id","includes","userName","personToAddToNotificationList","off","scrollIntoView","charAt","map","mappingOldChat","mappingTheCurrentChat","e","target"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBodyFolder/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa'\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport socket from '../SocketModuleFolder/socket';\r\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\r\nimport axios from 'axios';\r\nimport { AddUserToChatListContext } from '../contextFolder/AddUserToChatListContext';\r\nimport { NotificationContext } from '../contextFolder/NotificationContext';\r\n\r\n\r\n\r\n//const socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\n\r\nfunction ChatBody ( ){\r\n\r\n    //THIS STATE IS FOR THE MESSAGE THAT WILL BE SENT TO THE SERVER  \r\n    //SERVER SO IT CAN BE EMITTED.\r\n    const [text, setText] = useState('')\r\n\r\n\r\n    //THIS STATE IS WHAT WILL BE MAPPED AND PRINTED ON THE USERS UI \r\n    const [mappingTheCurrentChats, setMappingTheCurrentChats] = useState([])  \r\n\r\n\r\n    //THIS IS FOR DISPLAYING WHEN THE OTHER USER IS TYPING...\r\n    const[userIsTyping, setUserIsTyping] = useState('')\r\n\r\n    \r\n\r\n    //DEFINING THE USEREF'S...\r\n\r\n    //THIS IS USED TO CHANGE THE VALUE OF INPUT STRING TO AN EMPTY STRING.\r\n    const inputRef = useRef()\r\n\r\n\r\n    //THIS IS FOR OUR SCROLLABLE CHAT BODY      \r\n    const scrollRef = useRef()\r\n    //   scrollRef.scrollTop = scrollRef.scrollHeight;\r\n    \r\n  \r\n    //THIS IS THE scrollToBottomAlwaysOnNewMessageRef USEREF\r\n    const scrollToBottomAlwaysOnNewMessageRef = useRef(null)\r\n\r\n    //This is for the textbox parent div ref\r\n    const textDivRef = useRef()\r\n\r\n\r\n   \r\n   \r\n    //OUR USECONTEXT FOR THIS FILE . . . . . . . . . . . . . . . . . . . . . . . \r\n    //This holds value of the other person you are chatting with\r\n    const { otherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext)\r\n\r\n    //this hold value of who to add to add to chat list when they send you \r\n    //message and you're  currently not chatting with them\r\n    const { addUserToChatListValue, setAddUserToChatListValue } = useContext(AddUserToChatListContext)\r\n\r\n    //This hold the value for every notification we've. It stores the user that  \r\n    //sent use message and have'nt responded to.\r\n    const { notificationValue, setNotificationValue }  = useContext(NotificationContext)\r\n\r\n\r\n    //LET'S GET LOGGED IN USER NAME SAVED IN OUR SESSION STORAGE\r\n    let loggedInNameValue = JSON.parse(sessionStorage.getItem(\"username\"));\r\n\r\n\r\n    \r\n    //SAVING THE NAME OF OTHER USER IN SESSION STORAGE\r\n    useEffect(() => {\r\n\r\n        if (otherUserNameValue) {  \r\n\r\n        sessionStorage.setItem(\"otherUserName\", JSON.stringify(otherUserNameValue))\r\n\r\n        }\r\n\r\n\r\n    }, [otherUserNameValue])\r\n\r\n    //GETTING THE NAME OF OTHER USER IN SESSION STORAGE ON PAGE REFRESH\r\n    useEffect(() => {\r\n\r\n        let storedOtherUserNameData = JSON.parse(sessionStorage.getItem(\"otherUserName\"))\r\n\r\n        if (storedOtherUserNameData) {\r\n\r\n            setOtherUserNameValue(storedOtherUserNameData)\r\n\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE\r\n\r\n    const [mappingOldChats, setMappingOldChats] = useState([{}]);\r\n\r\n    useEffect(() => {  \r\n        \r\n       //Let's first set the old messages to an empty array.\r\n       setMappingOldChats([{}])\r\n\r\n       axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n\r\n       from: loggedInNameValue,\r\n\r\n       to: otherUserNameValue\r\n\r\n    }).then((response) => {\r\n      \r\n            response.data.forEach((responseData) => {\r\n                \r\n                let dataMessage = responseData.message;\r\n                let dataMessageFrom = responseData.from;\r\n                let dataMessageTo = responseData.to;\r\n\r\n                //let's first set mappingOldChats as an array of empty object\r\n                //then let's set mappingOldChats to the pasts messages.\r\n                setMappingOldChats((prevState) => [...prevState, {dataMessage, dataMessageFrom, dataMessageTo }])\r\n\r\n        \r\n        })\r\n\r\n    \r\n\r\n    }).catch((err) => {\r\n\r\n        console.log(err)\r\n        \r\n    })\r\n    \r\n    }, [otherUserNameValue]);\r\n\r\n\r\n\r\n    //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE WHEN PAGE REFRESH WHILE CHATTING\r\n    useEffect(() => {\r\n\r\n        if (loggedInNameValue && otherUserNameValue) {  \r\n\r\n            axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n    \r\n            from: loggedInNameValue,\r\n    \r\n            to: otherUserNameValue ? otherUserNameValue : ''\r\n    \r\n        }).then((response) => {\r\n    \r\n            response.data.forEach((responseData) => {\r\n            \r\n                let dataMessage = responseData.message;\r\n                let dataMessageFrom = responseData.from;\r\n                let dataMessageTo = responseData.to;\r\n                console.log({dataMessage, dataMessageFrom, dataMessageTo});\r\n\r\n                \r\n                setMappingOldChats((prevState) => [...prevState, {dataMessage, dataMessageFrom, dataMessageTo }])\r\n\r\n        \r\n            })\r\n    \r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err)\r\n                \r\n            })\r\n        \r\n        }\r\n\r\n        }, []);\r\n\r\n\r\n    \r\n    //IF USER IS ON SMALL SCREEN, LET GET THE WINDOW HEIGHT, SO WE CAN HELP \r\n    //DO THE FLOATING TEXT BOX WHEN USER IS TYPING AND KEYBOARD IS VISIBLE...\r\n    const [heightOfWindowWithoutKeyboard, setHeightOfWindowWithoutKeyboard] = useState()\r\n    \r\n    useEffect(() => {\r\n\r\n        const matchResult = window.matchMedia(\"(max-width: 767px)\");\r\n            \r\n        if (matchResult.matches === true) {\r\n\r\n            setHeightOfWindowWithoutKeyboard(window.innerHeight)\r\n        }\r\n        \r\n        \r\n    \r\n    }, [])    \r\n\r\n\r\n\r\n    //HANDLE STATEMENT FUNCTIONS FOR THIS COMPONENT\r\n\r\n    const [heightOfWindowWithKeyboard, setHeightOfWindowWithKeyboard] = useState()//hold value of screen height on small screen\r\n\r\n    //HANDLING WHEN OTHER USER IS TYPING . . .\r\n    //This will be used to dictect when the other user is typing...\r\n    //and then it will send the ('typing') message\r\n    //to the other user connected in the socket server.\r\n    const handleTyping = () => {\r\n\r\n        socket.emit('typing', {\r\n\r\n            typingNotification: 'is typing...', \r\n\r\n            userNameTyping: loggedInNameValue, \r\n\r\n            userNameReceivingTyping: otherUserNameValue\r\n        })\r\n\r\n\r\n\r\n        //Then we want to get the height of the window the user is typing\r\n        //on small screen\r\n        const matchResult = window.matchMedia(\"(max-width: 767px)\");\r\n            \r\n        if (matchResult.matches === true) {\r\n\r\n            setHeightOfWindowWithKeyboard(window.innerHeight)\r\n\r\n            //Then let's minus the height of window when keyboard is present\r\n            //from the height of window when keyboard isn't present so we can\r\n            //give text-box-div\" or textDivRef a margin bottom of that value.\r\n            let newMarginBottomFortextDivRef = heightOfWindowWithoutKeyboard - heightOfWindowWithKeyboard\r\n\r\n            textDivRef.current.style.marginBottom = newMarginBottomFortextDivRef + \"px\";\r\n\r\n        }\r\n\r\n\r\n    }//HANDLE TYPING CLOSING FUNCTION BLOCK\r\n\r\n\r\n    //THIS WILL INVOLKE WHEN OTHER USER IS NOT TYPING OR WHEN THEY\r\n    //GETS OF THE TEXT BOX.\r\n    const handleNotTyping = () => {\r\n\r\n        socket.emit('notTyping', ' ')\r\n\r\n        //Then also, if user is on small screen, let's set the margin \r\n        //bottom of textbox div parent or textDivRef to zero\r\n        const matchResult = window.matchMedia(\"(max-width: 767px)\");\r\n            \r\n        if (matchResult.matches === true) {\r\n\r\n        textDivRef.current.style.marginBottom = \"0px\";\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n    \r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to the clients it's suppode to it send it to.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //using their socket id. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n\r\n        if (loggedInNameValue && otherUserNameValue) { \r\n\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", { message: text, from: loggedInNameValue, to: otherUserNameValue })\r\n\r\n        //This is used to change the value of the input to empty string\r\n        //when the send button is clicked\r\n        inputRef.current.value = \" \";\r\n        setText(' '); \r\n\r\n        } else {\r\n\r\n            alert('Unable to read sender or receiver name.')\r\n\r\n        }  \r\n       \r\n       \r\n    };\r\n\r\n \r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n\r\n        socket.on(\"receive_message\", (data)  => {  \r\n           \r\n        //The (data.message) below holds the message property value received \r\n        //from the server and we give each message a random unique ID so that \r\n        //we can do stuff like deleteing the message using it unique ID etc...\r\n\r\n        const [m, f, t, i] = [data.message, data.from, data.to, uuid()];\r\n\r\n        if (loggedInNameValue && otherUserNameValue) {  \r\n\r\n        setMappingTheCurrentChats((prevState) => [...prevState, { dataMessage: m, id: i, dataMessageFrom: f, dataMessageTo: t } ]);\r\n\r\n         }\r\n\r\n        //This says whenever someone send you a message and the value of the \r\n        //otherUserName variable is not the same as the person sending you the message,\r\n        //don't show us the message while we're chatting with other people. Why \r\n        //the message should not display? This is so so as to prevent message \r\n        //to avoid classhing with other user when we're chatting with them.\r\n        if (f !== otherUserNameValue && t === loggedInNameValue) {\r\n     \r\n            if (otherUserNameValue === null || otherUserNameValue) {\r\n                //This says whether there is value for otherUserNameValue or not, just \r\n                //leave what is inside mappingTheCurrentChats and then add nothing\r\n                setMappingTheCurrentChats((prevState) => [...prevState]);\r\n\r\n                 \r\n            }\r\n            \r\n            //when someone is online and they sends you message and the person isn't who you're  \r\n            //chatting with, let's add that person to your chatlist and then add user to our \r\n            //notification list. . . . . . . . . . . . . . . . .  .. . . . . . . . . . . . . .\r\n            //also let's only apply this when you're logged in on a device with larger screen\r\n            //because this same process have been handled for when on small screen in the \r\n            //MobileChatlist Folder. So to avoid double adding to chatlist and notification list,\r\n            //it's better as we handled them when on various screen size using the conditional.\r\n            const matchResult = window.matchMedia(\"(min-width: 767px)\");\r\n\r\n       //         if ( matchResult.matches === true ) {  \r\n            \r\n                    setAddUserToChatListValue(f)\r\n               \r\n\r\n                   if  (!notificationValue.includes(f) ) { \r\n                        \r\nconsole.log(\"it doesnt include\")\r\n                        //Set notification count for unread message \r\n                        \r\n                        socket.emit(\"addToNotification\", {userName: t, \r\n\r\n                            personToAddToNotificationList: f\r\n\r\n                        });\r\n                        \r\n\r\n                    }\r\n\r\n  //              }\r\n\r\n\r\n\r\n           \r\n         }    \r\n            \r\n \r\n       \r\n\r\n\r\n\r\n      \r\n        });  \r\n\r\n    }, [socket, loggedInNameValue, otherUserNameValue])\r\n\r\n \r\n\r\n    //This useEffect handles when the other user is typing.\r\n    //it receive the information from the server so\r\n    //we can display it on the front end.\r\n\r\n    useEffect(() =>{\r\n\r\n        socket.on(\"isTyping\", (data) => {\r\n          \r\n            setUserIsTyping(data.typingNotification) \r\n    \r\n        })\r\n        \r\n\r\n    }, [socket])\r\n\r\n\r\n\r\n    //THIS USEEFFECT HANDLES WHEN THE OTHER USER IS NOT TYPING,\r\n    //WE'D GET AN EMPTY STRING\r\n     useEffect(() => {\r\n\r\n        socket.on(\"isNotTyping\", (data) => {\r\n\r\n            setUserIsTyping(data)\r\n\r\n        })\r\n\r\n     }, [socket])\r\n\r\n\r\n\r\n     //THIS RECEIVES MY NOTIFICATION WHEN IT'S BEEN TRIGGER IN SERVER\r\n     useEffect(() => {\r\n        \r\n        //Listenning for new notification and then adding it to our notification\r\n        //array. But first check if the person to add to notification is not the\r\n        //same as the current person we're chatting with which is the value \r\n        //otherUserNameValue variable holds\r\n       \r\n        socket.on(\"myNotification\", (data) => {\r\n\r\n        \r\n            //importantly, let's check if the person to add to notification list\r\n            //doesn't already exist in the notification array before adding.\r\n            //why we do this is so that it won't cause having duplicates of a user\r\n            //in the array which will directly affect the length of the notification count.\r\n        \r\n            if (data.personToAddToNotificationList !== otherUserNameValue) {\r\n\r\n            setNotificationValue((prevState) => [...prevState, data.personToAddToNotificationList]);     \r\n\r\n            }\r\n\r\n           return () => socket.off(\"myNotification\")\r\n\r\n        });\r\n\r\n\r\n     }, [ socket ]);\r\n\r\n\r\n\r\n     //SCROLL EFFECT: THIS MAKES SURE CHAT PAGE ALWAYS STAY DOWN WHEN NEW MESSAGE \r\n     //ENTERS. . . . . . . . . . . . . . . . . . . . . . . . . . .\r\n     useEffect(() => {\r\n\r\n        //This will make sure the bottom image is always shown when new message enters.\r\n        scrollToBottomAlwaysOnNewMessageRef.current?.scrollIntoView(false)\r\n        \r\n    }, [mappingTheCurrentChats])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n\r\n        <div className=\"chat-body-container\">\r\n          \r\n            <div className=\"chatNav\">\r\n           \r\n             <b > \r\n\r\n             { otherUserNameValue ? <strong className=\"image-behind-otherUserNameValue\"> {otherUserNameValue.charAt(0)} </strong> \r\n             \r\n             : '' \r\n             \r\n             } \r\n             \r\n             </b>\r\n                     \r\n                <b> {otherUserNameValue ? otherUserNameValue : \"\"}: <i id=\"userIsTyping\">{userIsTyping}</i> </b>\r\n\r\n            </div> {/*CHATNAV DIV ENDS*/}\r\n\r\n\r\n    \r\n\r\n            <div className=\"scroll\" ref={scrollRef} >\r\n\r\n\r\n             {/*THIS IS FOR MAPPING OLD/HISTORY CHATS BETWEEN USERS CHATTING*/}    \r\n\r\n              { mappingOldChats ?\r\n           \r\n                mappingOldChats.map((mappingOldChat, id) => \r\n                    //checking messages that are for the sender so it can have different styling\r\n                    mappingOldChat.dataMessageFrom === loggedInNameValue ? (  \r\n\r\n                            <div key={id} className=\"fromOldListMessageData\">\r\n\r\n                               {mappingOldChat.dataMessage}\r\n\r\n                            </div>\r\n                                         \r\n\r\n                    ) : (\r\n                    //checking messages that are for the receiver so it can have different styling\r\n                            <div key={id} className=\"toOldListMessageData\">\r\n\r\n                               {mappingOldChat.dataMessage}\r\n\r\n                            </div> \r\n\r\n                        )\r\n  \r\n                     \r\n                    )  : \"\"\r\n\r\n                    \r\n                } {/*MAPPING OLD CHATS CURLY CONTAINER ENDING*/}\r\n                    \r\n\r\n\r\n\r\n\r\n\r\n                {/*THIS IS FOR MAPPING CUREENT CHATS BETWEEN USERS CHATTING*/}\r\n\r\n                {mappingTheCurrentChats.map((mappingTheCurrentChat, id) => \r\n                    //checking messages that are for the sender so it can have different styling\r\n                    mappingTheCurrentChat.dataMessageFrom === loggedInNameValue ? (  \r\n\r\n                            <div key={id} className=\"fromListMessageData\">\r\n\r\n                               {mappingTheCurrentChat.dataMessage}\r\n\r\n                            </div>\r\n                                         \r\n\r\n                    ) : (\r\n                    //checking messages that are for the receiver so it can have different styling\r\n                            <div key={id} className=\"toListMessageData\">\r\n\r\n                               {mappingTheCurrentChat.dataMessage}\r\n\r\n                            </div>\r\n\r\n                    )\r\n\r\n                    )        \r\n        \r\n                } {/*MAPPING THE CURRENT CHAT CURLY CONTAINER ENDS*/}\r\n\r\n\r\n              {/*THIS IS DIV THAT MAKE SURE LAST MESSAGE IS ALWAYS SHOWING WHEN NEW MESSAGE ENTERS*/}    \r\n              <div ref={scrollToBottomAlwaysOnNewMessageRef} />\r\n        \r\n               \r\n            </div> {/*SCROLLABLE CHAT CONTAINER CLOSING DIV*/}\r\n\r\n\r\n\r\n            {/*PARENT DIV FOR THE MESSAGE BOX AND SEND MESSAGE BUTTON*/}\r\n            <div className=\"text-box-div\" ref={textDivRef} >\r\n\r\n                <textarea\r\n\r\n                placeholder= {'reply to ' + otherUserNameValue + '...'}\r\n                \r\n                onChange={(e) => setText(e.target.value)} //This is to store what user write inside the text variable\r\n\r\n                className=\"text\"\r\n\r\n                ref={inputRef}\r\n\r\n                onMouseEnter={handleTyping}\r\n\r\n                onMouseLeave={handleNotTyping}\r\n         \r\n                />\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                {/* <button onClick={sendMessage} className=\"txt-btn\">send message</button> */} \r\n                <div>\r\n                     <FaTelegramPlane onClick={sendMessage} className=\"txt-btn\"/>\r\n                </div> \r\n\r\n                \r\n            </div>{/*MESSAGE BOX AND SEND BUTTON PARENT DIV CLOSING DIV*/}\r\n             \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ChatBody;"],"mappings":"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"},"metadata":{},"sourceType":"module"}