{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatListFolder\\\\ChatList.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { FaSistrix } from \"react-icons/fa\";\nimport './ChatList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatList() {\n  _s();\n\n  //This is our data of users fetched from our database\n  const [listOfUserFromDatabase, setListOfUserFromDatabase] = useState([{\n    name: \"Tom\",\n    age: 16,\n    color: \"purple\",\n    id: 1\n  }, {\n    name: \"Kim\",\n    age: 17,\n    color: \"black\",\n    id: 2\n  }, {\n    name: \"Rio\",\n    age: 19,\n    color: \"green\",\n    id: 3\n  }, {\n    name: \"Joy\",\n    age: 17,\n    color: \"white\",\n    id: 4\n  }, {\n    name: \"Joy\",\n    age: 15,\n    color: \"white\",\n    id: 5\n  }, {\n    name: \"Rick\",\n    age: 17,\n    color: \"white\",\n    id: 6\n  }]);\n  /* - - - - - [ALL USESTATE FOR THIS PARTICULAR COMPONENT] - - - - - */\n  //storing the list of user from DB here so we can map it on the drop down\n  //search div section\n\n  const [searchLists, setSearchLists] = useState(listOfUserFromDatabase); //This is used for capturing what the user types into the search box\n\n  const [searchFilter, setSearchFilter] = useState();\n  /* - - - - - [ALL OUR FUNCTIONS FOR THIS PARTICULAR COMPONENT] - - - - -*/\n  //This is to store what the user type in the search box so we can\n  //use for filtering and also filter the name of user in realtime \n  //based on serach input\n\n  const onChangeFunction = event => {\n    //This will grab the value in the user type in the input box and store it in the searchFilter state\n    //please note: the toLowerCase() will convert the value to lowercase so that it can match with the\n    //lowercase name properties in the database. (we'd convert all name properties in DB to lowercase too)\n    setSearchFilter(event.target.value.toLowerCase()); //This will filter out users that matches the character inputted by the user in realtime\n    //and the store it in the arr variable. please note: the toLowerCase() will convert the value of the\n    //DB name property so that it can match with the value from the search input which we already convertted\n    //to lowercase using the toLowercase() method.\n\n    const arr = searchLists.filter(s => {//    if(searchFilter.toLowerCase() === \"may\"){\n      //        alert('yo')\n      //    } //else if ( s.name.toLowerCase().includes(searchFilter.toLowerCase()) ) {\n      //   return s\n      // }\n    }); //This will set the searchLists to the new filtered data stored in the arr variable\n    // setSearchLists(arr)   \n\n    if (searchFilter === \"yam\") {\n      alert('yo');\n    }\n  }; //This function is used for searching for user with the name that \n  //matches what the user is searching\n\n\n  const searchUser = () => {\n    const newArray = searchLists.filter(searchList => {\n      //Here, we're saying: if the name the user doesn't exist, we should print an error message\n      //else, the program should return the name that matches what the user is searching for\n      if (searchList.name.toLowerCase() !== searchFilter) {\n        console.log('user dont exist');\n      } else {\n        return searchList.name.toLowerCase() === searchFilter;\n      }\n    });\n    setSearchLists(newArray);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"5px solid black\",\n      paddingBottom: \"800px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-input-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-input\",\n        onChange: onChangeFunction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FaSistrix, {\n        className: \"search-input-icon\",\n        onClick: searchUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), searchLists.map((sL, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20,\n        marginBottom: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: sL.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: sL.age\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: sL.color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: sL.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this)]\n    }, id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatList, \"1MYnRrt9wGexACqGehGrqi2ksZM=\");\n\n_c = ChatList;\nexport default ChatList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatList\");","map":{"version":3,"names":["useState","FaSistrix","ChatList","listOfUserFromDatabase","setListOfUserFromDatabase","name","age","color","id","searchLists","setSearchLists","searchFilter","setSearchFilter","onChangeFunction","event","target","value","toLowerCase","arr","filter","s","alert","searchUser","newArray","searchList","console","log","border","paddingBottom","map","sL","marginTop","marginBottom"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatListFolder/ChatList.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { FaSistrix } from \"react-icons/fa\";\r\nimport './ChatList.css';\r\n\r\nfunction ChatList(){\r\n    //This is our data of users fetched from our database\r\n    const [listOfUserFromDatabase, setListOfUserFromDatabase] = useState([{\r\n        name:\"Tom\",\r\n        age: 16,\r\n        color:\"purple\",\r\n        id:1\r\n    },\r\n    {\r\n        name:\"Kim\",\r\n        age: 17,\r\n        color:\"black\",\r\n        id:2\r\n    },\r\n\r\n    {\r\n        name:\"Rio\",\r\n        age: 19,\r\n        color:\"green\",\r\n        id:3\r\n    },\r\n\r\n    {\r\n        name:\"Joy\",\r\n        age: 17,\r\n        color:\"white\",\r\n        id:4\r\n    },\r\n\r\n    {\r\n        name:\"Joy\",\r\n        age: 15,\r\n        color:\"white\",\r\n        id:5\r\n    },\r\n\r\n    {\r\n        name:\"Rick\",\r\n        age: 17,\r\n        color:\"white\",\r\n        id:6\r\n    }])\r\n\r\n\r\n\r\n    /* - - - - - [ALL USESTATE FOR THIS PARTICULAR COMPONENT] - - - - - */\r\n\r\n    //storing the list of user from DB here so we can map it on the drop down\r\n    //search div section\r\n    const [searchLists, setSearchLists] = useState( listOfUserFromDatabase )\r\n\r\n\r\n    //This is used for capturing what the user types into the search box\r\n    const [searchFilter, setSearchFilter] = useState();\r\n\r\n\r\n\r\n    /* - - - - - [ALL OUR FUNCTIONS FOR THIS PARTICULAR COMPONENT] - - - - -*/\r\n\r\n    //This is to store what the user type in the search box so we can\r\n    //use for filtering and also filter the name of user in realtime \r\n    //based on serach input\r\n    const onChangeFunction = ( event ) => {\r\n\r\n        //This will grab the value in the user type in the input box and store it in the searchFilter state\r\n        //please note: the toLowerCase() will convert the value to lowercase so that it can match with the\r\n        //lowercase name properties in the database. (we'd convert all name properties in DB to lowercase too)\r\n         setSearchFilter(event.target.value.toLowerCase())\r\n        \r\n        //This will filter out users that matches the character inputted by the user in realtime\r\n        //and the store it in the arr variable. please note: the toLowerCase() will convert the value of the\r\n        //DB name property so that it can match with the value from the search input which we already convertted\r\n        //to lowercase using the toLowercase() method.\r\n        const arr = searchLists.filter( (s) => {\r\n        //    if(searchFilter.toLowerCase() === \"may\"){\r\n        //        alert('yo')\r\n        //    } //else if ( s.name.toLowerCase().includes(searchFilter.toLowerCase()) ) {\r\n             //   return s\r\n           // }\r\n            \r\n            \r\n        })\r\n   \r\n        //This will set the searchLists to the new filtered data stored in the arr variable\r\n       // setSearchLists(arr)   \r\n       if(searchFilter === \"yam\"){\r\n        alert('yo')\r\n    }\r\n\r\n    }\r\n\r\n\r\n    //This function is used for searching for user with the name that \r\n    //matches what the user is searching\r\n    const searchUser = () => {\r\n\r\n       const newArray = searchLists.filter( (searchList) => {\r\n          \r\n        //Here, we're saying: if the name the user doesn't exist, we should print an error message\r\n        //else, the program should return the name that matches what the user is searching for\r\n        \r\n          if (searchList.name.toLowerCase() !== searchFilter ){\r\n\r\n                console.log('user dont exist');\r\n\r\n          } else { \r\n            \r\n            return searchList.name.toLowerCase() === searchFilter; \r\n        \r\n        }\r\n      })\r\n\r\n      setSearchLists(newArray)\r\n     \r\n\r\n    }\r\n\r\n\r\n    return(\r\n        <div style={{border:\"5px solid black\", paddingBottom: \"800px\"}}>\r\n\r\n            <div className=\"search-input-div\">\r\n\r\n                <input type=\"text\" className=\"search-input\" onChange={onChangeFunction}></input>\r\n\r\n                <FaSistrix className=\"search-input-icon\" onClick={searchUser}/>\r\n                <select>\r\n                    <option>1</option>\r\n                    <option>2</option>\r\n                    <option>3</option>\r\n                </select>\r\n\r\n            </div>\r\n            \r\n            {\r\n                searchLists.map((sL, id) => ( \r\n                <div key={id} style={{marginTop:20, marginBottom:20}}>\r\n                    <p>{sL.name}</p>\r\n                    <p>{sL.age}</p>\r\n                    <p>{sL.color}</p>\r\n                    <p>{sL.id}</p>\r\n                </div>\r\n                \r\n                ))\r\n            \r\n            } \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatList;"],"mappings":"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"},"metadata":{},"sourceType":"module"}