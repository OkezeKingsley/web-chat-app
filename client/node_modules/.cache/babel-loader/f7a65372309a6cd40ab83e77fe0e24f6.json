{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBodyFolder\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport { v4 as uuid } from 'uuid';\nimport { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //This state is for the message that will be sent to the \n  //server so it can be emitted.\n  const [text, setText] = useState(''); //This state is what will be mapped and printed on the users UI  \n\n  const [lists, setList] = useState(['']); //This is used to change the value of the input to empty string\n\n  const inputRef = useRef();\n  const scrollRef = useRef(); //   scrollRef.scrollTop = scrollRef.scrollHeight;\n  //This is used to create a ramdom id \n\n  const unique_id = uuid();\n  console.log(unique_id); //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n  const sendMessage = () => {\n    //Here we want to send message to the server to receive so\n    //that it can emit it to other client. After the \"send_message\"\n    //event listener, an object should follow it which will contain\n    //the message data information\n    socket.emit(\"send_message\", {\n      message: text\n    }); //This is used to change the value of the input to empty string\n    //when the send button is clicked\n\n    inputRef.current.value = \" \"; // setText(' '); remove the comment, this code is with it\n\n    window.confirm('do you want to delete this message?');\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      //This keeps whatever is in the list and add a new data to the list so it can get mapped\n      setList(prevState => [...prevState, data.message]);\n    });\n  }, [socket]); //This is used to automatically scroll the chat body scrollbar\n  //to the bottom each time a new message enters.\n\n  /*  useEffect(() => {\r\n        scrollRef.current.scrollIntoView( {behavior: 'smooth'});\r\n    }, [list])*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"5px solid black\",\n      paddingBottom: \"800px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll\",\n      ref: scrollRef,\n      children: lists.map((list, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: list\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"message...\",\n        onChange: e => setText(e.target.value),\n        className: \"text\",\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"txt-btn\",\n        children: \"send message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"ZsgHoEkDlkBBGdsWZRg9bhuSMio=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["v4","uuid","useEffect","useRef","useState","io","socket","connect","ChatBody","text","setText","lists","setList","inputRef","scrollRef","unique_id","console","log","sendMessage","emit","message","current","value","window","confirm","on","data","prevState","border","paddingBottom","map","list","index","e","target"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBodyFolder/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\nfunction ChatBody(){\r\n    //This state is for the message that will be sent to the \r\n    //server so it can be emitted.\r\n    const [text, setText] = useState('')\r\n\r\n    //This state is what will be mapped and printed on the users UI  \r\n    const [lists, setList] = useState([''])\r\n    \r\n    //This is used to change the value of the input to empty string\r\n    const inputRef = useRef()\r\n\r\n      const scrollRef = useRef()\r\n //   scrollRef.scrollTop = scrollRef.scrollHeight;\r\n\r\n\r\n    //This is used to create a ramdom id \r\n    const unique_id = uuid();\r\n    console.log(unique_id)\r\n\r\n    \r\n\r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", {message: text})\r\n\r\n        //This is used to change the value of the input to empty string\r\n        //when the send button is clicked\r\n        inputRef.current.value = \" \";\r\n       // setText(' '); remove the comment, this code is with it\r\n       window.confirm('do you want to delete this message?');\r\n    };\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data)  => {  \r\n      \r\n        //This keeps whatever is in the list and add a new data to the list so it can get mapped\r\n        setList((prevState) => [...prevState, data.message]); \r\n               \r\n        })\r\n    }, [socket])\r\n\r\n\r\n    //This is used to automatically scroll the chat body scrollbar\r\n    //to the bottom each time a new message enters.\r\n  /*  useEffect(() => {\r\n        scrollRef.current.scrollIntoView( {behavior: 'smooth'});\r\n    }, [list])*/\r\n\r\n    \r\n    return(\r\n        <div style={{border:\"5px solid black\", paddingBottom: \"800px\"}}>\r\n\r\n            <div className=\"scroll\" ref={scrollRef}>\r\n                       \r\n                {\r\n                    \r\n                    lists.map((list, index) => (  \r\n                        <div key={index} >\r\n                            {list}\r\n                        </div>\r\n                    ))\r\n        \r\n                }\r\n                \r\n            </div>\r\n\r\n            <div className=\"text-box\">\r\n                <input type=\"text\" placeholder=\"message...\" \r\n                onChange={(e) => setText(e.target.value)} \r\n                className=\"text\"\r\n                ref={inputRef}\r\n                />\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                  <button onClick={sendMessage} className=\"txt-btn\">send message</button> \r\n            </div>\r\n             \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":";;;AAAA,OAAO,gBAAP;AACA,SAASA,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,EAAP,MAAgB,kBAAhB;;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAACE,OAAH,CAAW,uBAAX,CAAf,C,CAAoD;;AAEpD,SAASC,QAAT,GAAmB;EAAA;;EACf;EACA;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC,CAHe,CAKf;;EACA,MAAM,CAACO,KAAD,EAAQC,OAAR,IAAmBR,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAjC,CANe,CAQf;;EACA,MAAMS,QAAQ,GAAGV,MAAM,EAAvB;EAEE,MAAMW,SAAS,GAAGX,MAAM,EAAxB,CAXa,CAYlB;EAGG;;EACA,MAAMY,SAAS,GAAGd,IAAI,EAAtB;EACAe,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAjBe,CAqBf;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMG,WAAW,GAAG,MAAM;IACtB;IACA;IACA;IACA;IACAZ,MAAM,CAACa,IAAP,CAAY,cAAZ,EAA4B;MAACC,OAAO,EAAEX;IAAV,CAA5B,EALsB,CAOtB;IACA;;IACAI,QAAQ,CAACQ,OAAT,CAAiBC,KAAjB,GAAyB,GAAzB,CATsB,CAUvB;;IACAC,MAAM,CAACC,OAAP,CAAe,qCAAf;EACF,CAZD,CA3Be,CA0Cf;EACA;EACA;;;EACAtB,SAAS,CAAC,MAAM;IACZI,MAAM,CAACmB,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAW;MAExC;MACAd,OAAO,CAAEe,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAeD,IAAI,CAACN,OAApB,CAAhB,CAAP;IAEC,CALD;EAMH,CAPQ,EAON,CAACd,MAAD,CAPM,CAAT,CA7Ce,CAuDf;EACA;;EACF;AACF;AACA;;EAGI,oBACI;IAAK,KAAK,EAAE;MAACsB,MAAM,EAAC,iBAAR;MAA2BC,aAAa,EAAE;IAA1C,CAAZ;IAAA,wBAEI;MAAK,SAAS,EAAC,QAAf;MAAwB,GAAG,EAAEf,SAA7B;MAAA,UAIQH,KAAK,CAACmB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACN;QAAA,UACKD;MADL,GAAUC,KAAV;QAAA;QAAA;QAAA;MAAA,QADJ;IAJR;MAAA;MAAA;MAAA;IAAA,QAFJ,eAgBI;MAAK,SAAS,EAAC,UAAf;MAAA,wBACI;QAAO,IAAI,EAAC,MAAZ;QAAmB,WAAW,EAAC,YAA/B;QACA,QAAQ,EAAGC,CAAD,IAAOvB,OAAO,CAACuB,CAAC,CAACC,MAAF,CAASZ,KAAV,CADxB;QAEA,SAAS,EAAC,MAFV;QAGA,GAAG,EAAET;MAHL;QAAA;QAAA;QAAA;MAAA,QADJ,eAQM;QAAQ,OAAO,EAAEK,WAAjB;QAA8B,SAAS,EAAC,SAAxC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QARN;IAAA;MAAA;MAAA;MAAA;IAAA,QAhBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA+BH;;GA7FQV,Q;;KAAAA,Q;AA+FT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}