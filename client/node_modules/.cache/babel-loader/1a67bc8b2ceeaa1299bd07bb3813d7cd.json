{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBodyFolder\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport notification from './notification.mp3'; //This for the incoming message notification\n\nimport { v4 as uuid } from 'uuid';\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //This state is for the message that will be sent to the \n  //server so it can be emitted.\n  const [text, setText] = useState(''); //This state is what will be mapped and printed on the users UI  \n  //const [lists, setLists] = useState([''])\n\n  const [lists, setLists] = useState([{}]); //This is for displaying when the other user is typing...\n\n  const [userIsTyping, setUserIsTyping] = useState(''); //This is used to change the value of the input to empty string\n\n  const inputRef = useRef(); //This is for our scrollable chat body\n\n  const scrollRef = useRef(); //   scrollRef.scrollTop = scrollRef.scrollHeight;\n  //This sound for an incoming message\n\n  const playNotification = () => {\n    const sound = new Audio(notification);\n    sound.play();\n  }; //Our useConetext for this file\n\n\n  const {\n    loggedInNameValue,\n    setLoggedInNameValue\n  } = useContext(LoggedInNameContext);\n  const {\n    OtherUserNameValue,\n    setOtherUserNameValue\n  } = useContext(OtherUserNameContext); //This is used to delete a message when the trashcan is\n  //clicked on.\n\n  const messageDelete = id => {\n    const newList = lists.filter(l => l.id !== id);\n    setLists(newList);\n  }; //This will be used to dictect when the other user is typing...\n  //and then it will send the ('typing') message\n  //to the other user one connected in the socket server.\n\n\n  const handleTyping = () => {\n    socket.emit('typing', {\n      typingNotification: 'typing...'\n    });\n  }; //This will involke when the other user is not typing or they\n  //just got off the input box\n\n\n  const handleNotTyping = () => {\n    socket.emit('notTyping', ' ');\n  }; //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n\n  const sendMessage = () => {\n    //Here we want to send message to the server to receive so\n    //that it can emit it to other client. After the \"send_message\"\n    //event listener, an object should follow it which will contain\n    //the message data information\n    socket.emit(\"send_message\", {\n      message: text,\n      from: loggedInNameValue\n    }); //This is used to change the value of the input to empty string\n    //when the send button is clicked\n    // inputRef.current.value = \" \";\n    // setText(' '); remove the comment from this line of code, this code is important\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      //The (data.message) below holds the message data received from the server and\n      //and we give each message a random unique ID so that we can do stuff like\n      //deleteing the message using it unique ID etc...\n      const m = data.message;\n      const i = uuid(); //This keeps whatever is in the lists state and add a new data to the list so it can get mapped    \n\n      setLists(prevState => [...prevState, {\n        messageData: m,\n        id: i\n      }]); //This gives a notification alert when a message comes in...\n      // playNotification()      \n    });\n  }, [socket]); //This useEffect handles when the other user is typing.\n  //it receive the information from the server so\n  //we can display it on the front end.\n\n  useEffect(() => {\n    socket.on(\"isTyping\", data => {\n      setUserIsTyping(data.typingNotification);\n      console.log(userIsTyping);\n    });\n  }, [socket]); //This useEffect handles when  the other user is not typing.\n  //it will emit an empty string\n\n  useEffect(() => {\n    socket.on(\"isNotTyping\", data => {\n      setUserIsTyping(data);\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"5px solid black\",\n      paddingBottom: \"800px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatNav\",\n      children: [\"Your conversation with:  \", OtherUserNameValue, \"  \", userIsTyping]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll\",\n      ref: scrollRef,\n      children: lists.map((list, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"listMessageData\",\n        children: list.messageData\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"message...\",\n        onChange: e => setText(e.target.value) //This is to store what user write inside the text variable\n        ,\n        className: \"text\",\n        ref: inputRef,\n        onMouseEnter: handleTyping,\n        onMouseLeave: handleNotTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n          onClick: sendMessage,\n          className: \"txt-btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"+jia2gpB1/0pUk7d3eaCIDwXO94=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["notification","v4","uuid","FaTelegramPlane","FaTrash","useContext","useEffect","useRef","useState","io","LoggedInNameContext","OtherUserNameContext","socket","connect","ChatBody","text","setText","lists","setLists","userIsTyping","setUserIsTyping","inputRef","scrollRef","playNotification","sound","Audio","play","loggedInNameValue","setLoggedInNameValue","OtherUserNameValue","setOtherUserNameValue","messageDelete","id","newList","filter","l","handleTyping","emit","typingNotification","handleNotTyping","sendMessage","message","from","on","data","m","i","prevState","messageData","console","log","border","paddingBottom","map","list","e","target","value"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBodyFolder/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport notification from './notification.mp3'//This for the incoming message notification\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa'\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\r\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\nfunction ChatBody(){\r\n    //This state is for the message that will be sent to the \r\n    //server so it can be emitted.\r\n    const [text, setText] = useState('')\r\n\r\n\r\n    //This state is what will be mapped and printed on the users UI  \r\n    //const [lists, setLists] = useState([''])\r\n    const [lists, setLists] = useState([{}])  \r\n\r\n\r\n    //This is for displaying when the other user is typing...\r\n    const[userIsTyping, setUserIsTyping] = useState('')\r\n\r\n\r\n    //This is used to change the value of the input to empty string\r\n    const inputRef = useRef()\r\n\r\n\r\n    //This is for our scrollable chat body\r\n    const scrollRef = useRef()\r\n    //   scrollRef.scrollTop = scrollRef.scrollHeight;\r\n    \r\n   \r\n    //This sound for an incoming message\r\n   const playNotification = () => {\r\n    const sound = new Audio(notification); \r\n    sound.play()\r\n}\r\n   \r\n    //Our useConetext for this file\r\n    const { loggedInNameValue, setLoggedInNameValue } = useContext(LoggedInNameContext) \r\n\r\n    const { OtherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext)\r\n    \r\n\r\n    //This is used to delete a message when the trashcan is\r\n    //clicked on.\r\n    const messageDelete = (id) => {\r\n        const newList = lists.filter(l => l.id !== id)\r\n        setLists(newList)\r\n    }\r\n\r\n\r\n\r\n    //This will be used to dictect when the other user is typing...\r\n    //and then it will send the ('typing') message\r\n    //to the other user one connected in the socket server.\r\n    const handleTyping = () => {\r\n        socket.emit('typing', {typingNotification: 'typing...'})\r\n    }\r\n\r\n\r\n    //This will involke when the other user is not typing or they\r\n    //just got off the input box\r\n    const handleNotTyping = () => {\r\n        socket.emit('notTyping', ' ')\r\n    }\r\n\r\n\r\n\r\n\r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", {message: text, from: loggedInNameValue })\r\n\r\n\r\n        //This is used to change the value of the input to empty string\r\n        //when the send button is clicked\r\n       // inputRef.current.value = \" \";\r\n       // setText(' '); remove the comment from this line of code, this code is important\r\n       \r\n    };\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data)  => {  \r\n\r\n        //The (data.message) below holds the message data received from the server and\r\n        //and we give each message a random unique ID so that we can do stuff like\r\n        //deleteing the message using it unique ID etc...\r\n        const m = data.message;\r\n        const i = uuid();    \r\n\r\n        //This keeps whatever is in the lists state and add a new data to the list so it can get mapped    \r\n        setLists((prevState) => [...prevState, { messageData: m, id: i } ]);     \r\n\r\n        //This gives a notification alert when a message comes in...\r\n       // playNotification()      \r\n \r\n        })\r\n    }, [socket])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //This useEffect handles when the other user is typing.\r\n    //it receive the information from the server so\r\n    //we can display it on the front end.\r\n\r\n    useEffect(() =>{\r\n\r\n        socket.on(\"isTyping\", (data) => {\r\n          \r\n            setUserIsTyping(data.typingNotification) \r\n            console.log(userIsTyping)\r\n\r\n        })\r\n        \r\n\r\n    }, [socket])\r\n\r\n\r\n     //This useEffect handles when  the other user is not typing.\r\n     //it will emit an empty string\r\n     useEffect(() => {\r\n        socket.on(\"isNotTyping\", (data) => {\r\n            setUserIsTyping(data)\r\n        })\r\n     }, [socket])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div style={{border:\"5px solid black\", paddingBottom: \"800px\"}}>\r\n            <div className=\"chatNav\">\r\n                Your conversation with:  {OtherUserNameValue}  {userIsTyping}\r\n            </div>\r\n            \r\n\r\n            <div className=\"scroll\" ref={scrollRef}>\r\n                     \r\n                {\r\n\r\n                    lists.map((list, id) => (  \r\n\r\n                        <div key={id} id=\"listMessageData\">\r\n\r\n                            {list.messageData}\r\n                        \r\n                        </div>\r\n                    ))\r\n\r\n        \r\n                }\r\n\r\n\r\n        \r\n               \r\n            </div>\r\n\r\n            <div className=\"text-box\">\r\n\r\n                <input type=\"text\" placeholder=\"message...\" \r\n\r\n                onChange={(e) => setText(e.target.value)} //This is to store what user write inside the text variable\r\n\r\n                className=\"text\"\r\n\r\n                ref={inputRef}\r\n\r\n                onMouseEnter={handleTyping}\r\n\r\n                onMouseLeave={handleNotTyping}\r\n         \r\n                />\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                {/* <button onClick={sendMessage} className=\"txt-btn\">send message</button> */} \r\n                <div>\r\n                     <FaTelegramPlane onClick={sendMessage} className=\"txt-btn\"/>\r\n                </div> \r\n                \r\n            </div>\r\n             \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":"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"},"metadata":{},"sourceType":"module"}