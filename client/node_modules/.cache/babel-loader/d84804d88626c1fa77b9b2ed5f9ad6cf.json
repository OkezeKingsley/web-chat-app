{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBodyFolder\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport notification from './notification.mp3'; //This for the incoming message notification\n\nimport { v4 as uuid } from 'uuid';\nimport { FaTrash } from 'react-icons/fa';\nimport { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //This state is for the message that will be sent to the \n  //server so it can be emitted.\n  const [text, setText] = useState(''); //This state is what will be mapped and printed on the users UI  \n  //const [lists, setLists] = useState([''])\n\n  const [lists, setLists] = useState([{}]); //This is used to change the value of the input to empty string\n\n  const inputRef = useRef();\n  const scrollRef = useRef(); //   scrollRef.scrollTop = scrollRef.scrollHeight;\n\n  const playNow = () => {\n    const notification = new Audio(notification);\n    notification.play();\n  }; //This is used to delete a message when the trashcan is\n  //clicked on.\n\n\n  const messageDelete = id => {\n    const newList = lists.filter(l => l.id !== id);\n    setLists(newList);\n  }; //This will be used to dictect when a user is typing...\n  //and then it will send the ('user is typing') message\n  //to every one connected in the socket server.\n\n\n  const handleTyping = () => {\n    socket.emit('typing', 'someone is typing...');\n  }; //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n\n  const sendMessage = () => {\n    //Here we want to send message to the server to receive so\n    //that it can emit it to other client. After the \"send_message\"\n    //event listener, an object should follow it which will contain\n    //the message data information\n    socket.emit(\"send_message\", {\n      message: text\n    }); //This is used to change the value of the input to empty string\n    //when the send button is clicked\n    // inputRef.current.value = \" \";\n    // setText(' '); remove the comment from this line of code, this code is important\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      //The (data.message) below holds the message data received from the server and\n      //and we give each message a random unique ID so that we can do stuff like\n      //deleteing the message using it unique ID etc...\n      const m = data.message;\n      const i = uuid(); //This keeps whatever is in the lists state and add a new data to the list so it can get mapped    \n\n      setLists(prevState => [...prevState, {\n        messageData: m,\n        id: i\n      }]); //This gives a notification alert when a message comes in...\n\n      notification.play();\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"5px solid black\",\n      paddingBottom: \"800px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll\",\n      ref: scrollRef,\n      children: [lists.map((list, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [list.messageData, list.id, /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(FaTrash, {\n            onClick: () => {\n              messageDelete(list.id);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 29\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: playNow,\n        children: \"play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"message...\",\n        onChange: e => setText(e.target.value),\n        className: \"text\",\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"txt-btn\",\n        children: \"send message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"c5EKE9w4TjiTNfF/tqrt02ZqCgI=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["notification","v4","uuid","FaTrash","useEffect","useRef","useState","io","socket","connect","ChatBody","text","setText","lists","setLists","inputRef","scrollRef","playNow","Audio","play","messageDelete","id","newList","filter","l","handleTyping","emit","sendMessage","message","on","data","m","i","prevState","messageData","border","paddingBottom","map","list","e","target","value"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBodyFolder/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport notification from './notification.mp3'//This for the incoming message notification\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FaTrash } from 'react-icons/fa'\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\nfunction ChatBody(){\r\n    //This state is for the message that will be sent to the \r\n    //server so it can be emitted.\r\n    const [text, setText] = useState('')\r\n\r\n\r\n    //This state is what will be mapped and printed on the users UI  \r\n    //const [lists, setLists] = useState([''])\r\n    const [lists, setLists] = useState([{}])  \r\n\r\n\r\n    //This is used to change the value of the input to empty string\r\n    const inputRef = useRef()\r\n\r\n\r\n    const scrollRef = useRef()\r\n    //   scrollRef.scrollTop = scrollRef.scrollHeight;\r\n    \r\n   \r\n\r\n   \r\n\r\n   const playNow = () => {\r\n\r\n    const notification = new Audio(notification); \r\n\r\n     notification.play()\r\n  \r\n}\r\n   \r\n    \r\n\r\n    //This is used to delete a message when the trashcan is\r\n    //clicked on.\r\n    const messageDelete = (id) => {\r\n        const newList = lists.filter(l => l.id !== id)\r\n        setLists(newList)\r\n    }\r\n\r\n\r\n\r\n    //This will be used to dictect when a user is typing...\r\n    //and then it will send the ('user is typing') message\r\n    //to every one connected in the socket server.\r\n    const handleTyping = () => {\r\n        socket.emit('typing', 'someone is typing...')\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", {message: text})\r\n\r\n\r\n        //This is used to change the value of the input to empty string\r\n        //when the send button is clicked\r\n       // inputRef.current.value = \" \";\r\n       // setText(' '); remove the comment from this line of code, this code is important\r\n       \r\n    };\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data)  => {  \r\n\r\n        //The (data.message) below holds the message data received from the server and\r\n        //and we give each message a random unique ID so that we can do stuff like\r\n        //deleteing the message using it unique ID etc...\r\n        const m = data.message;\r\n        const i = uuid();    \r\n\r\n        //This keeps whatever is in the lists state and add a new data to the list so it can get mapped    \r\n        setLists((prevState) => [...prevState, { messageData: m, id: i}]);     \r\n\r\n        //This gives a notification alert when a message comes in...\r\n        notification.play()      \r\n \r\n        })\r\n    }, [socket])\r\n\r\n\r\n    \r\n    return(\r\n        <div style={{border:\"5px solid black\", paddingBottom: \"800px\"}}>\r\n\r\n            <div className=\"scroll\" ref={scrollRef}>\r\n                       \r\n                {\r\n\r\n\r\n                    lists.map((list, id) => (  \r\n\r\n                        <div key={id}>\r\n\r\n                            {list.messageData}\r\n                            {list.id}\r\n                            \r\n                            <div >\r\n                                 <FaTrash onClick={ () => { messageDelete(list.id)  }}/>\r\n                            </div>\r\n\r\n                        </div>\r\n                    ))\r\n\r\n        \r\n                }\r\n\r\n\r\n        \r\n<button onClick={playNow}>play</button>  \r\n               \r\n            </div>\r\n\r\n            <div className=\"text-box\">\r\n\r\n                <input type=\"text\" placeholder=\"message...\" \r\n\r\n                onChange={(e) => setText(e.target.value)} \r\n\r\n                className=\"text\"\r\n\r\n                ref={inputRef}\r\n\r\n              \r\n                />\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                  <button onClick={sendMessage} className=\"txt-btn\">send message</button> \r\n            </div>\r\n             \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":"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"},"metadata":{},"sourceType":"module"}