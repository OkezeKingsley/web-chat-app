{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\components\\\\ChatPage.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport ChatBar from './ChatBar';\nimport ChatBody from './ChatBody';\nimport ChatFooter from './ChatFooter'; //Update the ChatPage.js file to listen to the \n//message from the server and display it to all users.\n// From the code snippet below, Socket.io listens to the messages \n// sent via the messageResponse event and spreads the data into \n// the messages array. The array of messages is passed into the \n// ChatBody component for display on the UI. Update the ChatBody.js \n// file to render the data from the array of messages.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatPage(_ref) {\n  _s();\n\n  let {\n    socket\n  } = _ref;\n  const [messages, setMessages] = useState([]); //this is for typing status )if one is typing or not\n\n  const [typingStatus, setTypingStatus] = useState('');\n  useEffect(() => {\n    socket.on('messageResponse', data => setMessages([...messages, data]));\n  }, [socket, messages]); //fetches the user is typing information.\n\n  useEffect(() => {\n    socket.on('typingResponse', data => setTypingStatus(data));\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(ChatBar, {\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat__main\",\n      children: [/*#__PURE__*/_jsxDEV(ChatBody, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ChatFooter, {\n        socket: socket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatPage, \"JnuRg+pnrLpWr2P3ApH/J5k5Zj4=\");\n\n_c = ChatPage;\nexport default ChatPage;\n/*IMPORTANT NOTE:\r\n\r\n    From the code snippet above, Socket.io listens to the messages \r\n    sent via the messageResponse event and spreads the data into \r\n    the messages array. The array of messages is passed into the \r\n    ChatBody component for display on the UI. Update the ChatBody.js \r\n    file to render the data from the array of messages.\r\n\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["useEffect","useState","ChatBar","ChatBody","ChatFooter","ChatPage","socket","messages","setMessages","typingStatus","setTypingStatus","on","data"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/components/ChatPage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport ChatBar from './ChatBar';\r\nimport ChatBody from './ChatBody';\r\nimport ChatFooter from './ChatFooter';\r\n\r\n\r\n//Update the ChatPage.js file to listen to the \r\n//message from the server and display it to all users.\r\n\r\n\r\n// From the code snippet below, Socket.io listens to the messages \r\n// sent via the messageResponse event and spreads the data into \r\n// the messages array. The array of messages is passed into the \r\n// ChatBody component for display on the UI. Update the ChatBody.js \r\n// file to render the data from the array of messages.\r\n\r\n\r\nfunction ChatPage({ socket }){\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    //this is for typing status )if one is typing or not\r\n    const [typingStatus, setTypingStatus] = useState('');\r\n\r\n    useEffect(() => {\r\n      socket.on('messageResponse', (data) => setMessages([...messages, data]));\r\n    }, [socket, messages]); \r\n\r\n    //fetches the user is typing information.\r\n    useEffect(() => {\r\n        socket.on('typingResponse', (data) => setTypingStatus(data));\r\n      }, [socket]);\r\n    \r\n    return(\r\n        <div className=\"chat\">\r\n            <ChatBar socket={socket}/>\r\n            <div className=\"chat__main\">\r\n                <ChatBody messages={messages}/>\r\n                <ChatFooter socket={socket}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatPage;\r\n\r\n/*IMPORTANT NOTE:\r\n\r\n    From the code snippet above, Socket.io listens to the messages \r\n    sent via the messageResponse event and spreads the data into \r\n    the messages array. The array of messages is passed into the \r\n    ChatBody component for display on the UI. Update the ChatBody.js \r\n    file to render the data from the array of messages.\r\n\r\n*/"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAGA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;AAGA,SAASC,QAAT,OAA6B;EAAA;;EAAA,IAAX;IAAEC;EAAF,CAAW;EACzB,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC,CADyB,CAGzB;;EACA,MAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;EAEAD,SAAS,CAAC,MAAM;IACdM,MAAM,CAACK,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAUJ,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcK,IAAd,CAAD,CAAlD;EACD,CAFQ,EAEN,CAACN,MAAD,EAASC,QAAT,CAFM,CAAT,CANyB,CAUzB;;EACAP,SAAS,CAAC,MAAM;IACZM,MAAM,CAACK,EAAP,CAAU,gBAAV,EAA6BC,IAAD,IAAUF,eAAe,CAACE,IAAD,CAArD;EACD,CAFM,EAEJ,CAACN,MAAD,CAFI,CAAT;EAIA,oBACI;IAAK,SAAS,EAAC,MAAf;IAAA,wBACI,QAAC,OAAD;MAAS,MAAM,EAAEA;IAAjB;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAK,SAAS,EAAC,YAAf;MAAA,wBACI,QAAC,QAAD;QAAU,QAAQ,EAAEC;MAApB;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,UAAD;QAAY,MAAM,EAAED;MAApB;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AASH;;GAxBQD,Q;;KAAAA,Q;AA0BT,eAAeA,QAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}