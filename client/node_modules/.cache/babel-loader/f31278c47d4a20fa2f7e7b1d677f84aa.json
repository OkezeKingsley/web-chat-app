{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatListFolder\\\\ChatList.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { FaSistrix } from \"react-icons/fa\";\nimport './ChatList.css';\nimport axios from 'axios';\nimport { OtherUserNameContext } from \"../contextFolder/OtherUserNameContext\";\nimport { LoggedInNameContext } from \"../contextFolder/LoggedInNameContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatList() {\n  _s();\n\n  //This is to fetch all the registered users in the database\n  const [listOfUsersFromDatabase, setListOfUsersFromDatabase] = useState([{\n    name: \"kingsley\"\n  }, {\n    name: \"john\"\n  }, {\n    name: \"king\"\n  }, {\n    name: \"kingslet\"\n  }, {\n    name: \"cindy\"\n  }]);\n  console.log(listOfUsersFromDatabase);\n  useEffect(() => {\n    axios.get(\"http://localhost:4000/getUser\").then(response => {//           setListOfUsersFromDatabase(response.data)\n    }).catch(error => {\n      console.log(\"oops! Couldn't reach the server\" + error);\n    });\n  }, []); //useRefs for this component\n  //  \n\n  const filterParentContainerRef = useRef();\n  const conversedWithParentContainerRef = useRef();\n\n  const hideFilterParentContainerRef = () => {\n    filterParentContainerRef.current.style.display = \"none\";\n    conversedWithParentContainerRef.style.display = \"true\";\n  };\n\n  const showFilterParentContainerRef = () => {\n    filterParentContainerRef.current.style.display = \"true\";\n    conversedWithParentContainerRef.style.display = \"none\";\n  };\n\n  const hideConveresedParentContainerRef = () => {\n    conversedWithParentContainerRef.style.display = \"none\";\n  }; //Context api for this file\n\n\n  const {\n    OtherUserNameValue,\n    setOtherUserNameValue\n  } = useContext(OtherUserNameContext);\n  /* - - - - - [ALL USESTATE FOR THIS PARTICULAR COMPONENT] - - - - - */\n  //This will help us storing the list of user that we've conversed with\n\n  const [conversedWithLists, setConversedWithLists] = useState(['']); //This setFilteredData will store the filtered element based on the user\n  //search input and then store it in the filteredData variable so we can\n  //map it\n\n  const [filteredData, setFilteredData] = useState([]); //This is used for capturing what the user types into the search box\n\n  const [searchWord, setSearchWord] = useState();\n  /* - - - - - [ALL OUR FUNCTIONS FOR THIS PARTICULAR COMPONENT] - - - - -*/\n  //This is to store what the user type in the search box so we can\n  //use for filtering and also filter the name of user in realtime \n  //based on serach input\n\n  const onChangeFunction = event => {\n    //This will grab the value in the user type in the input box and store it in the searchFilter state\n    //please note: the toLowerCase() will convert the value to lowercase so that it can match with the\n    //lowercase name properties in the database. (we'd convert all name properties in DB to lowercase too)\n    setSearchWord(event.target.value.toLowerCase()); //This will filter out users that matches the character inputted by the user in realtime\n    //and then store it in the newFilter variable. please note: the toLowerCase() will convert the value of the\n    // DB name property to lowercase so that it can match with the value from the search input which we already \n    //convertted to lowercase using the toLowercase() method.\n\n    const newFilter = listOfUsersFromDatabase.filter(listOfUsers => {\n      //Here we're returning users that their names matches with the value the user is inputting as they\n      //are typing it out on the go...\n      return listOfUsers.name.toLowerCase().includes(searchWord.toLowerCase());\n    }); //Meaning if the searchWord is empty, return an empty string\n\n    if (searchWord.length < 1) {\n      setFilteredData([{}]);\n    } else {\n      //This will set the searchLists to the new filtered data stored in the arr variable\n\n      /* setFilteredData(newFilter)*/\n      setFilteredData(newFilter);\n    } //This sets the converesed with display to be displayed as none when search is \n    //being carried on.\n    //    hideConveresedParentContainerRef()\n\n  }; //This function is used for getting the user with the name that matches what the user is typed in\n  //the search box once they clicked the search button close to the search input box\n\n\n  const searchUser = () => {\n    const newArray = listOfUsersFromDatabase.filter(listOfUsers => {\n      //Here, we're saying: if the name the user provide doesn't exist, we should print an error message\n      //else, the program should return the name that matches what the user is searching for\n      if (listOfUsers.name.toLowerCase() !== searchWord.toLowerCase()) {\n        return console.log('user dont exist');\n      } else {\n        return listOfUsers.name.toLowerCase() === searchWord.toLowerCase();\n      }\n    });\n    setFilteredData(newArray);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"5px solid black\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-input-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-input\",\n        onChange: onChangeFunction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FaSistrix, {\n        className: \"search-input-icon\",\n        onClick: searchUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filterAndConversewithParentDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filterParentContainer\",\n        ref: filterParentContainerRef,\n        children: filteredData.map((filter, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d\",\n          onClick: () => {\n            if (conversedWithLists.includes(filter.name)) {//Here we are saying if the conversedWithLists state have the name\n              //of the filteredData, it shouldn't add to it list but if it does,\n              //it should add to it list. And we handled that with the else if.  \n            } else if (!conversedWithLists.includes(filter.name)) {\n              setConversedWithLists(prevState => [...prevState, filter.name]);\n            }\n\n            hideFilterParentContainerRef(); // conversedWithListsRef.current.style.display = 'none'  \n            //creating room for loggedInUser and this selected user\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: filter.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversedWithParentContainer\",\n        ref: conversedWithParentContainerRef,\n        children: conversedWithLists.map((conversedWithList, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversed\",\n          onClick: () => {\n            {\n              /*onClick of a user in the chatlist will pass the name of the user to \r\n              the chatbody using the contextapi crafted for OtherUserNameValue*/\n            }\n            setOtherUserNameValue(conversedWithList);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: conversedWithList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 21\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatList, \"153z+qAV6UlZftjyB0iAV2SxT5I=\");\n\n_c = ChatList;\nexport default ChatList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatList\");","map":{"version":3,"names":["useContext","useEffect","useRef","useState","FaSistrix","axios","OtherUserNameContext","LoggedInNameContext","ChatList","listOfUsersFromDatabase","setListOfUsersFromDatabase","name","console","log","get","then","response","catch","error","filterParentContainerRef","conversedWithParentContainerRef","hideFilterParentContainerRef","current","style","display","showFilterParentContainerRef","hideConveresedParentContainerRef","OtherUserNameValue","setOtherUserNameValue","conversedWithLists","setConversedWithLists","filteredData","setFilteredData","searchWord","setSearchWord","onChangeFunction","event","target","value","toLowerCase","newFilter","filter","listOfUsers","includes","length","searchUser","newArray","border","map","id","prevState","conversedWithList"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatListFolder/ChatList.js"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { FaSistrix } from \"react-icons/fa\";\r\nimport './ChatList.css';\r\nimport axios from 'axios';\r\nimport { OtherUserNameContext } from \"../contextFolder/OtherUserNameContext\";\r\nimport { LoggedInNameContext } from \"../contextFolder/LoggedInNameContext\";\r\n\r\n\r\n\r\nfunction ChatList(){\r\n\r\n    //This is to fetch all the registered users in the database\r\n\r\n        const [listOfUsersFromDatabase, setListOfUsersFromDatabase] = useState([ \r\n            {name: \"kingsley\"},\r\n            {name: \"john\"},\r\n            {name: \"king\"},\r\n            {name: \"kingslet\"},\r\n            {name: \"cindy\"},\r\n        ])\r\n   console.log(listOfUsersFromDatabase)\r\n        useEffect(( ) => {\r\n\r\n            axios.get(\"http://localhost:4000/getUser\").then((response) => {\r\n           \r\n //           setListOfUsersFromDatabase(response.data)\r\n        \r\n            } ).catch ( (error) => {\r\n        \r\n                console.log(\"oops! Couldn't reach the server\" + error)\r\n        \r\n            } )\r\n        }, [])\r\n        \r\n    \r\n\r\n    //useRefs for this component\r\n  //  \r\n    const filterParentContainerRef = useRef()\r\n\r\n    const conversedWithParentContainerRef = useRef()\r\n\r\n\r\n    const hideFilterParentContainerRef = () => {\r\n\r\n        filterParentContainerRef.current.style.display = \"none\"\r\n\r\n        conversedWithParentContainerRef.style.display = \"true\"\r\n\r\n    }\r\n\r\n\r\n    const showFilterParentContainerRef = () => {\r\n\r\n        filterParentContainerRef.current.style.display = \"true\"\r\n\r\n        conversedWithParentContainerRef.style.display = \"none\"\r\n\r\n    }\r\n\r\n    const hideConveresedParentContainerRef = () => {\r\n\r\n         conversedWithParentContainerRef.style.display = \"none\"\r\n\r\n    }\r\n    //Context api for this file\r\n    const { OtherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext) \r\n\r\n\r\n\r\n    /* - - - - - [ALL USESTATE FOR THIS PARTICULAR COMPONENT] - - - - - */\r\n\r\n    //This will help us storing the list of user that we've conversed with\r\n    const [conversedWithLists, setConversedWithLists] = useState([''])\r\n\r\n    //This setFilteredData will store the filtered element based on the user\r\n    //search input and then store it in the filteredData variable so we can\r\n    //map it\r\n    const [filteredData, setFilteredData] = useState([])\r\n\r\n    //This is used for capturing what the user types into the search box\r\n    const [searchWord, setSearchWord] = useState();\r\n   \r\n\r\n\r\n    /* - - - - - [ALL OUR FUNCTIONS FOR THIS PARTICULAR COMPONENT] - - - - -*/\r\n\r\n    //This is to store what the user type in the search box so we can\r\n    //use for filtering and also filter the name of user in realtime \r\n    //based on serach input\r\n    const onChangeFunction = ( event ) => {\r\n\r\n        //This will grab the value in the user type in the input box and store it in the searchFilter state\r\n        //please note: the toLowerCase() will convert the value to lowercase so that it can match with the\r\n        //lowercase name properties in the database. (we'd convert all name properties in DB to lowercase too)\r\n         setSearchWord(event.target.value.toLowerCase())\r\n        \r\n        //This will filter out users that matches the character inputted by the user in realtime\r\n        //and then store it in the newFilter variable. please note: the toLowerCase() will convert the value of the\r\n        // DB name property to lowercase so that it can match with the value from the search input which we already \r\n        //convertted to lowercase using the toLowercase() method.\r\n        const newFilter = listOfUsersFromDatabase.filter( (listOfUsers) => {  \r\n\r\n        //Here we're returning users that their names matches with the value the user is inputting as they\r\n        //are typing it out on the go...\r\n        return listOfUsers.name.toLowerCase().includes(searchWord.toLowerCase())\r\n          \r\n            \r\n        })\r\n\r\n\r\n\r\n        \r\n\r\n\r\n        //Meaning if the searchWord is empty, return an empty string\r\n           if(searchWord.length < 1){\r\n\r\n            setFilteredData([{}])\r\n            \r\n            \r\n\r\n           } else {\r\n\r\n            //This will set the searchLists to the new filtered data stored in the arr variable\r\n            /* setFilteredData(newFilter)*/\r\n\r\n             setFilteredData(newFilter)\r\n        }\r\n           \r\n\r\n        //This sets the converesed with display to be displayed as none when search is \r\n        //being carried on.\r\n\r\n       \r\n    //    hideConveresedParentContainerRef()\r\n    \r\n    }\r\n\r\n\r\n   \r\n    //This function is used for getting the user with the name that matches what the user is typed in\r\n    //the search box once they clicked the search button close to the search input box\r\n    const searchUser = () => {\r\n\r\n       const newArray = listOfUsersFromDatabase.filter( (listOfUsers) => {\r\n          \r\n        //Here, we're saying: if the name the user provide doesn't exist, we should print an error message\r\n        //else, the program should return the name that matches what the user is searching for\r\n        \r\n          if (listOfUsers.name.toLowerCase() !== searchWord.toLowerCase() ){\r\n\r\n               return console.log('user dont exist');\r\n\r\n          } else { \r\n            \r\n            return listOfUsers.name.toLowerCase() === searchWord.toLowerCase(); \r\n        \r\n        }\r\n      })\r\n\r\n      setFilteredData(newArray)\r\n     \r\n\r\n    }\r\n\r\n\r\n    return(\r\n        <div style={{border:\"5px solid black\"}}>\r\n\r\n            {/*This is for the search user's input box*/}\r\n\r\n            <div className=\"search-input-div\">\r\n\r\n                <input type=\"text\" className=\"search-input\" onChange={onChangeFunction}></input>\r\n\r\n                <FaSistrix className=\"search-input-icon\" onClick={searchUser}/>\r\n              \r\n            </div>\r\n\r\n\r\n            {/*This is for when user is searching for name. It filters the names available based on\r\n               the user query or search */}\r\n            <div className=\"filterAndConversewithParentDiv\">\r\n\r\n\r\n             <div className=\"filterParentContainer\" ref={filterParentContainerRef}>\r\n\r\n                {\r\n                    filteredData.map((filter, id) => ( \r\n\r\n                    <div key={id} className=\"d\"  onClick={( ) => {\r\n\r\n                        if (conversedWithLists.includes(filter.name)) {\r\n\r\n                        //Here we are saying if the conversedWithLists state have the name\r\n                        //of the filteredData, it shouldn't add to it list but if it does,\r\n                        //it should add to it list. And we handled that with the else if.  \r\n\r\n                        } else if( !conversedWithLists.includes(filter.name) ){\r\n\r\n                            setConversedWithLists( (prevState) => [...prevState, filter.name ]) \r\n                        }\r\n                         \r\n\r\n                        hideFilterParentContainerRef()\r\n                      // conversedWithListsRef.current.style.display = 'none'  \r\n\r\n                      //creating room for loggedInUser and this selected user\r\n                     \r\n                        \r\n                        }}>\r\n                       \r\n                        <p>{filter.name}</p>\r\n\r\n                    </div>\r\n                    \r\n                    ))\r\n              \r\n                 }\r\n           \r\n             </div>\r\n\r\n\r\n\r\n\r\n          {/*This maps who the user has conversed with. it shows all the list*/}\r\n        <div className=\"conversedWithParentContainer\" ref={conversedWithParentContainerRef}>\r\n          { \r\n          \r\n            conversedWithLists.map((conversedWithList, id) => ( \r\n\r\n                <div key={id}  className=\"conversed\" onClick={ ( ) => {\r\n\r\n                   {/*onClick of a user in the chatlist will pass the name of the user to \r\n                    the chatbody using the contextapi crafted for OtherUserNameValue*/} \r\n                  \r\n                    setOtherUserNameValue(conversedWithList)\r\n                   \r\n\r\n                }}>\r\n\r\n                    <p>{conversedWithList}</p>\r\n                   \r\n                </div>\r\n                \r\n                ))\r\n            }       \r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatList;"],"mappings":"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"},"metadata":{},"sourceType":"module"}