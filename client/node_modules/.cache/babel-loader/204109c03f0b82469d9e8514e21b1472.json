{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\components\\\\ChatFooter.js\",\n    _s = $RefreshSig$();\n\n//Here, we’ll create the input and the send button at the \n//bottom of the chat page. The message and the username \n//appear in the console after submitting the form.\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatFooter(_ref) {\n  _s();\n\n  let {\n    socket\n  } = _ref;\n  const [message, setMessage] = useState('');\n\n  const handleSendMessage = e => {\n    e.preventDefault();\n\n    if (message.trim() && localStorage.getItem('userName')) {\n      socket.emit('message', {\n        text: message,\n        name: localStorage.getItem('userName'),\n        id: `${socket.id}${Math.random()}`,\n        socketID: socket.id\n      });\n    }\n\n    setMessage('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat__footer\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Write message\",\n        className: \"message\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sendBtn\",\n        children: \"SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ChatFooter, \"l8KXAebGu4sZHsyCIQX7P8si41w=\");\n\n_c = ChatFooter;\n;\nexport default ChatFooter;\n/* IMPORTANT NOTE:\r\n        The handleSendMessage function checks if the text field is empty \r\n      and if the username exists in the local storage (sign-in from the Home page) \r\n      before sending the message event containing \r\n      the user input, username, the message ID generated, \r\n      and the socket or client ID to the Node.js server.\r\n  */\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatFooter\");","map":{"version":3,"names":["useState","ChatFooter","socket","message","setMessage","handleSendMessage","e","preventDefault","trim","localStorage","getItem","emit","text","name","id","Math","random","socketID","target","value"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/components/ChatFooter.js"],"sourcesContent":["//Here, we’ll create the input and the send button at the \r\n//bottom of the chat page. The message and the username \r\n//appear in the console after submitting the form.\r\n\r\nimport { useState } from 'react';\r\n\r\nfunction ChatFooter({ socket }) {\r\n    const [message, setMessage] = useState('');\r\n  \r\n    const handleSendMessage = (e) => {\r\n      e.preventDefault();\r\n      if (message.trim() && localStorage.getItem('userName')) {\r\n        socket.emit('message', {\r\n          text: message,\r\n          name: localStorage.getItem('userName'),\r\n          id: `${socket.id}${Math.random()}`,\r\n          socketID: socket.id,\r\n        });\r\n      }\r\n\r\n      setMessage('');\r\n    };\r\n    return (\r\n      <div className=\"chat__footer\">\r\n        <form className=\"form\" onSubmit={handleSendMessage}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Write message\"\r\n            className=\"message\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n          />\r\n          <button className=\"sendBtn\">SEND</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default ChatFooter;\r\n\r\n\r\n\r\n  /* IMPORTANT NOTE:\r\n\r\n        The handleSendMessage function checks if the text field is empty \r\n        and if the username exists in the local storage (sign-in from the Home page) \r\n        before sending the message event containing \r\n        the user input, username, the message ID generated, \r\n        and the socket or client ID to the Node.js server.\r\n\r\n  */\r\n"],"mappings":";;;AAAA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,UAAT,OAAgC;EAAA;;EAAA,IAAZ;IAAEC;EAAF,CAAY;EAC5B,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,EAAD,CAAtC;;EAEA,MAAMK,iBAAiB,GAAIC,CAAD,IAAO;IAC/BA,CAAC,CAACC,cAAF;;IACA,IAAIJ,OAAO,CAACK,IAAR,MAAkBC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAtB,EAAwD;MACtDR,MAAM,CAACS,IAAP,CAAY,SAAZ,EAAuB;QACrBC,IAAI,EAAET,OADe;QAErBU,IAAI,EAAEJ,YAAY,CAACC,OAAb,CAAqB,UAArB,CAFe;QAGrBI,EAAE,EAAG,GAAEZ,MAAM,CAACY,EAAG,GAAEC,IAAI,CAACC,MAAL,EAAc,EAHZ;QAIrBC,QAAQ,EAAEf,MAAM,CAACY;MAJI,CAAvB;IAMD;;IAEDV,UAAU,CAAC,EAAD,CAAV;EACD,CAZD;;EAaA,oBACE;IAAK,SAAS,EAAC,cAAf;IAAA,uBACE;MAAM,SAAS,EAAC,MAAhB;MAAuB,QAAQ,EAAEC,iBAAjC;MAAA,wBACE;QACE,IAAI,EAAC,MADP;QAEE,WAAW,EAAC,eAFd;QAGE,SAAS,EAAC,SAHZ;QAIE,KAAK,EAAEF,OAJT;QAKE,QAAQ,EAAGG,CAAD,IAAOF,UAAU,CAACE,CAAC,CAACY,MAAF,CAASC,KAAV;MAL7B;QAAA;QAAA;QAAA;MAAA,QADF,eAQE;QAAQ,SAAS,EAAC,SAAlB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QARF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAcD;;GA9BMlB,U;;KAAAA,U;AA8BN;AAED,eAAeA,UAAf;AAIA;AACF;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}