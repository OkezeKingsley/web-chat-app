{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //This state is for the message that will be sent to the \n  //server so it can be emitted.\n  const [text, setText] = useState(''); //This state is what will be mapped and printed on the users UI  \n\n  const [messageReceived, setMessageReceived] = useState();\n  const [array, setArray] = useState(['hi', 'hey', 'yo']);\n  console.log(array); //frist let's convert the string into an array so that \n  //we can easily map the messages properly on the UI\n  //array\n  //    const [array, setArray] = useState([])\n  //    setArray((prevState) => [...prevState, {messageReceived}]);\n  //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n  const sendMessage = () => {\n    //Here we want to send message to the server to receive so\n    //that it can emit it to other client. After the \"send_message\"\n    //event listener, an object should follow it which will contain\n    //the message data information\n    socket.emit(\"send_message\", {\n      message: text\n    });\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageReceived(data.message);\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [array.map((array, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: array.array\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"message...\",\n        onChange: e => setText(e.target.value),\n        className: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"txt-btn\",\n        children: \"send message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"qtHgE0GmvhPxYIn9o2b8T/HGifg=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["useEffect","useState","io","socket","connect","ChatBody","text","setText","messageReceived","setMessageReceived","array","setArray","console","log","sendMessage","emit","message","on","data","map","index","e","target","value"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport { useEffect, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\nfunction ChatBody(){\r\n    //This state is for the message that will be sent to the \r\n    //server so it can be emitted.\r\n    const [text, setText] = useState('')\r\n\r\n    //This state is what will be mapped and printed on the users UI  \r\n    const [messageReceived, setMessageReceived] = useState()\r\n\r\n    \r\n    const [array, setArray] = useState(['hi', 'hey', 'yo'])\r\n    console.log(array)\r\n    \r\n     //frist let's convert the string into an array so that \r\n     //we can easily map the messages properly on the UI\r\n\r\n     //array\r\n //    const [array, setArray] = useState([])\r\n //    setArray((prevState) => [...prevState, {messageReceived}]);\r\n\r\n    \r\n\r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", {message: text})\r\n    };\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data) => {\r\n           \r\n            setMessageReceived(data.message)\r\n            \r\n\r\n        })\r\n    }, [socket])\r\n\r\n    return(\r\n        <div>\r\n\r\n                { \r\n                    \r\n                 array.map((array, index) => ( \r\n                    <div key={index}>\r\n                        {array.array}\r\n                    </div>\r\n                ))\r\n                 \r\n                }\r\n                       \r\n\r\n\r\n            <div className=\"text-box\">\r\n                <input type=\"text\" placeholder=\"message...\" onChange={(e) => setText(e.target.value)} className=\"text\"/>\r\n\r\n                <button onClick={sendMessage} className=\"txt-btn\">send message</button> \r\n            </div>\r\n            \r\n\r\n                \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":";;;AAAA,OAAO,gBAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,EAAP,MAAgB,kBAAhB;;AAEA,MAAMC,MAAM,GAAGD,EAAE,CAACE,OAAH,CAAW,uBAAX,CAAf,C,CAAoD;;AAEpD,SAASC,QAAT,GAAmB;EAAA;;EACf;EACA;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC,CAHe,CAKf;;EACA,MAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,EAAtD;EAGA,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,CAAD,CAAlC;EACAW,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAVe,CAYd;EACA;EAEA;EACJ;EACA;EAIG;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMI,WAAW,GAAG,MAAM;IACtB;IACA;IACA;IACA;IACAX,MAAM,CAACY,IAAP,CAAY,cAAZ,EAA4B;MAACC,OAAO,EAAEV;IAAV,CAA5B;EACH,CAND,CA3Be,CAoCf;EACA;EACA;;;EACAN,SAAS,CAAC,MAAM;IACZG,MAAM,CAACc,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAU;MAEnCT,kBAAkB,CAACS,IAAI,CAACF,OAAN,CAAlB;IAGH,CALD;EAMH,CAPQ,EAON,CAACb,MAAD,CAPM,CAAT;EASA,oBACI;IAAA,WAISO,KAAK,CAACS,GAAN,CAAU,CAACT,KAAD,EAAQU,KAAR,kBACP;MAAA,UACKV,KAAK,CAACA;IADX,GAAUU,KAAV;MAAA;MAAA;MAAA;IAAA,QADH,CAJT,eAcI;MAAK,SAAS,EAAC,UAAf;MAAA,wBACI;QAAO,IAAI,EAAC,MAAZ;QAAmB,WAAW,EAAC,YAA/B;QAA4C,QAAQ,EAAGC,CAAD,IAAOd,OAAO,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAApE;QAAsF,SAAS,EAAC;MAAhG;QAAA;QAAA;QAAA;MAAA,QADJ,eAGI;QAAQ,OAAO,EAAET,WAAjB;QAA8B,SAAS,EAAC,SAAxC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAdJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA0BH;;GA1EQT,Q;;KAAAA,Q;AA4ET,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}