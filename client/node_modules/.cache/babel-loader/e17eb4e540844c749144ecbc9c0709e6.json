{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatListFolder\\\\ChatList.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { FaSistrix } from \"react-icons/fa\";\nimport './ChatList.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatList() {\n  _s();\n\n  //This is to fetch all the registered users in the database\n  const [listOfUsersFromDatabase, setListOfUsersFromDatabase] = useState();\n  useEffect(() => {\n    axios.get(\"http://localhost:4000/getUser\").then(response => {\n      console.log(response.data);\n      setListOfUsersFromDatabase(response.data);\n    }).catch(error => {\n      console.log(\"oops! Couldn't reach the server\" + error);\n    });\n  }, []);\n  /* - - - - - [ALL USESTATE FOR THIS PARTICULAR COMPONENT] - - - - - */\n  //This will help us storing the list of user from DB here\n  //  const [searchLists, setSearchLists] = useState( listOfUsersFromDatabase )\n  //This setFilteredData will store the filtered element based on the user\n  //search input and then store it in the filteredData variable so we can\n  //map it\n\n  const [filteredData, setFilteredData] = useState([]); //This is used for capturing what the user types into the search box\n\n  const [searchWord, setSearchWord] = useState();\n  /* - - - - - [ALL OUR FUNCTIONS FOR THIS PARTICULAR COMPONENT] - - - - -*/\n  //This is to store what the user type in the search box so we can\n  //use for filtering and also filter the name of user in realtime \n  //based on serach input\n\n  const onChangeFunction = event => {\n    //This will grab the value in the user type in the input box and store it in the searchFilter state\n    //please note: the toLowerCase() will convert the value to lowercase so that it can match with the\n    //lowercase name properties in the database. (we'd convert all name properties in DB to lowercase too)\n    setSearchWord(event.target.value.toLowerCase()); //This will filter out users that matches the character inputted by the user in realtime\n    //and then store it in the newFilter variable. please note: the toLowerCase() will convert the value of the\n    // DB name property to lowercase so that it can match with the value from the search input which we already \n    //convertted to lowercase using the toLowercase() method.\n\n    const newFilter = listOfUsersFromDatabase.filter(listOfUsers => {\n      //Here we're returning users that their names matches with the value the user is inputting as they\n      //are typing it out on the go...\n      return listOfUsers.name.toLowerCase().includes(searchWord.toLowerCase());\n    }); //Meaning if the searchWord is empty, return an empty string\n\n    if (searchWord == \" \") {\n      setFilteredData([{}]);\n    } else {\n      //This will set the searchLists to the new filtered data stored in the arr variable\n\n      /* setFilteredData(newFilter)*/\n      setFilteredData(newFilter);\n    } //This states that when the length of the serachWord decreases, the program should\n    //keep filtering users based on the remaining keyword\n\n\n    if (searchWord.length - 1) {\n      setFilteredData(newFilter);\n    }\n  }; //This function is used for getting the user with the name that matches what the user is typed in\n  //the search box once they clicked the search button close to the search input box\n\n\n  const searchUser = () => {\n    const newArray = listOfUsersFromDatabase.filter(listOfUsers => {\n      //Here, we're saying: if the name the user provide doesn't exist, we should print an error message\n      //else, the program should return the name that matches what the user is searching for\n      if (listOfUsers.name.toLowerCase() !== searchWord.toLowerCase()) {\n        console.log('user dont exist');\n      } else {\n        return listOfUsers.name.toLowerCase() === searchWord.toLowerCase();\n      }\n    });\n    setFilteredData(newArray);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"5px solid black\",\n      paddingBottom: \"800px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-input-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-input\",\n        onChange: onChangeFunction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FaSistrix, {\n        className: \"search-input-icon\",\n        onClick: searchUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filterDiv\",\n      ref: true,\n      children: filteredData.map((sL, id) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: sL.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: sL.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatList, \"F50H3g99251aPPhOsazVJFNfIkc=\");\n\n_c = ChatList;\nexport default ChatList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatList\");","map":{"version":3,"names":["useEffect","useRef","useState","FaSistrix","axios","ChatList","listOfUsersFromDatabase","setListOfUsersFromDatabase","get","then","response","console","log","data","catch","error","filteredData","setFilteredData","searchWord","setSearchWord","onChangeFunction","event","target","value","toLowerCase","newFilter","filter","listOfUsers","name","includes","length","searchUser","newArray","border","paddingBottom","map","sL","id"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatListFolder/ChatList.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { FaSistrix } from \"react-icons/fa\";\r\nimport './ChatList.css';\r\nimport axios from 'axios';\r\n\r\nfunction ChatList(){\r\n\r\n    //This is to fetch all the registered users in the database\r\n\r\n    const [listOfUsersFromDatabase, setListOfUsersFromDatabase] = useState( )\r\n    \r\n        useEffect(( ) => {\r\n\r\n            axios.get(\"http://localhost:4000/getUser\").then((response) => {\r\n            console.log(response.data)\r\n            setListOfUsersFromDatabase(response.data)\r\n        \r\n            } ).catch ( (error) => {\r\n        \r\n                console.log(\"oops! Couldn't reach the server\" + error)\r\n        \r\n            } )\r\n        }, [])\r\n        \r\n      \r\n\r\n\r\n\r\n\r\n    \r\n\r\n    /* - - - - - [ALL USESTATE FOR THIS PARTICULAR COMPONENT] - - - - - */\r\n\r\n    //This will help us storing the list of user from DB here\r\n  //  const [searchLists, setSearchLists] = useState( listOfUsersFromDatabase )\r\n\r\n    //This setFilteredData will store the filtered element based on the user\r\n    //search input and then store it in the filteredData variable so we can\r\n    //map it\r\n    const [filteredData, setFilteredData] = useState([])\r\n\r\n    //This is used for capturing what the user types into the search box\r\n    const [searchWord, setSearchWord] = useState();\r\n\r\n\r\n\r\n    /* - - - - - [ALL OUR FUNCTIONS FOR THIS PARTICULAR COMPONENT] - - - - -*/\r\n\r\n    //This is to store what the user type in the search box so we can\r\n    //use for filtering and also filter the name of user in realtime \r\n    //based on serach input\r\n    const onChangeFunction = ( event ) => {\r\n\r\n        //This will grab the value in the user type in the input box and store it in the searchFilter state\r\n        //please note: the toLowerCase() will convert the value to lowercase so that it can match with the\r\n        //lowercase name properties in the database. (we'd convert all name properties in DB to lowercase too)\r\n         setSearchWord(event.target.value.toLowerCase())\r\n        \r\n        //This will filter out users that matches the character inputted by the user in realtime\r\n        //and then store it in the newFilter variable. please note: the toLowerCase() will convert the value of the\r\n        // DB name property to lowercase so that it can match with the value from the search input which we already \r\n        //convertted to lowercase using the toLowercase() method.\r\n        const newFilter = listOfUsersFromDatabase.filter( (listOfUsers) => {  \r\n\r\n        //Here we're returning users that their names matches with the value the user is inputting as they\r\n        //are typing it out on the go...\r\n           return listOfUsers.name.toLowerCase().includes(searchWord.toLowerCase())\r\n            \r\n        })\r\n\r\n        //Meaning if the searchWord is empty, return an empty string\r\n           if(searchWord == \" \"){\r\n\r\n            setFilteredData([{}])\r\n\r\n           } else {\r\n\r\n            //This will set the searchLists to the new filtered data stored in the arr variable\r\n            /* setFilteredData(newFilter)*/\r\n\r\n             setFilteredData(newFilter)\r\n        }\r\n           \r\n\r\n        //This states that when the length of the serachWord decreases, the program should\r\n        //keep filtering users based on the remaining keyword\r\n          if(searchWord.length - 1){\r\n\r\n            setFilteredData(newFilter)\r\n\r\n        }\r\n    \r\n    \r\n    }\r\n\r\n\r\n\r\n\r\n   \r\n    //This function is used for getting the user with the name that matches what the user is typed in\r\n    //the search box once they clicked the search button close to the search input box\r\n    const searchUser = () => {\r\n\r\n       const newArray = listOfUsersFromDatabase.filter( (listOfUsers) => {\r\n          \r\n        //Here, we're saying: if the name the user provide doesn't exist, we should print an error message\r\n        //else, the program should return the name that matches what the user is searching for\r\n        \r\n          if (listOfUsers.name.toLowerCase() !== searchWord.toLowerCase() ){\r\n\r\n                console.log('user dont exist');\r\n\r\n          } else { \r\n            \r\n            return listOfUsers.name.toLowerCase() === searchWord.toLowerCase(); \r\n        \r\n        }\r\n      })\r\n\r\n      setFilteredData(newArray)\r\n     \r\n\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div style={{border:\"5px solid black\", paddingBottom: \"800px\"}}>\r\n\r\n            <div className=\"search-input-div\">\r\n\r\n                <input type=\"text\" className=\"search-input\" onChange={onChangeFunction}></input>\r\n\r\n                <FaSistrix className=\"search-input-icon\" onClick={searchUser}/>\r\n\r\n              \r\n            </div>\r\n\r\n\r\n            {/*This is for when user is searching for name. It filters the names available based on\r\n               the user query or search */}\r\n            <div className=\"filterDiv\" ref>\r\n\r\n            {\r\n                filteredData.map((sL, id) => ( \r\n\r\n                    <div key={id} className=\"d\" >\r\n                       \r\n                        <p>{sL.name}</p>\r\n                        <p>{sL.id}</p>\r\n                    </div>\r\n                    \r\n                    ))\r\n              \r\n              }\r\n           \r\n           </div>\r\n\r\n\r\n\r\n\r\n            {/*This is for who the user has chatted with. it shows their chats*/}\r\n            {/*\r\n                filteredData.map((sL, id) => ( \r\n                <div key={id} style={{marginTop:20, marginBottom:20}}>\r\n                    <p>{sL.name}</p>\r\n                    <p>{sL.age}</p>\r\n                    <p>{sL.color}</p>\r\n                    <p>{sL.id}</p>\r\n                </div>\r\n                \r\n                ))\r\n            \r\n                */ } \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatList;"],"mappings":"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"},"metadata":{},"sourceType":"module"}