{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBodyFolder\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport notification from './notification.mp3'; //This for the incoming message notification\n\nimport { v4 as uuid } from 'uuid';\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //THIS STATE IS FOR THE MESSAGE THAT WILL BE SENT TO THE SERVER  \n  //SERVER SO IT CAN BE EMITTED.\n  const [text, setText] = useState(''); //THIS STATE IS WHAT WILL BE MAPPED AND PRINTED ON THE USERS UI \n  //const [lists, setLists] = useState([''])\n\n  const [mappingTheChats, setMappingTheChats] = useState([{}]); //THIS IS FOR DISPLAYING WHEN THE OTHER USER IS TYPING...\n\n  const [userIsTyping, setUserIsTyping] = useState(''); //THIS IS FOR DISPLAYING NOTIFICATION MESSAGE COUNT FOR UNREAD MESSAGE\n\n  const [notificationCount, setNotificationCount] = useState(); //USEREF...\n  //THIS IS USED TO CHANGE THE VALUE OF INPUT STRING TO AN EMPTY STRING.\n\n  const inputRef = useRef(); //THIS IS FOR OUR SCROLLABLE CHAT BODY      \n\n  const scrollRef = useRef(); //   scrollRef.scrollTop = scrollRef.scrollHeight;\n  //THIS IS THE scrollToBottomAlwaysOnNewMessageRef USEREF\n\n  const scrollToBottomAlwaysOnNewMessageRef = useRef(null); //This sound for an incoming message\n\n  const playNotification = () => {\n    const sound = new Audio(notification);\n    sound.play();\n  }; //OUR USECONTEXT FOR THIS FILE\n\n\n  const {\n    loggedInNameValue,\n    setLoggedInNameValue\n  } = useContext(LoggedInNameContext);\n  const {\n    otherUserNameValue,\n    setOtherUserNameValue\n  } = useContext(OtherUserNameContext);\n  const [mappingOldChats, setMappingOldChats] = useState(); //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE\n\n  useEffect(() => {\n    axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\n      from: loggedInNameValue,\n      to: otherUserNameValue\n    }).then(response => {\n      /*     \r\n           response.data.forEach((responseData) => {\r\n           \r\n               let dataMessage = responseData.message;\r\n               let dataMessageFrom = responseData.from;\r\n               let dataMessageTo = responseData.To;\r\n               console.log({dataMessage, dataMessageFrom, dataMessageTo});\r\n                 //This it to add each object to the beggining of the mapMessage array\r\n               mappingTheChats.unshift({dataMessage, dataMessageFrom, dataMessageTo})\r\n          \r\n           })\r\n      */\n      console.log(response.data);\n      setMappingOldChats(response.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [otherUserNameValue]);\n  /*\r\n      //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE WHEN PAGE REFRESH WHILE CHATTING\r\n      useEffect(() => {\r\n  \r\n          axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n   \r\n          from: loggedInNameValue,\r\n   \r\n          to: otherUserNameValue ? otherUserNameValue : ''\r\n   \r\n       }).then((response) => {\r\n    \r\n           response.data.forEach((responseData) => {\r\n           \r\n               let dataMessage = responseData.message;\r\n               let dataMessageFrom = responseData.from;\r\n               let dataMessageTo = responseData.To;\r\n               console.log({dataMessage, dataMessageFrom, dataMessageTo});\r\n  \r\n               //This it to add each object to the beggining of the mapMessage array\r\n               mappingTheChats.unshift({dataMessage, dataMessageFrom, dataMessageTo})\r\n         \r\n          })\r\n      \r\n  \r\n      }).catch((err) => {\r\n  \r\n          console.log(err)\r\n          \r\n      })\r\n      \r\n      }, []);*/\n\n  console.log(mappingOldChats); //SAVING THE NAME OF OTHER USER IN SESSION STORAGE\n\n  useEffect(() => {\n    if (otherUserNameValue) {\n      sessionStorage.setItem(\"otherUserName\", JSON.stringify(otherUserNameValue));\n    }\n  }, [otherUserNameValue]);\n  useEffect(() => {\n    let storedOtherUserNameData = JSON.parse(sessionStorage.getItem(\"otherUserName\"));\n\n    if (storedOtherUserNameData) {\n      setOtherUserNameValue(storedOtherUserNameData);\n    }\n  }, []); //This is used to delete a message when the trashcan is\n  //clicked on.\n\n  /*\r\n  const messageDelete = (id) => {\r\n      const newMappingCurrentChat = mappingCurrentChats.filter(l => l.id !== id)\r\n      setMappingCurrentChats(newMappingCurrentChat)\r\n  }*/\n  //HANDLING WHEN OTHER USER IS TYPING . . .\n  //This will be used to dictect when the other user is typing...\n  //and then it will send the ('typing') message\n  //to the other user connected in the socket server.\n\n  const handleTyping = () => {\n    socket.emit('typing', {\n      typingNotification: 'is typing...',\n      userNameTyping: loggedInNameValue,\n      userNameReceivingTyping: otherUserNameValue\n    });\n  }; //This will involke when the other user is not typing or they\n  //just got off the input box\n\n\n  const handleNotTyping = () => {\n    socket.emit('notTyping', ' ');\n  }; //This emits the username of the logged in user to the server once login successful\n  //so that it can assign a socket id to the login user\n\n\n  useEffect(() => {\n    if (loggedInNameValue) {\n      socket.emit(\"username\", {\n        username: loggedInNameValue\n      });\n    }\n  }, [socket]); //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n  const sendMessage = () => {\n    if (loggedInNameValue) {\n      //Here we want to send message to the server to receive so\n      //that it can emit it to other client. After the \"send_message\"\n      //event listener, an object should follow it which will contain\n      //the message data information\n      socket.emit(\"send_message\", {\n        message: text,\n        from: loggedInNameValue,\n        to: otherUserNameValue\n      }); //This is used to change the value of the input to empty string\n      //when the send button is clicked\n\n      inputRef.current.value = \" \";\n      setText(' ');\n    } else {\n      alert('Unable to read your name. Try logging out and logging in again. Thank you!');\n    }\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      //The (data.message) below holds the message property value received from the server and\n      //we give each message a random unique ID so that we can do stuff like\n      //deleteing the message using it unique ID etc...\n      const [m, f, t, i] = [data.message, data.from, data.to, uuid()];\n\n      if (loggedInNameValue && otherUserNameValue) {\n        setMappingTheChats(prevState => [...prevState, {\n          dataMessage: m,\n          id: i,\n          dataMessageFrom: f,\n          dataMessageTo: t\n        }]); //This says whenever someone send you a message and the value of the otherUserName is not assinged\n        //as the person sending you the message, the message should not display. This is so so as to prevent\n        //message classhing with other user when chatting with them.\n\n        if (f !== loggedInNameValue && f !== otherUserNameValue && t === loggedInNameValue) {\n          setMappingTheChats(prevState => [...prevState, {\n            dataMessage: ' ',\n            id: i,\n            dataMessageFrom: f,\n            dataMessageTo: t\n          }]); //Set notification count \n        }\n      }\n    });\n  }, [socket, loggedInNameValue, otherUserNameValue]); //This useEffect handles when the other user is typing.\n  //it receive the information from the server so\n  //we can display it on the front end.\n\n  useEffect(() => {\n    socket.on(\"isTyping\", data => {\n      setUserIsTyping(data.typingNotification);\n      console.log(userIsTyping);\n    });\n  }, [socket]); //This useEffect handles when  the other user is not typing.\n  //it will emit an empty string\n\n  useEffect(() => {\n    socket.on(\"isNotTyping\", data => {\n      setUserIsTyping(data);\n    });\n  }, [socket]); //scroll effect\n\n  useEffect(() => {\n    var _scrollToBottomAlways;\n\n    //This will make sure the bottom image is always shown when new message enters.\n    (_scrollToBottomAlways = scrollToBottomAlwaysOnNewMessageRef.current) === null || _scrollToBottomAlways === void 0 ? void 0 : _scrollToBottomAlways.scrollIntoView(false);\n  }, [mappingTheChats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-body-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatNav\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: otherUserNameValue ? /*#__PURE__*/_jsxDEV(\"b\", {\n          className: \"image-behind-otherUserNameValue\",\n          children: [\" \", otherUserNameValue.charAt(0), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 14\n        }, this) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\" \", otherUserNameValue ? otherUserNameValue : \"\", \": \", /*#__PURE__*/_jsxDEV(\"i\", {\n          id: \"userIsTyping\",\n          children: userIsTyping\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 69\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll\",\n      ref: scrollRef,\n      children: [mappingTheChats.map((mappingTheChat, id) => //checking messages that are for the sender so it can have different styling\n      mappingTheChat.dataMessageFrom === loggedInNameValue ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fromListMessageData\",\n        children: mappingTheChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 29\n      }, this) :\n      /*#__PURE__*/\n      //checking messages that are for the receiver so it can have different styling\n      _jsxDEV(\"div\", {\n        className: \"toListMessageData\",\n        children: mappingTheChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 29\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: scrollToBottomAlwaysOnNewMessageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"message...\",\n        onChange: e => setText(e.target.value) //This is to store what user write inside the text variable\n        ,\n        className: \"text\",\n        ref: inputRef,\n        onMouseEnter: handleTyping,\n        onMouseLeave: handleNotTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n          onClick: sendMessage,\n          className: \"txt-btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"MrR0YbGK8WGuNi7/n1F/L/wNCI0=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["notification","v4","uuid","FaTelegramPlane","FaTrash","useContext","useEffect","useRef","useState","io","LoggedInNameContext","OtherUserNameContext","axios","socket","connect","ChatBody","text","setText","mappingTheChats","setMappingTheChats","userIsTyping","setUserIsTyping","notificationCount","setNotificationCount","inputRef","scrollRef","scrollToBottomAlwaysOnNewMessageRef","playNotification","sound","Audio","play","loggedInNameValue","setLoggedInNameValue","otherUserNameValue","setOtherUserNameValue","mappingOldChats","setMappingOldChats","post","from","to","then","response","console","log","data","catch","err","sessionStorage","setItem","JSON","stringify","storedOtherUserNameData","parse","getItem","handleTyping","emit","typingNotification","userNameTyping","userNameReceivingTyping","handleNotTyping","username","sendMessage","message","current","value","alert","on","m","f","t","i","prevState","dataMessage","id","dataMessageFrom","dataMessageTo","scrollIntoView","charAt","map","mappingTheChat","e","target"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBodyFolder/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport notification from './notification.mp3'//This for the incoming message notification\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa'\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\r\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\r\nimport axios from 'axios';\r\n\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\n\r\nfunction ChatBody(){\r\n\r\n    //THIS STATE IS FOR THE MESSAGE THAT WILL BE SENT TO THE SERVER  \r\n    //SERVER SO IT CAN BE EMITTED.\r\n    const [text, setText] = useState('')\r\n\r\n\r\n    //THIS STATE IS WHAT WILL BE MAPPED AND PRINTED ON THE USERS UI \r\n    //const [lists, setLists] = useState([''])\r\n    const [mappingTheChats, setMappingTheChats] = useState([{}])  \r\n\r\n\r\n    //THIS IS FOR DISPLAYING WHEN THE OTHER USER IS TYPING...\r\n    const[userIsTyping, setUserIsTyping] = useState('')\r\n\r\n    //THIS IS FOR DISPLAYING NOTIFICATION MESSAGE COUNT FOR UNREAD MESSAGE\r\n    const [notificationCount, setNotificationCount] = useState()\r\n\r\n\r\n\r\n    //USEREF...\r\n\r\n    //THIS IS USED TO CHANGE THE VALUE OF INPUT STRING TO AN EMPTY STRING.\r\n    const inputRef = useRef()\r\n\r\n\r\n    //THIS IS FOR OUR SCROLLABLE CHAT BODY      \r\n    const scrollRef = useRef()\r\n    //   scrollRef.scrollTop = scrollRef.scrollHeight;\r\n    \r\n  \r\n    //THIS IS THE scrollToBottomAlwaysOnNewMessageRef USEREF\r\n    const scrollToBottomAlwaysOnNewMessageRef = useRef(null)\r\n\r\n\r\n   \r\n    //This sound for an incoming message\r\n    const playNotification = () => {\r\n    const sound = new Audio(notification); \r\n    sound.play()\r\n    }\r\n   \r\n    //OUR USECONTEXT FOR THIS FILE\r\n    const { loggedInNameValue, setLoggedInNameValue } = useContext(LoggedInNameContext) \r\n\r\n    const { otherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext)\r\n\r\n\r\n    const [mappingOldChats, setMappingOldChats] = useState()\r\n    //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE\r\n    useEffect(() => {\r\n\r\n       axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n\r\n       from: loggedInNameValue,\r\n\r\n       to: otherUserNameValue\r\n\r\n    }).then((response) => {\r\n   /*     \r\n        response.data.forEach((responseData) => {\r\n        \r\n            let dataMessage = responseData.message;\r\n            let dataMessageFrom = responseData.from;\r\n            let dataMessageTo = responseData.To;\r\n            console.log({dataMessage, dataMessageFrom, dataMessageTo});\r\n\r\n            //This it to add each object to the beggining of the mapMessage array\r\n            mappingTheChats.unshift({dataMessage, dataMessageFrom, dataMessageTo})\r\n       \r\n        })\r\n   */\r\n\r\n            console.log(response.data)\r\n            setMappingOldChats(response.data)\r\n    \r\n\r\n    }).catch((err) => {\r\n\r\n        console.log(err)\r\n        \r\n    })\r\n    \r\n    }, [otherUserNameValue]);\r\n\r\n\r\n/*\r\n    //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE WHEN PAGE REFRESH WHILE CHATTING\r\n    useEffect(() => {\r\n\r\n        axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n \r\n        from: loggedInNameValue,\r\n \r\n        to: otherUserNameValue ? otherUserNameValue : ''\r\n \r\n     }).then((response) => {\r\n  \r\n         response.data.forEach((responseData) => {\r\n         \r\n             let dataMessage = responseData.message;\r\n             let dataMessageFrom = responseData.from;\r\n             let dataMessageTo = responseData.To;\r\n             console.log({dataMessage, dataMessageFrom, dataMessageTo});\r\n\r\n             //This it to add each object to the beggining of the mapMessage array\r\n             mappingTheChats.unshift({dataMessage, dataMessageFrom, dataMessageTo})\r\n       \r\n        })\r\n    \r\n\r\n    }).catch((err) => {\r\n\r\n        console.log(err)\r\n        \r\n    })\r\n    \r\n    }, []);*/\r\n\r\n\r\nconsole.log(mappingOldChats)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //SAVING THE NAME OF OTHER USER IN SESSION STORAGE\r\n    useEffect(() => {\r\n\r\n        if (otherUserNameValue) {  \r\n\r\n        sessionStorage.setItem(\"otherUserName\", JSON.stringify(otherUserNameValue))\r\n\r\n\r\n        }\r\n\r\n\r\n    }, [otherUserNameValue])\r\n\r\n    useEffect(() => {\r\n\r\n        let storedOtherUserNameData = JSON.parse(sessionStorage.getItem(\"otherUserName\"))\r\n\r\n        if (storedOtherUserNameData) {\r\n\r\n            setOtherUserNameValue(storedOtherUserNameData)\r\n\r\n        }\r\n\r\n    }, []);\r\n\r\n \r\n\r\n\r\n\r\n    //This is used to delete a message when the trashcan is\r\n    //clicked on.\r\n    /*\r\n    const messageDelete = (id) => {\r\n        const newMappingCurrentChat = mappingCurrentChats.filter(l => l.id !== id)\r\n        setMappingCurrentChats(newMappingCurrentChat)\r\n    }*/\r\n\r\n\r\n    //HANDLING WHEN OTHER USER IS TYPING . . .\r\n    //This will be used to dictect when the other user is typing...\r\n    //and then it will send the ('typing') message\r\n    //to the other user connected in the socket server.\r\n    const handleTyping = () => {\r\n\r\n        socket.emit('typing', {\r\n\r\n            typingNotification: 'is typing...', \r\n\r\n            userNameTyping: loggedInNameValue, \r\n\r\n            userNameReceivingTyping: otherUserNameValue\r\n        })\r\n    }\r\n\r\n\r\n    //This will involke when the other user is not typing or they\r\n    //just got off the input box\r\n    const handleNotTyping = () => {\r\n        socket.emit('notTyping', ' ')\r\n    }\r\n\r\n\r\n        \r\n    //This emits the username of the logged in user to the server once login successful\r\n    //so that it can assign a socket id to the login user\r\n    useEffect(() => {\r\n        \r\n        if (loggedInNameValue) {\r\n\r\n            socket.emit(\"username\", { username: loggedInNameValue } );\r\n\r\n        }\r\n\r\n    }, [socket])\r\n   \r\n\r\n\r\n    \r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n\r\n        if (loggedInNameValue) { \r\n\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", { message: text, from: loggedInNameValue, to: otherUserNameValue })\r\n\r\n        //This is used to change the value of the input to empty string\r\n        //when the send button is clicked\r\n        inputRef.current.value = \" \";\r\n        setText(' '); \r\n\r\n        } else {\r\n\r\n            alert('Unable to read your name. Try logging out and logging in again. Thank you!')\r\n\r\n        }  \r\n       \r\n       \r\n    };\r\n\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n\r\n        socket.on(\"receive_message\", (data)  => {  \r\n           \r\n        //The (data.message) below holds the message property value received from the server and\r\n        //we give each message a random unique ID so that we can do stuff like\r\n        //deleteing the message using it unique ID etc...\r\n\r\n        const [m, f, t, i] = [data.message, data.from, data.to, uuid()]\r\n   \r\n         if (loggedInNameValue && otherUserNameValue){ \r\n\r\n        setMappingTheChats((prevState) => [...prevState, { dataMessage: m, id: i, dataMessageFrom: f, dataMessageTo: t } ]);\r\n\r\n\r\n        //This says whenever someone send you a message and the value of the otherUserName is not assinged\r\n        //as the person sending you the message, the message should not display. This is so so as to prevent\r\n        //message classhing with other user when chatting with them.\r\n        if (f !== loggedInNameValue && f !== otherUserNameValue && t === loggedInNameValue) {\r\n\r\n            setMappingTheChats((prevState) => [...prevState, { dataMessage: ' ', id: i, dataMessageFrom: f, dataMessageTo: t } ]);\r\n    \r\n            //Set notification count \r\n         }    \r\n\r\n\r\n        }\r\n\r\n      \r\n        });\r\n\r\n    }, [socket, loggedInNameValue, otherUserNameValue])\r\n\r\n \r\n\r\n    //This useEffect handles when the other user is typing.\r\n    //it receive the information from the server so\r\n    //we can display it on the front end.\r\n\r\n    useEffect(() =>{\r\n\r\n        socket.on(\"isTyping\", (data) => {\r\n          \r\n            setUserIsTyping(data.typingNotification) \r\n            console.log(userIsTyping)\r\n\r\n        })\r\n        \r\n\r\n    }, [socket])\r\n\r\n\r\n     //This useEffect handles when  the other user is not typing.\r\n     //it will emit an empty string\r\n     useEffect(() => {\r\n        socket.on(\"isNotTyping\", (data) => {\r\n            setUserIsTyping(data)\r\n        })\r\n     }, [socket])\r\n\r\n\r\n\r\n     //scroll effect\r\n     useEffect(() => {\r\n  //This will make sure the bottom image is always shown when new message enters.\r\n  scrollToBottomAlwaysOnNewMessageRef.current?.scrollIntoView(false)\r\n        \r\n    }, [mappingTheChats])\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"chat-body-container\">\r\n          \r\n            <div className=\"chatNav\">\r\n           \r\n             <strong > \r\n\r\n             { otherUserNameValue ? \r\n             \r\n             <b className=\"image-behind-otherUserNameValue\"> {otherUserNameValue.charAt(0)} </b> \r\n             \r\n             : '' \r\n             \r\n             } \r\n             \r\n             </strong>\r\n                     \r\n                <b> {otherUserNameValue ? otherUserNameValue : \"\"}: <i id=\"userIsTyping\">{userIsTyping}</i> </b>\r\n\r\n            </div>\r\n\r\n\r\n    \r\n\r\n            <div className=\"scroll\" ref={scrollRef} >\r\n\r\n\r\n            {/*THIS IS FOR MAPPING OLD/HISTORY CHATS BETWEEN USERS CHATTING*/}    \r\n\r\n            {/*  mappingOldChats ? \r\n           \r\n                mappingOldChats.map((mappingOldChat, id) => \r\n                    //checking messages that are for the sender so it can have different styling\r\n                    mappingOldChats.from === loggedInNameValue ? (  \r\n\r\n                            <div key={id} className=\"fromOldListMessageData\" style={{background: 'yellow'}}>\r\n\r\n                               {mappingOldChat.message}\r\n\r\n                            </div>\r\n                                         \r\n\r\n                    ) : (\r\n                    //checking messages that are for the receiver so it can have different styling\r\n                            <div key={id} className=\"toOldListMessageData\">\r\n\r\n                               {mappingOldChat.message}\r\n\r\n                            </div> \r\n\r\n                        )\r\n\r\n                     \r\n                    )   : \"\"\r\n\r\n                    \r\n                */    }\r\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                {/*THIS IS FOR MAPPING CUREENT CHATS BETWEEN USERS CHATTING*/}\r\n\r\n                {mappingTheChats.map((mappingTheChat, id) => \r\n                    //checking messages that are for the sender so it can have different styling\r\n                    mappingTheChat.dataMessageFrom === loggedInNameValue ? (  \r\n\r\n                            <div key={id} className=\"fromListMessageData\">\r\n\r\n                               {mappingTheChat.dataMessage}\r\n\r\n                            </div>\r\n                                         \r\n\r\n                    ) : (\r\n                    //checking messages that are for the receiver so it can have different styling\r\n                            <div key={id} className=\"toListMessageData\">\r\n\r\n                               {mappingTheChat.dataMessage}\r\n\r\n                            </div>\r\n\r\n                    )\r\n\r\n                    )        \r\n        \r\n                }\r\n\r\n            {/*THIS IS DIV THAT MAKE SURE LAST MESSAGE IS ALWAYS SHOWING*/}    \r\n            <div ref={scrollToBottomAlwaysOnNewMessageRef} />\r\n        \r\n               \r\n            </div>\r\n\r\n\r\n            <div className=\"text-box\">\r\n\r\n                <input type=\"text\" placeholder=\"message...\" \r\n\r\n                onChange={(e) => setText(e.target.value)} //This is to store what user write inside the text variable\r\n\r\n                className=\"text\"\r\n\r\n                ref={inputRef}\r\n\r\n                onMouseEnter={handleTyping}\r\n\r\n                onMouseLeave={handleNotTyping}\r\n         \r\n                />\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                {/* <button onClick={sendMessage} className=\"txt-btn\">send message</button> */} \r\n                <div>\r\n                     <FaTelegramPlane onClick={sendMessage} className=\"txt-btn\"/>\r\n                </div> \r\n                \r\n            </div>\r\n             \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":";;;AAAA,OAAO,gBAAP;AACA,OAAOA,YAAP,MAAyB,oBAAzB,C,CAA6C;;AAC7C,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,SAASC,eAAT,EAA0BC,OAA1B,QAAyC,gBAAzC;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,MAAhC,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,EAAP,MAAgB,kBAAhB;AACA,SAASC,mBAAT,QAAoC,sCAApC;AACA,SAASC,oBAAT,QAAqC,uCAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,MAAM,GAAGJ,EAAE,CAACK,OAAH,CAAW,uBAAX,CAAf,C,CAAoD;;AAGpD,SAASC,QAAT,GAAmB;EAAA;;EAEf;EACA;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC,CAJe,CAOf;EACA;;EACA,MAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAtD,CATe,CAYf;;EACA,MAAK,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAA/C,CAbe,CAef;;EACA,MAAM,CAACc,iBAAD,EAAoBC,oBAApB,IAA4Cf,QAAQ,EAA1D,CAhBe,CAoBf;EAEA;;EACA,MAAMgB,QAAQ,GAAGjB,MAAM,EAAvB,CAvBe,CA0Bf;;EACA,MAAMkB,SAAS,GAAGlB,MAAM,EAAxB,CA3Be,CA4Bf;EAGA;;EACA,MAAMmB,mCAAmC,GAAGnB,MAAM,CAAC,IAAD,CAAlD,CAhCe,CAoCf;;EACA,MAAMoB,gBAAgB,GAAG,MAAM;IAC/B,MAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU7B,YAAV,CAAd;IACA4B,KAAK,CAACE,IAAN;EACC,CAHD,CArCe,CA0Cf;;;EACA,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAA8C3B,UAAU,CAACK,mBAAD,CAA9D;EAEA,MAAM;IAAEuB,kBAAF;IAAsBC;EAAtB,IAAgD7B,UAAU,CAACM,oBAAD,CAAhE;EAGA,MAAM,CAACwB,eAAD,EAAkBC,kBAAlB,IAAwC5B,QAAQ,EAAtD,CAhDe,CAiDf;;EACAF,SAAS,CAAC,MAAM;IAEbM,KAAK,CAACyB,IAAN,CAAW,oDAAX,EAAiE;MAEjEC,IAAI,EAAEP,iBAF2D;MAIjEQ,EAAE,EAAEN;IAJ6D,CAAjE,EAMAO,IANA,CAMMC,QAAD,IAAc;MACvB;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MAGYC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;MACAR,kBAAkB,CAACK,QAAQ,CAACG,IAAV,CAAlB;IAGP,CAzBE,EAyBAC,KAzBA,CAyBOC,GAAD,IAAS;MAEdJ,OAAO,CAACC,GAAR,CAAYG,GAAZ;IAEH,CA7BE;EA+BF,CAjCQ,EAiCN,CAACb,kBAAD,CAjCM,CAAT;EAoCJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGAS,OAAO,CAACC,GAAR,CAAYR,eAAZ,EAxHmB,CAgIf;;EACA7B,SAAS,CAAC,MAAM;IAEZ,IAAI2B,kBAAJ,EAAwB;MAExBc,cAAc,CAACC,OAAf,CAAuB,eAAvB,EAAwCC,IAAI,CAACC,SAAL,CAAejB,kBAAf,CAAxC;IAGC;EAGJ,CAVQ,EAUN,CAACA,kBAAD,CAVM,CAAT;EAYA3B,SAAS,CAAC,MAAM;IAEZ,IAAI6C,uBAAuB,GAAGF,IAAI,CAACG,KAAL,CAAWL,cAAc,CAACM,OAAf,CAAuB,eAAvB,CAAX,CAA9B;;IAEA,IAAIF,uBAAJ,EAA6B;MAEzBjB,qBAAqB,CAACiB,uBAAD,CAArB;IAEH;EAEJ,CAVQ,EAUN,EAVM,CAAT,CA7Ie,CA6Jf;EACA;;EACA;AACJ;AACA;AACA;AACA;EAGI;EACA;EACA;EACA;;EACA,MAAMG,YAAY,GAAG,MAAM;IAEvBzC,MAAM,CAAC0C,IAAP,CAAY,QAAZ,EAAsB;MAElBC,kBAAkB,EAAE,cAFF;MAIlBC,cAAc,EAAE1B,iBAJE;MAMlB2B,uBAAuB,EAAEzB;IANP,CAAtB;EAQH,CAVD,CA1Ke,CAuLf;EACA;;;EACA,MAAM0B,eAAe,GAAG,MAAM;IAC1B9C,MAAM,CAAC0C,IAAP,CAAY,WAAZ,EAAyB,GAAzB;EACH,CAFD,CAzLe,CA+Lf;EACA;;;EACAjD,SAAS,CAAC,MAAM;IAEZ,IAAIyB,iBAAJ,EAAuB;MAEnBlB,MAAM,CAAC0C,IAAP,CAAY,UAAZ,EAAwB;QAAEK,QAAQ,EAAE7B;MAAZ,CAAxB;IAEH;EAEJ,CARQ,EAQN,CAAClB,MAAD,CARM,CAAT,CAjMe,CA8Mf;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMgD,WAAW,GAAG,MAAM;IAEtB,IAAI9B,iBAAJ,EAAuB;MAEvB;MACA;MACA;MACA;MACAlB,MAAM,CAAC0C,IAAP,CAAY,cAAZ,EAA4B;QAAEO,OAAO,EAAE9C,IAAX;QAAiBsB,IAAI,EAAEP,iBAAvB;QAA0CQ,EAAE,EAAEN;MAA9C,CAA5B,EANuB,CAQvB;MACA;;MACAT,QAAQ,CAACuC,OAAT,CAAiBC,KAAjB,GAAyB,GAAzB;MACA/C,OAAO,CAAC,GAAD,CAAP;IAEC,CAbD,MAaO;MAEHgD,KAAK,CAAC,4EAAD,CAAL;IAEH;EAGJ,CAtBD,CApNe,CA8Of;EACA;EACA;;;EACA3D,SAAS,CAAC,MAAM;IAEZO,MAAM,CAACqD,EAAP,CAAU,iBAAV,EAA8BtB,IAAD,IAAW;MAExC;MACA;MACA;MAEA,MAAM,CAACuB,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,IAAe,CAAC1B,IAAI,CAACkB,OAAN,EAAelB,IAAI,CAACN,IAApB,EAA0BM,IAAI,CAACL,EAA/B,EAAmCrC,IAAI,EAAvC,CAArB;;MAEC,IAAI6B,iBAAiB,IAAIE,kBAAzB,EAA4C;QAE7Cd,kBAAkB,CAAEoD,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAe;UAAEC,WAAW,EAAEL,CAAf;UAAkBM,EAAE,EAAEH,CAAtB;UAAyBI,eAAe,EAAEN,CAA1C;UAA6CO,aAAa,EAAEN;QAA5D,CAAf,CAAhB,CAAlB,CAF6C,CAK7C;QACA;QACA;;QACA,IAAID,CAAC,KAAKrC,iBAAN,IAA2BqC,CAAC,KAAKnC,kBAAjC,IAAuDoC,CAAC,KAAKtC,iBAAjE,EAAoF;UAEhFZ,kBAAkB,CAAEoD,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAe;YAAEC,WAAW,EAAE,GAAf;YAAoBC,EAAE,EAAEH,CAAxB;YAA2BI,eAAe,EAAEN,CAA5C;YAA+CO,aAAa,EAAEN;UAA9D,CAAf,CAAhB,CAAlB,CAFgF,CAIhF;QACF;MAGD;IAGA,CA3BD;EA6BH,CA/BQ,EA+BN,CAACxD,MAAD,EAASkB,iBAAT,EAA4BE,kBAA5B,CA/BM,CAAT,CAjPe,CAoRf;EACA;EACA;;EAEA3B,SAAS,CAAC,MAAK;IAEXO,MAAM,CAACqD,EAAP,CAAU,UAAV,EAAuBtB,IAAD,IAAU;MAE5BvB,eAAe,CAACuB,IAAI,CAACY,kBAAN,CAAf;MACAd,OAAO,CAACC,GAAR,CAAYvB,YAAZ;IAEH,CALD;EAQH,CAVQ,EAUN,CAACP,MAAD,CAVM,CAAT,CAxRe,CAqSd;EACA;;EACAP,SAAS,CAAC,MAAM;IACbO,MAAM,CAACqD,EAAP,CAAU,aAAV,EAA0BtB,IAAD,IAAU;MAC/BvB,eAAe,CAACuB,IAAD,CAAf;IACH,CAFD;EAGF,CAJQ,EAIN,CAAC/B,MAAD,CAJM,CAAT,CAvSc,CA+Sd;;EACAP,SAAS,CAAC,MAAM;IAAA;;IACnB;IACA,yBAAAoB,mCAAmC,CAACqC,OAApC,gFAA6Ca,cAA7C,CAA4D,KAA5D;EAEG,CAJS,EAIP,CAAC1D,eAAD,CAJO,CAAT;EASD,oBACI;IAAK,SAAS,EAAC,qBAAf;IAAA,wBAEI;MAAK,SAAS,EAAC,SAAf;MAAA,wBAEC;QAAA,UAEEe,kBAAkB,gBAEpB;UAAG,SAAS,EAAC,iCAAb;UAAA,gBAAiDA,kBAAkB,CAAC4C,MAAnB,CAA0B,CAA1B,CAAjD;QAAA;UAAA;UAAA;UAAA;QAAA,QAFoB,GAIlB;MANF;QAAA;QAAA;QAAA;MAAA,QAFD,eAcI;QAAA,gBAAK5C,kBAAkB,GAAGA,kBAAH,GAAwB,EAA/C,qBAAoD;UAAG,EAAE,EAAC,cAAN;UAAA,UAAsBb;QAAtB;UAAA;UAAA;UAAA;QAAA,QAApD;MAAA;QAAA;QAAA;QAAA;MAAA,QAdJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAuBI;MAAK,SAAS,EAAC,QAAf;MAAwB,GAAG,EAAEK,SAA7B;MAAA,WAiEKP,eAAe,CAAC4D,GAAhB,CAAoB,CAACC,cAAD,EAAiBN,EAAjB,KACjB;MACAM,cAAc,CAACL,eAAf,KAAmC3C,iBAAnC,gBAEQ;QAAc,SAAS,EAAC,qBAAxB;QAAA,UAEIgD,cAAc,CAACP;MAFnB,GAAUC,EAAV;QAAA;QAAA;QAAA;MAAA,QAFR;MAAA;MAUA;MACQ;QAAc,SAAS,EAAC,mBAAxB;QAAA,UAEIM,cAAc,CAACP;MAFnB,GAAUC,EAAV;QAAA;QAAA;QAAA;MAAA,QAbX,CAjEL,eA2FA;QAAK,GAAG,EAAE/C;MAAV;QAAA;QAAA;QAAA;MAAA,QA3FA;IAAA;MAAA;MAAA;MAAA;IAAA,QAvBJ,eAwHI;MAAK,SAAS,EAAC,UAAf;MAAA,wBAEI;QAAO,IAAI,EAAC,MAAZ;QAAmB,WAAW,EAAC,YAA/B;QAEA,QAAQ,EAAGsD,CAAD,IAAO/D,OAAO,CAAC+D,CAAC,CAACC,MAAF,CAASjB,KAAV,CAFxB,CAE0C;QAF1C;QAIA,SAAS,EAAC,MAJV;QAMA,GAAG,EAAExC,QANL;QAQA,YAAY,EAAE8B,YARd;QAUA,YAAY,EAAEK;MAVd;QAAA;QAAA;QAAA;MAAA,QAFJ,eAkBI;QAAA,uBACK,QAAC,eAAD;UAAiB,OAAO,EAAEE,WAA1B;UAAuC,SAAS,EAAC;QAAjD;UAAA;UAAA;UAAA;QAAA;MADL;QAAA;QAAA;QAAA;MAAA,QAlBJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAxHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAoJH;;GA7cQ9C,Q;;KAAAA,Q;AA+cT,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}