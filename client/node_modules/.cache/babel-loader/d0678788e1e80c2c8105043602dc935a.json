{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBodyFolder\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport notification from './notification.mp3'; //This for the incoming message notification\n\nimport { v4 as uuid } from 'uuid';\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //This state is for the message that will be sent to the \n  //server so it can be emitted.\n  const [text, setText] = useState(''); //This state is what will be mapped and printed on the users UI  \n  //const [lists, setLists] = useState([''])\n\n  const [mappingTheChats, setMappingTheChats] = useState([{}]); //This is for displaying when the other user is typing...\n\n  const [userIsTyping, setUserIsTyping] = useState(''); //This is used to change the value of the input to empty string\n\n  const inputRef = useRef(); //This is for our scrollable chat body\n\n  const scrollRef = useRef(); //   scrollRef.scrollTop = scrollRef.scrollHeight;\n  //logged in name ref\n\n  const loggedInNameMessagesRef = useRef(); //This is the scrollToBottomAlwaysOnNewMessageRef\n\n  const scrollToBottomAlwaysOnNewMessageRef = useRef(null);\n  const [logColor, setLogColor] = useState('black'); //This sound for an incoming message\n\n  const playNotification = () => {\n    const sound = new Audio(notification);\n    sound.play();\n  }; //Our useConetext for this file\n\n\n  const {\n    loggedInNameValue,\n    setLoggedInNameValue\n  } = useContext(LoggedInNameContext);\n  const {\n    OtherUserNameValue,\n    setOtherUserNameValue\n  } = useContext(OtherUserNameContext); //fetching old chats with OtherUserNameValue\n\n  /*\r\n  axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n       from: loggedInNameValue,\r\n       to: OtherUserNameValue\r\n    }).then((response) => {\r\n        console.log(response)\r\n    }).catch((err) => {\r\n        console.log(err)\r\n      \r\n  })\r\n  */\n\n  const [styleLoggedInUserText, setStyleLoggedInUserText] = useState(null); //This is used to delete a message when the trashcan is\n  //clicked on.\n\n  const messageDelete = id => {\n    const newMappingTheChat = mappingTheChats.filter(l => l.id !== id);\n    setMappingTheChats(newMappingTheChat);\n  }; //This will be used to dictect when the other user is typing...\n  //and then it will send the ('typing') message\n  //to the other user connected in the socket server.\n\n\n  const handleTyping = () => {\n    socket.emit('typing', {\n      typingNotification: 'typing...'\n    });\n  }; //This will involke when the other user is not typing or they\n  //just got off the input box\n\n\n  const handleNotTyping = () => {\n    socket.emit('notTyping', ' ');\n  }; //This emits the username of the logged in user to the server once login successful\n  //so that it can assign a socket id to the login user\n\n\n  useEffect(() => {\n    if (loggedInNameValue) {\n      socket.emit(\"username\", {\n        username: loggedInNameValue\n      });\n    }\n  }, [socket]); //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n  const sendMessage = () => {\n    //Here we want to send message to the server to receive so\n    //that it can emit it to other client. After the \"send_message\"\n    //event listener, an object should follow it which will contain\n    //the message data information\n    socket.emit(\"send_message\", {\n      message: text,\n      from: loggedInNameValue,\n      to: OtherUserNameValue\n    }); //This is used to change the value of the input to empty string\n    //when the send button is clicked\n    // inputRef.current.value = \" \";\n    // setText(' '); remove the comment from this line of code, this code is important\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      console.log(data); //The (data.message) below holds the message property value received from the server and\n      //we give each message a random unique ID so that we can do stuff like\n      //deleteing the message using it unique ID etc...\n\n      const [m, f, t, i] = [data.message, data.from, data.to, uuid()]; //This keeps whatever is in the lists state and add a new data to the list ( in this case, \n      // which is the message ) so it can get mapped   \n\n      setMappingTheChats(prevState => [...prevState, {\n        dataMessage: m,\n        id: i,\n        dataMessageFrom: f,\n        dataMessageTo: to\n      }]); //setMappingTheChats((prevState) => [...prevState, { data }])\n      //This gives a notification alert when a message comes in...\n      // playNotification()      \n    });\n  }, [socket]); //This useEffect handles when the other user is typing.\n  //it receive the information from the server so\n  //we can display it on the front end.\n\n  useEffect(() => {\n    socket.on(\"isTyping\", data => {\n      setUserIsTyping(data.typingNotification);\n      console.log(userIsTyping);\n    });\n  }, [socket]); //This useEffect handles when  the other user is not typing.\n  //it will emit an empty string\n\n  useEffect(() => {\n    socket.on(\"isNotTyping\", data => {\n      setUserIsTyping(data);\n    });\n  }, [socket]); //scroll effect\n\n  useEffect(() => {\n    var _scrollToBottomAlways;\n\n    //This will make sure the bottom image is always shown when new message enters.\n    (_scrollToBottomAlways = scrollToBottomAlwaysOnNewMessageRef.current) === null || _scrollToBottomAlways === void 0 ? void 0 : _scrollToBottomAlways.scrollIntoView(false);\n  }, [mappingTheChats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"5px solid black\",\n      paddingBottom: \"800px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatNav\",\n      children: [\"Your conversation with:  \", OtherUserNameValue, \" \", \" \", userIsTyping]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll\",\n      ref: scrollRef,\n      children: [\n      /*\r\n        \r\n         mappingTheChats.map((mappingTheChat, id) => (  \r\n            <div key={id} id=\"listMessageData\" >\r\n                   {mappingTheChat.messageData}\r\n                           \r\n             </div>\r\n         ))\r\n      */\n      mappingTheChats.map((mappingTheChat, id) => {\n        if (mappingTheChat.data.from === loggedInNameValue) {\n          /*#__PURE__*/\n          _jsxDEV(\"div\", {\n            id: \"listMessageData\",\n            style: {\n              color: 'white'\n            },\n            children: mappingTheChat.data.message\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 21\n          }, this);\n        }\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: scrollToBottomAlwaysOnNewMessageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"message...\",\n        onChange: e => setText(e.target.value) //This is to store what user write inside the text variable\n        ,\n        className: \"text\",\n        ref: inputRef,\n        onMouseEnter: handleTyping,\n        onMouseLeave: handleNotTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n          onClick: sendMessage,\n          className: \"txt-btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"sAnBXzJVwJTBO9MVIYVFFQ/+PNg=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["notification","v4","uuid","FaTelegramPlane","FaTrash","useContext","useEffect","useRef","useState","io","LoggedInNameContext","OtherUserNameContext","axios","socket","connect","ChatBody","text","setText","mappingTheChats","setMappingTheChats","userIsTyping","setUserIsTyping","inputRef","scrollRef","loggedInNameMessagesRef","scrollToBottomAlwaysOnNewMessageRef","logColor","setLogColor","playNotification","sound","Audio","play","loggedInNameValue","setLoggedInNameValue","OtherUserNameValue","setOtherUserNameValue","styleLoggedInUserText","setStyleLoggedInUserText","messageDelete","id","newMappingTheChat","filter","l","handleTyping","emit","typingNotification","handleNotTyping","username","sendMessage","message","from","to","on","data","console","log","m","f","t","i","prevState","dataMessage","dataMessageFrom","dataMessageTo","current","scrollIntoView","border","paddingBottom","map","mappingTheChat","color","e","target","value"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBodyFolder/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport notification from './notification.mp3'//This for the incoming message notification\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa'\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\r\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\r\nimport axios from 'axios';\r\n\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\n\r\nfunction ChatBody(){\r\n\r\n    //This state is for the message that will be sent to the \r\n    //server so it can be emitted.\r\n    const [text, setText] = useState('')\r\n\r\n\r\n    //This state is what will be mapped and printed on the users UI  \r\n    //const [lists, setLists] = useState([''])\r\n    const [mappingTheChats, setMappingTheChats] = useState([{}])  \r\n\r\n\r\n    //This is for displaying when the other user is typing...\r\n    const[userIsTyping, setUserIsTyping] = useState('')\r\n\r\n\r\n    //This is used to change the value of the input to empty string\r\n    const inputRef = useRef()\r\n\r\n\r\n    //This is for our scrollable chat body\r\n    const scrollRef = useRef()\r\n    //   scrollRef.scrollTop = scrollRef.scrollHeight;\r\n\r\n    //logged in name ref\r\n    const loggedInNameMessagesRef = useRef()\r\n    \r\n  \r\n    //This is the scrollToBottomAlwaysOnNewMessageRef\r\n    const scrollToBottomAlwaysOnNewMessageRef = useRef(null)\r\n\r\n\r\nconst [logColor, setLogColor] = useState('black')\r\n\r\n\r\n    \r\n   \r\n    //This sound for an incoming message\r\n   const playNotification = () => {\r\n    const sound = new Audio(notification); \r\n    sound.play()\r\n    }\r\n   \r\n    //Our useConetext for this file\r\n    const { loggedInNameValue, setLoggedInNameValue } = useContext(LoggedInNameContext) \r\n\r\n    const { OtherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext)\r\n\r\n\r\n    //fetching old chats with OtherUserNameValue\r\n    /*\r\n    axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n\r\n       from: loggedInNameValue,\r\n\r\n       to: OtherUserNameValue\r\n\r\n    }).then((response) => {\r\n\r\n        console.log(response)\r\n\r\n    }).catch((err) => {\r\n\r\n        console.log(err)\r\n        \r\n    })\r\n    */\r\n\r\n   const [styleLoggedInUserText, setStyleLoggedInUserText] = useState(null)\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //This is used to delete a message when the trashcan is\r\n    //clicked on.\r\n    const messageDelete = (id) => {\r\n        const newMappingTheChat = mappingTheChats.filter(l => l.id !== id)\r\n        setMappingTheChats(newMappingTheChat)\r\n    }\r\n\r\n\r\n\r\n    //This will be used to dictect when the other user is typing...\r\n    //and then it will send the ('typing') message\r\n    //to the other user connected in the socket server.\r\n    const handleTyping = () => {\r\n        socket.emit('typing', {typingNotification: 'typing...'})\r\n    }\r\n\r\n\r\n    //This will involke when the other user is not typing or they\r\n    //just got off the input box\r\n    const handleNotTyping = () => {\r\n        socket.emit('notTyping', ' ')\r\n    }\r\n\r\n\r\n        \r\n    //This emits the username of the logged in user to the server once login successful\r\n    //so that it can assign a socket id to the login user\r\n    useEffect(() => {\r\n        \r\n        if (loggedInNameValue) {\r\n\r\n            socket.emit(\"username\", { username: loggedInNameValue } );\r\n\r\n        }\r\n\r\n    }, [socket])\r\n   \r\n\r\n\r\n    \r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", {message: text, from: loggedInNameValue, to: OtherUserNameValue})\r\n\r\n        //This is used to change the value of the input to empty string\r\n        //when the send button is clicked\r\n       // inputRef.current.value = \" \";\r\n       // setText(' '); remove the comment from this line of code, this code is important\r\n       \r\n    };\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data)  => {  \r\n            console.log(data)   \r\n        //The (data.message) below holds the message property value received from the server and\r\n        //we give each message a random unique ID so that we can do stuff like\r\n        //deleteing the message using it unique ID etc...\r\n\r\n        const [m, f, t, i] = [data.message, data.from, data.to, uuid()]\r\n        \r\n    \r\n\r\n        \r\n        //This keeps whatever is in the lists state and add a new data to the list ( in this case, \r\n        // which is the message ) so it can get mapped   \r\n        \r\n      setMappingTheChats((prevState) => [...prevState, { dataMessage: m, id: i, dataMessageFrom: f, dataMessageTo: to }])\r\n \r\n\r\n\r\n //setMappingTheChats((prevState) => [...prevState, { data }])\r\n    \r\n\r\n\r\n        \r\n                     \r\n       \r\n        //This gives a notification alert when a message comes in...\r\n       // playNotification()      \r\n \r\n        })\r\n    }, [socket])\r\n\r\n\r\n\r\n    //This useEffect handles when the other user is typing.\r\n    //it receive the information from the server so\r\n    //we can display it on the front end.\r\n\r\n    useEffect(() =>{\r\n\r\n        socket.on(\"isTyping\", (data) => {\r\n          \r\n            setUserIsTyping(data.typingNotification) \r\n            console.log(userIsTyping)\r\n\r\n        })\r\n        \r\n\r\n    }, [socket])\r\n\r\n\r\n     //This useEffect handles when  the other user is not typing.\r\n     //it will emit an empty string\r\n     useEffect(() => {\r\n        socket.on(\"isNotTyping\", (data) => {\r\n            setUserIsTyping(data)\r\n        })\r\n     }, [socket])\r\n\r\n\r\n\r\n     //scroll effect\r\n     useEffect(() => {\r\n  //This will make sure the bottom image is always shown when new message enters.\r\n  scrollToBottomAlwaysOnNewMessageRef.current?.scrollIntoView(false)\r\n        \r\n    }, [mappingTheChats])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div style={{border:\"5px solid black\", paddingBottom: \"800px\"}}>\r\n            <div className=\"chatNav\">\r\n                Your conversation with:  {OtherUserNameValue} {} {userIsTyping}\r\n            </div>\r\n \r\n\r\n            <div className=\"scroll\" ref={scrollRef} >\r\n                     \r\n                {/*\r\n                   \r\n                    mappingTheChats.map((mappingTheChat, id) => (  \r\n\r\n                     <div key={id} id=\"listMessageData\" >\r\n\r\n                            {mappingTheChat.messageData}\r\n                                      \r\n                        </div>\r\n                    ))\r\n*/\r\n\r\n\r\n                mappingTheChats.map((mappingTheChat, id) => {  \r\nif(mappingTheChat.data.from === loggedInNameValue ){\r\n\r\n\r\n                    <div key={id} id=\"listMessageData\" style={{color: 'white'}}>\r\n\r\n                        {mappingTheChat.data.message}\r\n                                    \r\n                    </div>\r\n                }               \r\n            \r\n    })           \r\n\r\n\r\n\r\n\r\n\r\n        \r\n                }\r\n\r\n        <div ref={scrollToBottomAlwaysOnNewMessageRef} />\r\n        \r\n               \r\n            </div>\r\n\r\n            <div className=\"text-box\">\r\n\r\n                <input type=\"text\" placeholder=\"message...\" \r\n\r\n                onChange={(e) => setText(e.target.value)} //This is to store what user write inside the text variable\r\n\r\n                className=\"text\"\r\n\r\n                ref={inputRef}\r\n\r\n                onMouseEnter={handleTyping}\r\n\r\n                onMouseLeave={handleNotTyping}\r\n         \r\n                />\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                {/* <button onClick={sendMessage} className=\"txt-btn\">send message</button> */} \r\n                <div>\r\n                     <FaTelegramPlane onClick={sendMessage} className=\"txt-btn\"/>\r\n                </div> \r\n                \r\n            </div>\r\n             \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":"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"},"metadata":{},"sourceType":"module"}