{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\coding-files\\\\projects\\\\web-chat-app\\\\client\\\\src\\\\asset\\\\ChatBodyFolder\\\\ChatBody.js\",\n    _s = $RefreshSig$();\n\nimport './ChatBody.css';\nimport notification from './notification.mp3'; //This for the incoming message notification\n\nimport { v4 as uuid } from 'uuid';\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa';\nimport { useContext, useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\nimport axios from 'axios';\nimport { AddUserToChatListContext } from '../contextFolder/AddUserToChatListContext';\nimport { NotificationContext } from '../contextFolder/NotificationContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\n\nfunction ChatBody() {\n  _s();\n\n  //THIS STATE IS FOR THE MESSAGE THAT WILL BE SENT TO THE SERVER  \n  //SERVER SO IT CAN BE EMITTED.\n  const [text, setText] = useState(''); //THIS STATE IS WHAT WILL BE MAPPED AND PRINTED ON THE USERS UI \n  //const [lists, setLists] = useState([''])\n\n  const [mappingTheCurrentChats, setMappingTheCurrentChats] = useState([]); //THIS IS FOR DISPLAYING WHEN THE OTHER USER IS TYPING...\n\n  const [userIsTyping, setUserIsTyping] = useState(''); //THIS IS FOR DISPLAYING NOTIFICATION MESSAGE COUNT FOR UNREAD MESSAGE\n  // const [notificationCount, setNotificationCount] = useState(0)\n  //USEREF...\n  //THIS IS USED TO CHANGE THE VALUE OF INPUT STRING TO AN EMPTY STRING.\n\n  const inputRef = useRef(); //THIS IS FOR OUR SCROLLABLE CHAT BODY      \n\n  const scrollRef = useRef(); //   scrollRef.scrollTop = scrollRef.scrollHeight;\n  //THIS IS THE scrollToBottomAlwaysOnNewMessageRef USEREF\n\n  const scrollToBottomAlwaysOnNewMessageRef = useRef(null); //This is for the textbox parent div ref\n\n  const textDivRef = useRef(); //This sound for an incoming message\n\n  /*\r\n  const playNotification = () => {\r\n  const sound = new Audio(notification); \r\n  sound.play()\r\n  }*/\n  //OUR USECONTEXT FOR THIS FILE\n\n  const {\n    loggedInNameValue,\n    setLoggedInNameValue\n  } = useContext(LoggedInNameContext);\n  const {\n    otherUserNameValue,\n    setOtherUserNameValue\n  } = useContext(OtherUserNameContext);\n  const {\n    addUserToChatListValue,\n    setAddUserToChatListValue\n  } = useContext(AddUserToChatListContext);\n  const {\n    notificationValue,\n    setNotificationValue\n  } = useContext(NotificationContext);\n  const [mappingOldChats, setMappingOldChats] = useState([{}]); //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE\n\n  useEffect(() => {\n    //Let's first set the old messages to an empty array.\n    setMappingOldChats([{}]);\n    axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\n      from: loggedInNameValue,\n      to: otherUserNameValue\n    }).then(response => {\n      response.data.forEach(responseData => {\n        let dataMessage = responseData.message;\n        let dataMessageFrom = responseData.from;\n        let dataMessageTo = responseData.to;\n        console.log({\n          dataMessage,\n          dataMessageFrom,\n          dataMessageTo\n        }); //let's first set mappingOldChats as an array of empty object\n        //\n\n        console.log(mappingOldChats); //then let's set mappingOldChats to the pasts messages.\n\n        setMappingOldChats(prevState => [...prevState, {\n          dataMessage,\n          dataMessageFrom,\n          dataMessageTo\n        }]);\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [otherUserNameValue]); //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE WHEN PAGE REFRESH WHILE CHATTING\n\n  useEffect(() => {\n    if (loggedInNameValue && otherUserNameValue) {\n      axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\n        from: loggedInNameValue,\n        to: otherUserNameValue ? otherUserNameValue : ''\n      }).then(response => {\n        response.data.forEach(responseData => {\n          let dataMessage = responseData.message;\n          let dataMessageFrom = responseData.from;\n          let dataMessageTo = responseData.To;\n          console.log({\n            dataMessage,\n            dataMessageFrom,\n            dataMessageTo\n          });\n          setMappingOldChats(prevState => [...prevState, {\n            dataMessage,\n            dataMessageFrom,\n            dataMessageTo\n          }]);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, []); //SAVING THE NAME OF OTHER USER IN SESSION STORAGE\n\n  useEffect(() => {\n    if (otherUserNameValue) {\n      sessionStorage.setItem(\"otherUserName\", JSON.stringify(otherUserNameValue));\n    }\n  }, [otherUserNameValue]);\n  useEffect(() => {\n    let storedOtherUserNameData = JSON.parse(sessionStorage.getItem(\"otherUserName\"));\n\n    if (storedOtherUserNameData) {\n      setOtherUserNameValue(storedOtherUserNameData);\n    }\n  }, []);\n  const [heightOfWindowWithKeyboard, setHeightOfWindowWithKeyboard] = useState(useRef(window.innerHeight)); //HANDLING WHEN OTHER USER IS TYPING . . .\n  //This will be used to dictect when the other user is typing...\n  //and then it will send the ('typing') message\n  //to the other user connected in the socket server.\n\n  const handleTyping = () => {\n    socket.emit('typing', {\n      typingNotification: 'is typing...',\n      userNameTyping: loggedInNameValue,\n      userNameReceivingTyping: otherUserNameValue\n    }); //on small screen, it should do this\n\n    /*\r\n    const matchResult = window.matchMedia(\"(max-width: 767px)\");\r\n      if (matchResult.matches === true)  { \r\n          const remainingSize = heightOfWindowWithoutKeyboard - heightOfWindowWithKeyboard;\r\n    console.log(remainingSize)\r\n       // textDivRef.current.style.marginBottom = \r\n        \r\n    }\r\n    */\n  }; //This will involke when the other user is not typing or they\n  //just got off the input box\n\n\n  const handleNotTyping = () => {\n    socket.emit('notTyping', ' '); //Then let's set the margin bottom of textbox parent ref to zero\n    //on small screen\n  }; //Get screen height on load of page\n\n\n  const [heightOfWindowWithoutKeyboard, setHeightOfWindowWithoutKeyboard] = useState();\n  let window;\n  useEffect(() => {\n    const matchResult = window.matchMedia(\"(max-width: 767px)\");\n\n    if (matchResult.matches === true) {}\n\n    console.log(heightOfWindowWithoutKeyboard);\n  }, []); //This emits the username of the logged in user to the server once login successful\n  //so that it can assign a socket id to the login user\n\n  useEffect(() => {\n    if (loggedInNameValue) {\n      socket.emit(\"username\", {\n        username: loggedInNameValue\n      });\n    }\n  }, [socket]); //The sendMessage function will be used to send the message\n  //data in the input box to the server so that the server can \n  //emit the message data to all the client connected to it.\n  //NOTE: data must be sent to the server first before it can be\n  //emitted to other client. React can't directly emit the message\n  //data to other client without first getting to the server.\n\n  const sendMessage = () => {\n    if (loggedInNameValue && otherUserNameValue) {\n      //Here we want to send message to the server to receive so\n      //that it can emit it to other client. After the \"send_message\"\n      //event listener, an object should follow it which will contain\n      //the message data information\n      socket.emit(\"send_message\", {\n        message: text,\n        from: loggedInNameValue,\n        to: otherUserNameValue\n      }); //This is used to change the value of the input to empty string\n      //when the send button is clicked\n\n      inputRef.current.value = \" \";\n      setText(' ');\n    } else {\n      alert('Unable to read your name. Try logging out and logging in again. Thank you!');\n    }\n  }; //We will be listening to the receive message event here after\n  //the sever has receive a message from a user and want to emit it\n  //to every user connected.\n\n\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      //The (data.message) below holds the message property value received \n      //from the server and we give each message a random unique ID so that \n      //we can do stuff like deleteing the message using it unique ID etc...\n      const [m, f, t, i] = [data.message, data.from, data.to, uuid()];\n\n      if (loggedInNameValue && otherUserNameValue) {\n        setMappingTheCurrentChats(prevState => [...prevState, {\n          dataMessage: m,\n          id: i,\n          dataMessageFrom: f,\n          dataMessageTo: t\n        }]);\n      } //This says whenever someone send you a message and the value of the \n      //otherUserName variable is not the same as the person sending you the message,\n      //don't show us the message while we're chatting with other people. Why \n      //the message should not display? This is so so as to prevent message \n      //to avoid classhing with other user when we're chatting with them.\n\n\n      if (f !== otherUserNameValue && t === loggedInNameValue) {\n        if (otherUserNameValue === null || otherUserNameValue) {\n          //This says whether there is value for otherUserNameValue or not, just \n          //leave what is inside mappingTheCurrentChats and then add nothing\n          console.log(typeof otherUserNameValue);\n          setMappingTheCurrentChats(prevState => [...prevState]);\n        } //when someone is online and they sends you message and the person isn't who you're  \n        //chatting with, let's add that person to your chatlist\n\n\n        setAddUserToChatListValue(f); //Set notification count for unread message \n\n        socket.emit(\"addToNotification\", {\n          userName: t,\n          personToAddToNotificationList: f\n        });\n      } //when the person you're chatting with sends you a message, we want to change their \n      //position in our chatlist by bringing them to the top of our list.\n\n    });\n  }, [socket, loggedInNameValue, otherUserNameValue]); //This useEffect handles when the other user is typing.\n  //it receive the information from the server so\n  //we can display it on the front end.\n\n  useEffect(() => {\n    socket.on(\"isTyping\", data => {\n      setUserIsTyping(data.typingNotification);\n    });\n  }, [socket]); //This useEffect handles when  the other user is not typing.\n  //it will emit an empty string\n\n  useEffect(() => {\n    socket.on(\"isNotTyping\", data => {\n      setUserIsTyping(data);\n    });\n  }, [socket]); //receiving my notification list.\n\n  useEffect(() => {\n    //Listenning for new notification and then adding it to our notification\n    //array. But first check if the person to add to notification is not the\n    //same as the current person we're chatting with which is the value \n    //otherUserNameValue variable holds\n    socket.on(\"myNotification\", data => {\n      if (data.personToAddToNotificationList !== otherUserNameValue) {\n        setNotificationValue(prevState => [...prevState, data.personToAddToNotificationList]);\n      }\n    });\n  }, [socket]); //scroll effect\n\n  useEffect(() => {\n    var _scrollToBottomAlways;\n\n    //This will make sure the bottom image is always shown when new message enters.\n    (_scrollToBottomAlways = scrollToBottomAlwaysOnNewMessageRef.current) === null || _scrollToBottomAlways === void 0 ? void 0 : _scrollToBottomAlways.scrollIntoView(false);\n  }, [mappingTheCurrentChats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-body-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatNav\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: otherUserNameValue ? /*#__PURE__*/_jsxDEV(\"b\", {\n          className: \"image-behind-otherUserNameValue\",\n          children: [\" \", otherUserNameValue.charAt(0), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 14\n        }, this) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\" \", otherUserNameValue ? otherUserNameValue : \"\", \": \", /*#__PURE__*/_jsxDEV(\"i\", {\n          id: \"userIsTyping\",\n          children: userIsTyping\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 69\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll\",\n      ref: scrollRef,\n      children: [mappingOldChats ? mappingOldChats.map((mappingOldChat, id) => //checking messages that are for the sender so it can have different styling\n      mappingOldChat.dataMessageFrom === loggedInNameValue ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fromOldListMessageData\",\n        children: mappingOldChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 29\n      }, this) :\n      /*#__PURE__*/\n      //checking messages that are for the receiver so it can have different styling\n      _jsxDEV(\"div\", {\n        className: \"toOldListMessageData\",\n        children: mappingOldChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 29\n      }, this)) : \"\", \" \", mappingTheCurrentChats.map((mappingTheCurrentChat, id) => //checking messages that are for the sender so it can have different styling\n      mappingTheCurrentChat.dataMessageFrom === loggedInNameValue ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fromListMessageData\",\n        children: mappingTheCurrentChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 29\n      }, this) :\n      /*#__PURE__*/\n      //checking messages that are for the receiver so it can have different styling\n      _jsxDEV(\"div\", {\n        className: \"toListMessageData\",\n        children: mappingTheCurrentChat.dataMessage\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 29\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: scrollToBottomAlwaysOnNewMessageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-box-div\",\n      ref: textDivRef,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: 'reply to ' + otherUserNameValue + '...',\n        onChange: e => setText(e.target.value) //This is to store what user write inside the text variable\n        ,\n        className: \"text\",\n        ref: inputRef,\n        onMouseEnter: handleTyping,\n        onMouseLeave: handleNotTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FaTelegramPlane, {\n          onClick: sendMessage,\n          className: \"txt-btn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 452,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"kACTXXMDb7UD5g+TB+j3nbJ2pdw=\");\n\n_c = ChatBody;\nexport default ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"names":["notification","v4","uuid","FaTelegramPlane","FaTrash","useContext","useEffect","useRef","useState","io","LoggedInNameContext","OtherUserNameContext","axios","AddUserToChatListContext","NotificationContext","socket","connect","ChatBody","text","setText","mappingTheCurrentChats","setMappingTheCurrentChats","userIsTyping","setUserIsTyping","inputRef","scrollRef","scrollToBottomAlwaysOnNewMessageRef","textDivRef","loggedInNameValue","setLoggedInNameValue","otherUserNameValue","setOtherUserNameValue","addUserToChatListValue","setAddUserToChatListValue","notificationValue","setNotificationValue","mappingOldChats","setMappingOldChats","post","from","to","then","response","data","forEach","responseData","dataMessage","message","dataMessageFrom","dataMessageTo","console","log","prevState","catch","err","To","sessionStorage","setItem","JSON","stringify","storedOtherUserNameData","parse","getItem","heightOfWindowWithKeyboard","setHeightOfWindowWithKeyboard","window","innerHeight","handleTyping","emit","typingNotification","userNameTyping","userNameReceivingTyping","handleNotTyping","heightOfWindowWithoutKeyboard","setHeightOfWindowWithoutKeyboard","matchResult","matchMedia","matches","username","sendMessage","current","value","alert","on","m","f","t","i","id","userName","personToAddToNotificationList","scrollIntoView","charAt","map","mappingOldChat","mappingTheCurrentChat","e","target"],"sources":["C:/Users/HP/Desktop/coding-files/projects/web-chat-app/client/src/asset/ChatBodyFolder/ChatBody.js"],"sourcesContent":["import './ChatBody.css';\r\nimport notification from './notification.mp3'//This for the incoming message notification\r\nimport { v4 as uuid } from 'uuid';\r\nimport { FaTelegramPlane, FaTrash } from 'react-icons/fa'\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport io  from 'socket.io-client';\r\nimport { LoggedInNameContext } from '../contextFolder/LoggedInNameContext';\r\nimport { OtherUserNameContext } from '../contextFolder/OtherUserNameContext';\r\nimport axios from 'axios';\r\nimport { AddUserToChatListContext } from '../contextFolder/AddUserToChatListContext';\r\nimport { NotificationContext } from '../contextFolder/NotificationContext';\r\n\r\n\r\nconst socket = io.connect(\"http://localhost:4000\"); //making a connection to the server\r\n\r\n\r\nfunction ChatBody(){\r\n\r\n    //THIS STATE IS FOR THE MESSAGE THAT WILL BE SENT TO THE SERVER  \r\n    //SERVER SO IT CAN BE EMITTED.\r\n    const [text, setText] = useState('')\r\n\r\n\r\n    //THIS STATE IS WHAT WILL BE MAPPED AND PRINTED ON THE USERS UI \r\n    //const [lists, setLists] = useState([''])\r\n    const [mappingTheCurrentChats, setMappingTheCurrentChats] = useState([])  \r\n\r\n\r\n    //THIS IS FOR DISPLAYING WHEN THE OTHER USER IS TYPING...\r\n    const[userIsTyping, setUserIsTyping] = useState('')\r\n\r\n    //THIS IS FOR DISPLAYING NOTIFICATION MESSAGE COUNT FOR UNREAD MESSAGE\r\n   // const [notificationCount, setNotificationCount] = useState(0)\r\n\r\n\r\n\r\n    //USEREF...\r\n\r\n    //THIS IS USED TO CHANGE THE VALUE OF INPUT STRING TO AN EMPTY STRING.\r\n    const inputRef = useRef()\r\n\r\n\r\n    //THIS IS FOR OUR SCROLLABLE CHAT BODY      \r\n    const scrollRef = useRef()\r\n    //   scrollRef.scrollTop = scrollRef.scrollHeight;\r\n    \r\n  \r\n    //THIS IS THE scrollToBottomAlwaysOnNewMessageRef USEREF\r\n    const scrollToBottomAlwaysOnNewMessageRef = useRef(null)\r\n\r\n    //This is for the textbox parent div ref\r\n    const textDivRef = useRef()\r\n\r\n\r\n   \r\n    //This sound for an incoming message\r\n    /*\r\n    const playNotification = () => {\r\n    const sound = new Audio(notification); \r\n    sound.play()\r\n    }*/\r\n   \r\n    //OUR USECONTEXT FOR THIS FILE\r\n    const { loggedInNameValue, setLoggedInNameValue } = useContext(LoggedInNameContext) \r\n\r\n    const { otherUserNameValue, setOtherUserNameValue } = useContext(OtherUserNameContext)\r\n\r\n    const { addUserToChatListValue, setAddUserToChatListValue } = useContext(AddUserToChatListContext)\r\n\r\n    const { notificationValue, setNotificationValue }  = useContext(NotificationContext)\r\n\r\n\r\n    const [mappingOldChats, setMappingOldChats] = useState([{}])\r\n    //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE\r\n    useEffect(() => {  \r\n        \r\n       //Let's first set the old messages to an empty array.\r\n       setMappingOldChats([{}])\r\n\r\n       axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n\r\n       from: loggedInNameValue,\r\n\r\n       to: otherUserNameValue\r\n\r\n    }).then((response) => {\r\n      \r\n            response.data.forEach((responseData) => {\r\n                \r\n                let dataMessage = responseData.message;\r\n                let dataMessageFrom = responseData.from;\r\n                let dataMessageTo = responseData.to;\r\n                console.log({dataMessage, dataMessageFrom, dataMessageTo});\r\n\r\n                //let's first set mappingOldChats as an array of empty object\r\n               //\r\n                console.log(mappingOldChats)\r\n\r\n                //then let's set mappingOldChats to the pasts messages.\r\n                setMappingOldChats((prevState) => [...prevState, {dataMessage, dataMessageFrom, dataMessageTo }])\r\n\r\n        \r\n        })\r\n\r\n    \r\n\r\n    }).catch((err) => {\r\n\r\n        console.log(err)\r\n        \r\n    })\r\n    \r\n    }, [otherUserNameValue]);\r\n\r\n\r\n\r\n    //FETCHING OLD CHATS WITH OTHERUSERNAMEVALUE WHEN PAGE REFRESH WHILE CHATTING\r\n    useEffect(() => {\r\n\r\n        if (loggedInNameValue && otherUserNameValue) {  \r\n\r\n            axios.post(\"http://localhost:4000/fetchOldMessagesWithThisUser\", {\r\n    \r\n            from: loggedInNameValue,\r\n    \r\n            to: otherUserNameValue ? otherUserNameValue : ''\r\n    \r\n        }).then((response) => {\r\n    \r\n            response.data.forEach((responseData) => {\r\n            \r\n                let dataMessage = responseData.message;\r\n                let dataMessageFrom = responseData.from;\r\n                let dataMessageTo = responseData.To;\r\n                console.log({dataMessage, dataMessageFrom, dataMessageTo});\r\n\r\n                \r\n                setMappingOldChats((prevState) => [...prevState, {dataMessage, dataMessageFrom, dataMessageTo }])\r\n\r\n        \r\n            })\r\n    \r\n\r\n            }).catch((err) => {\r\n\r\n                console.log(err)\r\n                \r\n            })\r\n        \r\n        }\r\n\r\n        }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //SAVING THE NAME OF OTHER USER IN SESSION STORAGE\r\n    useEffect(() => {\r\n\r\n        if (otherUserNameValue) {  \r\n\r\n        sessionStorage.setItem(\"otherUserName\", JSON.stringify(otherUserNameValue))\r\n\r\n        }\r\n\r\n\r\n    }, [otherUserNameValue])\r\n\r\n    useEffect(() => {\r\n\r\n        let storedOtherUserNameData = JSON.parse(sessionStorage.getItem(\"otherUserName\"))\r\n\r\n        if (storedOtherUserNameData) {\r\n\r\n            setOtherUserNameValue(storedOtherUserNameData)\r\n\r\n        }\r\n\r\n    }, []);\r\n\r\n \r\n\r\n    const [heightOfWindowWithKeyboard, setHeightOfWindowWithKeyboard] = useState(useRef(window.innerHeight))\r\n\r\n    //HANDLING WHEN OTHER USER IS TYPING . . .\r\n    //This will be used to dictect when the other user is typing...\r\n    //and then it will send the ('typing') message\r\n    //to the other user connected in the socket server.\r\n    const handleTyping = () => {\r\n\r\n        socket.emit('typing', {\r\n\r\n            typingNotification: 'is typing...', \r\n\r\n            userNameTyping: loggedInNameValue, \r\n\r\n            userNameReceivingTyping: otherUserNameValue\r\n        })\r\n\r\n\r\n\r\n        //on small screen, it should do this\r\n        /*\r\n        const matchResult = window.matchMedia(\"(max-width: 767px)\");\r\n\r\n        if (matchResult.matches === true)  { \r\n\r\n            const remainingSize = heightOfWindowWithoutKeyboard - heightOfWindowWithKeyboard;\r\nconsole.log(remainingSize)\r\n           // textDivRef.current.style.marginBottom = \r\n\r\n\r\n        \r\n        }\r\n*/\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    //This will involke when the other user is not typing or they\r\n    //just got off the input box\r\n    const handleNotTyping = () => {\r\n        socket.emit('notTyping', ' ')\r\n\r\n        //Then let's set the margin bottom of textbox parent ref to zero\r\n        //on small screen\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    //Get screen height on load of page\r\n\r\n    const [heightOfWindowWithoutKeyboard, setHeightOfWindowWithoutKeyboard] = useState()\r\n    let window\r\n    useEffect(() => {\r\n\r\n        const matchResult = window.matchMedia(\"(max-width: 767px)\");\r\n            \r\n        if (matchResult.matches === true) {\r\n\r\n        }\r\n             \r\n            \r\n            \r\n        \r\n        \r\n    \r\nconsole.log(heightOfWindowWithoutKeyboard)\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n        \r\n    //This emits the username of the logged in user to the server once login successful\r\n    //so that it can assign a socket id to the login user\r\n    useEffect(() => {\r\n        \r\n        if (loggedInNameValue) {\r\n\r\n            socket.emit(\"username\", { username: loggedInNameValue } );\r\n\r\n        }\r\n\r\n    }, [socket])\r\n   \r\n\r\n\r\n    \r\n    //The sendMessage function will be used to send the message\r\n    //data in the input box to the server so that the server can \r\n    //emit the message data to all the client connected to it.\r\n    //NOTE: data must be sent to the server first before it can be\r\n    //emitted to other client. React can't directly emit the message\r\n    //data to other client without first getting to the server.\r\n    const sendMessage = () => {\r\n\r\n        if (loggedInNameValue && otherUserNameValue) { \r\n\r\n        //Here we want to send message to the server to receive so\r\n        //that it can emit it to other client. After the \"send_message\"\r\n        //event listener, an object should follow it which will contain\r\n        //the message data information\r\n        socket.emit(\"send_message\", { message: text, from: loggedInNameValue, to: otherUserNameValue })\r\n\r\n        //This is used to change the value of the input to empty string\r\n        //when the send button is clicked\r\n        inputRef.current.value = \" \";\r\n        setText(' '); \r\n\r\n        } else {\r\n\r\n            alert('Unable to read your name. Try logging out and logging in again. Thank you!')\r\n\r\n        }  \r\n       \r\n       \r\n    };\r\n\r\n\r\n\r\n    //We will be listening to the receive message event here after\r\n    //the sever has receive a message from a user and want to emit it\r\n    //to every user connected.\r\n    useEffect(() => {\r\n\r\n        socket.on(\"receive_message\", (data)  => {  \r\n           \r\n        //The (data.message) below holds the message property value received \r\n        //from the server and we give each message a random unique ID so that \r\n        //we can do stuff like deleteing the message using it unique ID etc...\r\n\r\n        const [m, f, t, i] = [data.message, data.from, data.to, uuid()];\r\n\r\n        if (loggedInNameValue && otherUserNameValue) {  \r\n\r\n        setMappingTheCurrentChats((prevState) => [...prevState, { dataMessage: m, id: i, dataMessageFrom: f, dataMessageTo: t } ]);\r\n\r\n         }\r\n        //This says whenever someone send you a message and the value of the \r\n        //otherUserName variable is not the same as the person sending you the message,\r\n        //don't show us the message while we're chatting with other people. Why \r\n        //the message should not display? This is so so as to prevent message \r\n        //to avoid classhing with other user when we're chatting with them.\r\n        if (f !== otherUserNameValue && t === loggedInNameValue) {\r\n     \r\n            if (otherUserNameValue === null || otherUserNameValue) {\r\n                //This says whether there is value for otherUserNameValue or not, just \r\n                //leave what is inside mappingTheCurrentChats and then add nothing\r\n                console.log(typeof otherUserNameValue)\r\n                setMappingTheCurrentChats((prevState) => [...prevState]);\r\n            }\r\n            \r\n    \r\n            //when someone is online and they sends you message and the person isn't who you're  \r\n            //chatting with, let's add that person to your chatlist\r\n            setAddUserToChatListValue(f)\r\n            \r\n            //Set notification count for unread message \r\n            socket.emit(\"addToNotification\", {userName: t, \r\n\r\n                personToAddToNotificationList: f\r\n\r\n              });\r\n\r\n\r\n\r\n              \r\n\r\n\r\n           \r\n         }    \r\n            \r\n \r\n       \r\n\r\n\r\n         //when the person you're chatting with sends you a message, we want to change their \r\n         //position in our chatlist by bringing them to the top of our list.\r\n      \r\n\r\n\r\n\r\n\r\n\r\n      \r\n        });  \r\n\r\n    }, [socket, loggedInNameValue, otherUserNameValue])\r\n\r\n \r\n\r\n    //This useEffect handles when the other user is typing.\r\n    //it receive the information from the server so\r\n    //we can display it on the front end.\r\n\r\n    useEffect(() =>{\r\n\r\n        socket.on(\"isTyping\", (data) => {\r\n          \r\n            setUserIsTyping(data.typingNotification) \r\n    \r\n        })\r\n        \r\n\r\n    }, [socket])\r\n\r\n\r\n\r\n     //This useEffect handles when  the other user is not typing.\r\n     //it will emit an empty string\r\n     useEffect(() => {\r\n\r\n        socket.on(\"isNotTyping\", (data) => {\r\n\r\n            setUserIsTyping(data)\r\n\r\n        })\r\n\r\n     }, [socket])\r\n\r\n\r\n\r\n     //receiving my notification list.\r\n     useEffect(() => {\r\n\r\n        //Listenning for new notification and then adding it to our notification\r\n        //array. But first check if the person to add to notification is not the\r\n        //same as the current person we're chatting with which is the value \r\n        //otherUserNameValue variable holds\r\n        \r\n        socket.on(\"myNotification\", (data) => {\r\n \r\n            if (data.personToAddToNotificationList !== otherUserNameValue) {\r\n\r\n                setNotificationValue((prevState) => [...prevState, data.personToAddToNotificationList])\r\n            \r\n            }\r\n\r\n        });\r\n\r\n\r\n     }, [socket]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     //scroll effect\r\n     useEffect(() => {\r\n    //This will make sure the bottom image is always shown when new message enters.\r\n    scrollToBottomAlwaysOnNewMessageRef.current?.scrollIntoView(false)\r\n        \r\n    }, [mappingTheCurrentChats])\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"chat-body-container\">\r\n          \r\n            <div className=\"chatNav\">\r\n           \r\n             <strong > \r\n\r\n             { otherUserNameValue ? \r\n             \r\n             <b className=\"image-behind-otherUserNameValue\"> {otherUserNameValue.charAt(0)} </b> \r\n             \r\n             : '' \r\n             \r\n             } \r\n             \r\n             </strong>\r\n                     \r\n                <b> {otherUserNameValue ? otherUserNameValue : \"\"}: <i id=\"userIsTyping\">{userIsTyping}</i> </b>\r\n\r\n            </div> {/*CHATNAV DIV ENDS*/}\r\n\r\n\r\n    \r\n\r\n            <div className=\"scroll\" ref={scrollRef} >\r\n\r\n\r\n            {/*THIS IS FOR MAPPING OLD/HISTORY CHATS BETWEEN USERS CHATTING*/}    \r\n\r\n              { mappingOldChats ?\r\n           \r\n                mappingOldChats.map((mappingOldChat, id) => \r\n                    //checking messages that are for the sender so it can have different styling\r\n                    mappingOldChat.dataMessageFrom === loggedInNameValue ? (  \r\n\r\n                            <div key={id} className=\"fromOldListMessageData\">\r\n\r\n                               {mappingOldChat.dataMessage}\r\n\r\n                            </div>\r\n                                         \r\n\r\n                    ) : (\r\n                    //checking messages that are for the receiver so it can have different styling\r\n                            <div key={id} className=\"toOldListMessageData\">\r\n\r\n                               {mappingOldChat.dataMessage}\r\n\r\n                            </div> \r\n\r\n                        )\r\n\r\n                     \r\n                    )  : \"\"\r\n\r\n                    \r\n                } {/*MAPPING OLD CHATS ENDING*/}\r\n                    \r\n\r\n\r\n\r\n\r\n\r\n                {/*THIS IS FOR MAPPING CUREENT CHATS BETWEEN USERS CHATTING*/}\r\n\r\n                {mappingTheCurrentChats.map((mappingTheCurrentChat, id) => \r\n                    //checking messages that are for the sender so it can have different styling\r\n                    mappingTheCurrentChat.dataMessageFrom === loggedInNameValue ? (  \r\n\r\n                            <div key={id} className=\"fromListMessageData\">\r\n\r\n                               {mappingTheCurrentChat.dataMessage}\r\n\r\n                            </div>\r\n                                         \r\n\r\n                    ) : (\r\n                    //checking messages that are for the receiver so it can have different styling\r\n                            <div key={id} className=\"toListMessageData\">\r\n\r\n                               {mappingTheCurrentChat.dataMessage}\r\n\r\n                            </div>\r\n\r\n                    )\r\n\r\n                    )        \r\n        \r\n                }\r\n\r\n            {/*THIS IS DIV THAT MAKE SURE LAST MESSAGE IS ALWAYS SHOWING*/}    \r\n            <div ref={scrollToBottomAlwaysOnNewMessageRef} />\r\n        \r\n               \r\n            </div>\r\n\r\n\r\n            <div className=\"text-box-div\" ref={textDivRef} >\r\n\r\n                <textarea\r\n\r\n                placeholder= {'reply to ' + otherUserNameValue + '...'}\r\n                \r\n                onChange={(e) => setText(e.target.value)} //This is to store what user write inside the text variable\r\n\r\n                className=\"text\"\r\n\r\n                ref={inputRef}\r\n\r\n                onMouseEnter={handleTyping}\r\n\r\n                onMouseLeave={handleNotTyping}\r\n         \r\n                />\r\n\r\n                {/* clicking the button below sends your message*/}\r\n                {/* <button onClick={sendMessage} className=\"txt-btn\">send message</button> */} \r\n                <div>\r\n                     <FaTelegramPlane onClick={sendMessage} className=\"txt-btn\"/>\r\n                </div> \r\n                \r\n            </div>\r\n             \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBody;"],"mappings":"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"},"metadata":{},"sourceType":"module"}